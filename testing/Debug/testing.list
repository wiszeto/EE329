
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e20  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800200c  0800200c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800200c  0800200c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800200c  0800200c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800200c  0800200c  0001200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2000000c  08002020  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08002020  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cfa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001357  00000000  00000000  00025d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00027090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  00027760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027212  00000000  00000000  00027d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007cfe  00000000  00000000  0004ef9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef377  00000000  00000000  00056c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014600f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ac  00000000  00000000  00146060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001fb4 	.word	0x08001fb4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001fb4 	.word	0x08001fb4

080001ec <main>:

void SystemClock_Config(void);
static void MX_RNG_Init(void);

int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0

  HAL_Init();
 80001f2:	f000 f9a8 	bl	8000546 <HAL_Init>

  SystemClock_Config();
 80001f6:	f000 f879 	bl	80002ec <SystemClock_Config>

  MX_RNG_Init();
 80001fa:	f000 f8bd 	bl	8000378 <MX_RNG_Init>

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80001fe:	4b37      	ldr	r3, [pc, #220]	; (80002dc <main+0xf0>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000202:	4a36      	ldr	r2, [pc, #216]	; (80002dc <main+0xf0>)
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;	//clock inits
 800020a:	4b34      	ldr	r3, [pc, #208]	; (80002dc <main+0xf0>)
 800020c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020e:	4a33      	ldr	r2, [pc, #204]	; (80002dc <main+0xf0>)
 8000210:	f043 0302 	orr.w	r3, r3, #2
 8000214:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(GPIO_MODER_MODE7);	//LD2 init
 8000216:	4b32      	ldr	r3, [pc, #200]	; (80002e0 <main+0xf4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a31      	ldr	r2, [pc, #196]	; (80002e0 <main+0xf4>)
 800021c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000220:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0);
 8000222:	4b2f      	ldr	r3, [pc, #188]	; (80002e0 <main+0xf4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <main+0xf4>)
 8000228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800022c:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~(GPIO_MODER_MODE0);
 800022e:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <main+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a2c      	ldr	r2, [pc, #176]	; (80002e4 <main+0xf8>)
 8000234:	f023 0303 	bic.w	r3, r3, #3
 8000238:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0);
 800023a:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <main+0xf8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a29      	ldr	r2, [pc, #164]	; (80002e4 <main+0xf8>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODE1);
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <main+0xf8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a26      	ldr	r2, [pc, #152]	; (80002e4 <main+0xf8>)
 800024c:	f023 030c 	bic.w	r3, r3, #12
 8000250:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE1_0);
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <main+0xf8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a23      	ldr	r2, [pc, #140]	; (80002e4 <main+0xf8>)
 8000258:	f043 0304 	orr.w	r3, r3, #4
 800025c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODE2);
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <main+0xf8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a20      	ldr	r2, [pc, #128]	; (80002e4 <main+0xf8>)
 8000264:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000268:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE2_0);
 800026a:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <main+0xf8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a1d      	ldr	r2, [pc, #116]	; (80002e4 <main+0xf8>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODE3);
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <main+0xf8>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <main+0xf8>)
 800027c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000280:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE3_0);
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <main+0xf8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <main+0xf8>)
 8000288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800028c:	6013      	str	r3, [r2, #0]

	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <main+0xf0>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	4a12      	ldr	r2, [pc, #72]	; (80002dc <main+0xf0>)
 8000294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000298:	64d3      	str	r3, [r2, #76]	; 0x4c
	RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE);
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <main+0xfc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <main+0xfc>)
 80002a0:	f043 030c 	orr.w	r3, r3, #12
 80002a4:	6013      	str	r3, [r2, #0]

	int random_number;
	int s = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
	int c = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
	while (1) {

	while (!(RNG->SR & RNG_SR_DRDY));
 80002ae:	bf00      	nop
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <main+0xfc>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f9      	beq.n	80002b0 <main+0xc4>
	random_number = RNG->DR;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <main+0xfc>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	607b      	str	r3, [r7, #4]
	if (random_number > 0 ){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	ddf2      	ble.n	80002ae <main+0xc2>
		GPIOB->BSRR = GPIO_PIN_7;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <main+0xf4>)
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	619a      	str	r2, [r3, #24]
		GPIOC->ODR = random_number;
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <main+0xf8>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6153      	str	r3, [r2, #20]
		HAL_Delay(100);
 80002d4:	2064      	movs	r0, #100	; 0x64
 80002d6:	f000 f9ab 	bl	8000630 <HAL_Delay>
	while (!(RNG->SR & RNG_SR_DRDY));
 80002da:	e7e8      	b.n	80002ae <main+0xc2>
 80002dc:	40021000 	.word	0x40021000
 80002e0:	48000400 	.word	0x48000400
 80002e4:	48000800 	.word	0x48000800
 80002e8:	50060800 	.word	0x50060800

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b096      	sub	sp, #88	; 0x58
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2244      	movs	r2, #68	; 0x44
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fe52 	bl	8001fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800030e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000312:	f000 faa5 	bl	8000860 <HAL_PWREx_ControlVoltageScaling>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800031c:	f000 f840 	bl	80003a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000320:	2310      	movs	r3, #16
 8000322:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800032c:	2360      	movs	r3, #96	; 0x60
 800032e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fae7 	bl	800090c <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000344:	f000 f82c 	bl	80003a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800034c:	2300      	movs	r3, #0
 800034e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f000 feed 	bl	8001140 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800036c:	f000 f818 	bl	80003a0 <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3758      	adds	r7, #88	; 0x58
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_RNG_Init+0x20>)
 800037e:	4a07      	ldr	r2, [pc, #28]	; (800039c <MX_RNG_Init+0x24>)
 8000380:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_RNG_Init+0x20>)
 8000384:	f001 fd92 	bl	8001eac <HAL_RNG_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800038e:	f000 f807 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000028 	.word	0x20000028
 800039c:	50060800 	.word	0x50060800

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a4:	b672      	cpsid	i
}
 80003a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <Error_Handler+0x8>
	...

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <HAL_MspInit+0x44>)
 80003b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <HAL_MspInit+0x44>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6613      	str	r3, [r2, #96]	; 0x60
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_MspInit+0x44>)
 80003c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_MspInit+0x44>)
 80003cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_MspInit+0x44>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	6593      	str	r3, [r2, #88]	; 0x58
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_MspInit+0x44>)
 80003d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b0a6      	sub	sp, #152	; 0x98
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	228c      	movs	r2, #140	; 0x8c
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f001 fdcd 	bl	8001fa4 <memset>
  if(hrng->Instance==RNG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a19      	ldr	r2, [pc, #100]	; (8000474 <HAL_RNG_MspInit+0x80>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d12b      	bne.n	800046c <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000414:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000418:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800041a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800041e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000422:	2301      	movs	r3, #1
 8000424:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000426:	2301      	movs	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800042a:	2310      	movs	r3, #16
 800042c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800042e:	2302      	movs	r3, #2
 8000430:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000432:	2302      	movs	r3, #2
 8000434:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000436:	2302      	movs	r3, #2
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800043a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	4618      	mov	r0, r3
 8000446:	f001 f867 	bl	8001518 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8000450:	f7ff ffa6 	bl	80003a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <HAL_RNG_MspInit+0x84>)
 8000456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <HAL_RNG_MspInit+0x84>)
 800045a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800045e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <HAL_RNG_MspInit+0x84>)
 8000462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800046c:	bf00      	nop
 800046e:	3798      	adds	r7, #152	; 0x98
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	50060800 	.word	0x50060800
 8000478:	40021000 	.word	0x40021000

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f892 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <SystemInit+0x20>)
 80004d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <SystemInit+0x20>)
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800052c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f8:	f7ff ffea 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000522:	f001 fd1b 	bl	8001f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000526:	f7ff fe61 	bl	80001ec <main>

0800052a <LoopForever>:

LoopForever:
    b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800052c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000538:	08002014 	.word	0x08002014
  ldr r2, =_sbss
 800053c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000540:	2000003c 	.word	0x2000003c

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>

08000546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f943 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f80e 	bl	8000578 <HAL_InitTick>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	e001      	b.n	800056c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000568:	f7ff ff20 	bl	80003ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800056c:	79fb      	ldrb	r3, [r7, #7]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_InitTick+0x6c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d023      	beq.n	80005d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_InitTick+0x70>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_InitTick+0x6c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	fbb3 f3f1 	udiv	r3, r3, r1
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f941 	bl	800082a <HAL_SYSTICK_Config>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10f      	bne.n	80005ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f919 	bl	80007f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <HAL_InitTick+0x74>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e007      	b.n	80005d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e004      	b.n	80005d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e001      	b.n	80005d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005d4:	2301      	movs	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x20>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_IncTick+0x24>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_IncTick+0x24>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008
 8000614:	20000038 	.word	0x20000038

08000618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <HAL_GetTick+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000038 	.word	0x20000038

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000638:	f7ff ffee 	bl	8000618 <HAL_GetTick>
 800063c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000648:	d005      	beq.n	8000656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_Delay+0x44>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000656:	bf00      	nop
 8000658:	f7ff ffde 	bl	8000618 <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	d8f7      	bhi.n	8000658 <HAL_Delay+0x28>
  {
  }
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff8e 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff47 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5c 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff8e 	bl	8000730 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <HAL_PWREx_GetVoltageRange+0x18>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40007000 	.word	0x40007000

08000860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086e:	d130      	bne.n	80008d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800087c:	d038      	beq.n	80008f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2232      	movs	r2, #50	; 0x32
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008a4:	e002      	b.n	80008ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b8:	d102      	bne.n	80008c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1f2      	bne.n	80008a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008cc:	d110      	bne.n	80008f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e00f      	b.n	80008f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008de:	d007      	beq.n	80008f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008e8:	4a05      	ldr	r2, [pc, #20]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40007000 	.word	0x40007000
 8000904:	20000000 	.word	0x20000000
 8000908:	431bde83 	.word	0x431bde83

0800090c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	f000 bc08 	b.w	8001130 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000920:	4b96      	ldr	r3, [pc, #600]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f003 030c 	and.w	r3, r3, #12
 8000928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800092a:	4b94      	ldr	r3, [pc, #592]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	f003 0303 	and.w	r3, r3, #3
 8000932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 0310 	and.w	r3, r3, #16
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80e4 	beq.w	8000b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <HAL_RCC_OscConfig+0x4c>
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2b0c      	cmp	r3, #12
 800094c:	f040 808b 	bne.w	8000a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2b01      	cmp	r3, #1
 8000954:	f040 8087 	bne.w	8000a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000958:	4b88      	ldr	r3, [pc, #544]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <HAL_RCC_OscConfig+0x64>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e3df      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a1a      	ldr	r2, [r3, #32]
 8000974:	4b81      	ldr	r3, [pc, #516]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	2b00      	cmp	r3, #0
 800097e:	d004      	beq.n	800098a <HAL_RCC_OscConfig+0x7e>
 8000980:	4b7e      	ldr	r3, [pc, #504]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000988:	e005      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
 800098a:	4b7c      	ldr	r3, [pc, #496]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 800098c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000990:	091b      	lsrs	r3, r3, #4
 8000992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000996:	4293      	cmp	r3, r2
 8000998:	d223      	bcs.n	80009e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fd5a 	bl	8001458 <RCC_SetFlashLatencyFromMSIRange>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e3c0      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009ae:	4b73      	ldr	r3, [pc, #460]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a72      	ldr	r2, [pc, #456]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	4b70      	ldr	r3, [pc, #448]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a1b      	ldr	r3, [r3, #32]
 80009c6:	496d      	ldr	r1, [pc, #436]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009c8:	4313      	orrs	r3, r2
 80009ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009cc:	4b6b      	ldr	r3, [pc, #428]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	4968      	ldr	r1, [pc, #416]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009dc:	4313      	orrs	r3, r2
 80009de:	604b      	str	r3, [r1, #4]
 80009e0:	e025      	b.n	8000a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009e2:	4b66      	ldr	r3, [pc, #408]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a65      	ldr	r2, [pc, #404]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a1b      	ldr	r3, [r3, #32]
 80009fa:	4960      	ldr	r1, [pc, #384]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a00:	4b5e      	ldr	r3, [pc, #376]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	495b      	ldr	r1, [pc, #364]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d109      	bne.n	8000a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fd1a 	bl	8001458 <RCC_SetFlashLatencyFromMSIRange>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e380      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a2e:	f000 fc87 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 8000a32:	4602      	mov	r2, r0
 8000a34:	4b51      	ldr	r3, [pc, #324]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	4950      	ldr	r1, [pc, #320]	; (8000b80 <HAL_RCC_OscConfig+0x274>)
 8000a40:	5ccb      	ldrb	r3, [r1, r3]
 8000a42:	f003 031f 	and.w	r3, r3, #31
 8000a46:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4a:	4a4e      	ldr	r2, [pc, #312]	; (8000b84 <HAL_RCC_OscConfig+0x278>)
 8000a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000a4e:	4b4e      	ldr	r3, [pc, #312]	; (8000b88 <HAL_RCC_OscConfig+0x27c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fd90 	bl	8000578 <HAL_InitTick>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d052      	beq.n	8000b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	e364      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d032      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000a6e:	4b43      	ldr	r3, [pc, #268]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a42      	ldr	r2, [pc, #264]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000a7a:	f7ff fdcd 	bl	8000618 <HAL_GetTick>
 8000a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a80:	e008      	b.n	8000a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a82:	f7ff fdc9 	bl	8000618 <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d901      	bls.n	8000a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e34d      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a94:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f0      	beq.n	8000a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000aa0:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a35      	ldr	r2, [pc, #212]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	4930      	ldr	r1, [pc, #192]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	492b      	ldr	r1, [pc, #172]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	604b      	str	r3, [r1, #4]
 8000ad2:	e01a      	b.n	8000b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000ada:	f023 0301 	bic.w	r3, r3, #1
 8000ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ae0:	f7ff fd9a 	bl	8000618 <HAL_GetTick>
 8000ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ae6:	e008      	b.n	8000afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ae8:	f7ff fd96 	bl	8000618 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d901      	bls.n	8000afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000af6:	2303      	movs	r3, #3
 8000af8:	e31a      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1f0      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x1dc>
 8000b06:	e000      	b.n	8000b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d073      	beq.n	8000bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d005      	beq.n	8000b28 <HAL_RCC_OscConfig+0x21c>
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2b0c      	cmp	r3, #12
 8000b20:	d10e      	bne.n	8000b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d10b      	bne.n	8000b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d063      	beq.n	8000bfc <HAL_RCC_OscConfig+0x2f0>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d15f      	bne.n	8000bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e2f7      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b48:	d106      	bne.n	8000b58 <HAL_RCC_OscConfig+0x24c>
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e025      	b.n	8000ba4 <HAL_RCC_OscConfig+0x298>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b60:	d114      	bne.n	8000b8c <HAL_RCC_OscConfig+0x280>
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a02      	ldr	r2, [pc, #8]	; (8000b7c <HAL_RCC_OscConfig+0x270>)
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e013      	b.n	8000ba4 <HAL_RCC_OscConfig+0x298>
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	08001fcc 	.word	0x08001fcc
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	4ba0      	ldr	r3, [pc, #640]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a9f      	ldr	r2, [pc, #636]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b9d      	ldr	r3, [pc, #628]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a9c      	ldr	r2, [pc, #624]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d013      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bac:	f7ff fd34 	bl	8000618 <HAL_GetTick>
 8000bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bb2:	e008      	b.n	8000bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bb4:	f7ff fd30 	bl	8000618 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b64      	cmp	r3, #100	; 0x64
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e2b4      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bc6:	4b92      	ldr	r3, [pc, #584]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f0      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x2a8>
 8000bd2:	e014      	b.n	8000bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fd20 	bl	8000618 <HAL_GetTick>
 8000bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bda:	e008      	b.n	8000bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bdc:	f7ff fd1c 	bl	8000618 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	2b64      	cmp	r3, #100	; 0x64
 8000be8:	d901      	bls.n	8000bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e2a0      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bee:	4b88      	ldr	r3, [pc, #544]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f0      	bne.n	8000bdc <HAL_RCC_OscConfig+0x2d0>
 8000bfa:	e000      	b.n	8000bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d060      	beq.n	8000ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d005      	beq.n	8000c1c <HAL_RCC_OscConfig+0x310>
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	2b0c      	cmp	r3, #12
 8000c14:	d119      	bne.n	8000c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d116      	bne.n	8000c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c1c:	4b7c      	ldr	r3, [pc, #496]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_OscConfig+0x328>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e27d      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c34:	4b76      	ldr	r3, [pc, #472]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	061b      	lsls	r3, r3, #24
 8000c42:	4973      	ldr	r1, [pc, #460]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c44:	4313      	orrs	r3, r2
 8000c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c48:	e040      	b.n	8000ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d023      	beq.n	8000c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c52:	4b6f      	ldr	r3, [pc, #444]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a6e      	ldr	r2, [pc, #440]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fcdb 	bl	8000618 <HAL_GetTick>
 8000c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c64:	e008      	b.n	8000c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c66:	f7ff fcd7 	bl	8000618 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d901      	bls.n	8000c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e25b      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c78:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f0      	beq.n	8000c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	061b      	lsls	r3, r3, #24
 8000c92:	495f      	ldr	r1, [pc, #380]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c94:	4313      	orrs	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	e018      	b.n	8000ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c9a:	4b5d      	ldr	r3, [pc, #372]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a5c      	ldr	r2, [pc, #368]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca6:	f7ff fcb7 	bl	8000618 <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cac:	e008      	b.n	8000cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cae:	f7ff fcb3 	bl	8000618 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e237      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cc0:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f0      	bne.n	8000cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d03c      	beq.n	8000d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d01c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ce6:	4a4a      	ldr	r2, [pc, #296]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fc92 	bl	8000618 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fc8e 	bl	8000618 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e212      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d0a:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0ef      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x3ec>
 8000d18:	e01b      	b.n	8000d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d20:	4a3b      	ldr	r2, [pc, #236]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d22:	f023 0301 	bic.w	r3, r3, #1
 8000d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fc75 	bl	8000618 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d32:	f7ff fc71 	bl	8000618 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e1f5      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d44:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1ef      	bne.n	8000d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80a6 	beq.w	8000eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10d      	bne.n	8000d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d74:	4a26      	ldr	r2, [pc, #152]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_RCC_OscConfig+0x508>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d118      	bne.n	8000dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_RCC_OscConfig+0x508>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <HAL_RCC_OscConfig+0x508>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc38 	bl	8000618 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dac:	f7ff fc34 	bl	8000618 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e1b8      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_RCC_OscConfig+0x508>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d108      	bne.n	8000de4 <HAL_RCC_OscConfig+0x4d8>
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000de2:	e029      	b.n	8000e38 <HAL_RCC_OscConfig+0x52c>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d115      	bne.n	8000e18 <HAL_RCC_OscConfig+0x50c>
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e02:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_RCC_OscConfig+0x504>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e0c:	e014      	b.n	8000e38 <HAL_RCC_OscConfig+0x52c>
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40007000 	.word	0x40007000
 8000e18:	4b9d      	ldr	r3, [pc, #628]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e1e:	4a9c      	ldr	r2, [pc, #624]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e28:	4b99      	ldr	r3, [pc, #612]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2e:	4a98      	ldr	r2, [pc, #608]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000e30:	f023 0304 	bic.w	r3, r3, #4
 8000e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d016      	beq.n	8000e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e40:	f7ff fbea 	bl	8000618 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e46:	e00a      	b.n	8000e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e48:	f7ff fbe6 	bl	8000618 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e168      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e5e:	4b8c      	ldr	r3, [pc, #560]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0ed      	beq.n	8000e48 <HAL_RCC_OscConfig+0x53c>
 8000e6c:	e015      	b.n	8000e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fbd3 	bl	8000618 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e74:	e00a      	b.n	8000e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e76:	f7ff fbcf 	bl	8000618 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e151      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e8c:	4b80      	ldr	r3, [pc, #512]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1ed      	bne.n	8000e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e9a:	7ffb      	ldrb	r3, [r7, #31]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea0:	4b7b      	ldr	r3, [pc, #492]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	4a7a      	ldr	r2, [pc, #488]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0320 	and.w	r3, r3, #32
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d03c      	beq.n	8000f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d01c      	beq.n	8000efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ec6:	4a72      	ldr	r2, [pc, #456]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fba2 	bl	8000618 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ed8:	f7ff fb9e 	bl	8000618 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e122      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000eea:	4b69      	ldr	r3, [pc, #420]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ef      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x5cc>
 8000ef8:	e01b      	b.n	8000f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000efa:	4b65      	ldr	r3, [pc, #404]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f00:	4a63      	ldr	r2, [pc, #396]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb85 	bl	8000618 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f12:	f7ff fb81 	bl	8000618 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e105      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f24:	4b5a      	ldr	r3, [pc, #360]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1ef      	bne.n	8000f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80f9 	beq.w	800112e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	f040 80cf 	bne.w	80010e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f46:	4b52      	ldr	r3, [pc, #328]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0203 	and.w	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d12c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	3b01      	subs	r3, #1
 8000f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d123      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d11b      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d113      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d109      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	085b      	lsrs	r3, r3, #1
 8000fac:	3b01      	subs	r3, #1
 8000fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d071      	beq.n	8001098 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	d068      	beq.n	800108c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d105      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000fc6:	4b32      	ldr	r3, [pc, #200]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0ac      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fe0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000fe2:	f7ff fb19 	bl	8000618 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fb15 	bl	8000618 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e099      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f0      	bne.n	8000fea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_RCC_OscConfig+0x788>)
 800100e:	4013      	ands	r3, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001018:	3a01      	subs	r2, #1
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	4311      	orrs	r1, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001022:	0212      	lsls	r2, r2, #8
 8001024:	4311      	orrs	r1, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800102a:	0852      	lsrs	r2, r2, #1
 800102c:	3a01      	subs	r2, #1
 800102e:	0552      	lsls	r2, r2, #21
 8001030:	4311      	orrs	r1, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001036:	0852      	lsrs	r2, r2, #1
 8001038:	3a01      	subs	r2, #1
 800103a:	0652      	lsls	r2, r2, #25
 800103c:	4311      	orrs	r1, r2
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001042:	06d2      	lsls	r2, r2, #27
 8001044:	430a      	orrs	r2, r1
 8001046:	4912      	ldr	r1, [pc, #72]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8001048:	4313      	orrs	r3, r2
 800104a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8001052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001056:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 800105e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001062:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001064:	f7ff fad8 	bl	8000618 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fad4 	bl	8000618 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e058      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_OscConfig+0x784>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800108a:	e050      	b.n	800112e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e04f      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
 8001090:	40021000 	.word	0x40021000
 8001094:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d144      	bne.n	800112e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 80010aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	4a20      	ldr	r2, [pc, #128]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 80010b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010bc:	f7ff faac 	bl	8000618 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c4:	f7ff faa8 	bl	8000618 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e02c      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x7b8>
 80010e2:	e024      	b.n	800112e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2b0c      	cmp	r3, #12
 80010e8:	d01f      	beq.n	800112a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 80010f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fa8f 	bl	8000618 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fa8b 	bl	8000618 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e00f      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	4905      	ldr	r1, [pc, #20]	; (8001138 <HAL_RCC_OscConfig+0x82c>)
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_RCC_OscConfig+0x830>)
 8001124:	4013      	ands	r3, r2
 8001126:	60cb      	str	r3, [r1, #12]
 8001128:	e001      	b.n	800112e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	feeefffc 	.word	0xfeeefffc

08001140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0e7      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b75      	ldr	r3, [pc, #468]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d910      	bls.n	8001184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b72      	ldr	r3, [pc, #456]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 0207 	bic.w	r2, r3, #7
 800116a:	4970      	ldr	r1, [pc, #448]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001172:	4b6e      	ldr	r3, [pc, #440]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e0cf      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d010      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800119c:	429a      	cmp	r2, r3
 800119e:	d908      	bls.n	80011b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a0:	4b63      	ldr	r3, [pc, #396]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4960      	ldr	r1, [pc, #384]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04c      	beq.n	8001258 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011c6:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d121      	bne.n	8001216 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0a6      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011de:	4b54      	ldr	r3, [pc, #336]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d115      	bne.n	8001216 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e09a      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f6:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e08e      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e086      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b46      	ldr	r3, [pc, #280]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4943      	ldr	r1, [pc, #268]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 8001224:	4313      	orrs	r3, r2
 8001226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001228:	f7ff f9f6 	bl	8000618 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff f9f2 	bl	8000618 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e06e      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d010      	beq.n	8001286 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001270:	429a      	cmp	r2, r3
 8001272:	d208      	bcs.n	8001286 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	492b      	ldr	r1, [pc, #172]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d210      	bcs.n	80012b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 0207 	bic.w	r2, r3, #7
 800129c:	4923      	ldr	r1, [pc, #140]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <HAL_RCC_ClockConfig+0x1ec>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e036      	b.n	8001324 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d008      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d009      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4910      	ldr	r1, [pc, #64]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f4:	f000 f824 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_RCC_ClockConfig+0x1f0>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	490b      	ldr	r1, [pc, #44]	; (8001334 <HAL_RCC_ClockConfig+0x1f4>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_RCC_ClockConfig+0x1f8>)
 8001312:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_RCC_ClockConfig+0x1fc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f92d 	bl	8000578 <HAL_InitTick>
 800131e:	4603      	mov	r3, r0
 8001320:	72fb      	strb	r3, [r7, #11]

  return status;
 8001322:	7afb      	ldrb	r3, [r7, #11]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40022000 	.word	0x40022000
 8001330:	40021000 	.word	0x40021000
 8001334:	08001fcc 	.word	0x08001fcc
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x34>
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d121      	bne.n	80013b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d11e      	bne.n	80013b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d107      	bne.n	8001390 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	e005      	b.n	800139c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800139c:	4a2b      	ldr	r2, [pc, #172]	; (800144c <HAL_RCC_GetSysClockFreq+0x10c>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10d      	bne.n	80013c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d102      	bne.n	80013be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_RCC_GetSysClockFreq+0x110>)
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	e004      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_RCC_GetSysClockFreq+0x114>)
 80013c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b0c      	cmp	r3, #12
 80013cc:	d134      	bne.n	8001438 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d003      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0xac>
 80013e4:	e005      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_RCC_GetSysClockFreq+0x110>)
 80013e8:	617b      	str	r3, [r7, #20]
      break;
 80013ea:	e005      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_RCC_GetSysClockFreq+0x114>)
 80013ee:	617b      	str	r3, [r7, #20]
      break;
 80013f0:	e002      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	617b      	str	r3, [r7, #20]
      break;
 80013f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	3301      	adds	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	fb03 f202 	mul.w	r2, r3, r2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_RCC_GetSysClockFreq+0x108>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	0e5b      	lsrs	r3, r3, #25
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	3301      	adds	r3, #1
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001438:	69bb      	ldr	r3, [r7, #24]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	08001fdc 	.word	0x08001fdc
 8001450:	00f42400 	.word	0x00f42400
 8001454:	007a1200 	.word	0x007a1200

08001458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001470:	f7ff f9e8 	bl	8000844 <HAL_PWREx_GetVoltageRange>
 8001474:	6178      	str	r0, [r7, #20]
 8001476:	e014      	b.n	80014a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a24      	ldr	r2, [pc, #144]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001490:	f7ff f9d8 	bl	8000844 <HAL_PWREx_GetVoltageRange>
 8001494:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800149c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a8:	d10b      	bne.n	80014c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b80      	cmp	r3, #128	; 0x80
 80014ae:	d919      	bls.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2ba0      	cmp	r3, #160	; 0xa0
 80014b4:	d902      	bls.n	80014bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014b6:	2302      	movs	r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	e013      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	e010      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	d902      	bls.n	80014ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80014c8:	2303      	movs	r3, #3
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	e00a      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b80      	cmp	r3, #128	; 0x80
 80014d2:	d102      	bne.n	80014da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	e004      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b70      	cmp	r3, #112	; 0x70
 80014de:	d101      	bne.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014e0:	2301      	movs	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 0207 	bic.w	r2, r3, #7
 80014ec:	4909      	ldr	r1, [pc, #36]	; (8001514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001520:	2300      	movs	r3, #0
 8001522:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001524:	2300      	movs	r3, #0
 8001526:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001530:	2b00      	cmp	r3, #0
 8001532:	d041      	beq.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001538:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800153c:	d02a      	beq.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800153e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001542:	d824      	bhi.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001548:	d008      	beq.n	800155c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800154a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800154e:	d81e      	bhi.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00a      	beq.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001558:	d010      	beq.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800155a:	e018      	b.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800155c:	4b86      	ldr	r3, [pc, #536]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a85      	ldr	r2, [pc, #532]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001568:	e015      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f000 facd 	bl	8001b10 <RCCEx_PLLSAI1_Config>
 8001576:	4603      	mov	r3, r0
 8001578:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800157a:	e00c      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3320      	adds	r3, #32
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fbb6 	bl	8001cf4 <RCCEx_PLLSAI2_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800158c:	e003      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	74fb      	strb	r3, [r7, #19]
      break;
 8001592:	e000      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001596:	7cfb      	ldrb	r3, [r7, #19]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10b      	bne.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800159c:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015aa:	4973      	ldr	r1, [pc, #460]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80015b2:	e001      	b.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80015b4:	7cfb      	ldrb	r3, [r7, #19]
 80015b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d041      	beq.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80015cc:	d02a      	beq.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80015ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80015d2:	d824      	bhi.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80015d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015d8:	d008      	beq.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80015da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015de:	d81e      	bhi.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d010      	beq.n	800160c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80015ea:	e018      	b.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80015ec:	4b62      	ldr	r3, [pc, #392]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4a61      	ldr	r2, [pc, #388]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80015f8:	e015      	b.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fa85 	bl	8001b10 <RCCEx_PLLSAI1_Config>
 8001606:	4603      	mov	r3, r0
 8001608:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800160a:	e00c      	b.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3320      	adds	r3, #32
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fb6e 	bl	8001cf4 <RCCEx_PLLSAI2_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800161c:	e003      	b.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	74fb      	strb	r3, [r7, #19]
      break;
 8001622:	e000      	b.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001626:	7cfb      	ldrb	r3, [r7, #19]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10b      	bne.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800162c:	4b52      	ldr	r3, [pc, #328]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800163a:	494f      	ldr	r1, [pc, #316]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800163c:	4313      	orrs	r3, r2
 800163e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001642:	e001      	b.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001644:	7cfb      	ldrb	r3, [r7, #19]
 8001646:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a0 	beq.w	8001796 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800166a:	2300      	movs	r3, #0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00d      	beq.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	4a40      	ldr	r2, [pc, #256]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167a:	6593      	str	r3, [r2, #88]	; 0x58
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001688:	2301      	movs	r3, #1
 800168a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3a      	ldr	r2, [pc, #232]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001698:	f7fe ffbe 	bl	8000618 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800169e:	e009      	b.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a0:	f7fe ffba 	bl	8000618 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d902      	bls.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	74fb      	strb	r3, [r7, #19]
        break;
 80016b2:	e005      	b.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ef      	beq.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80016c0:	7cfb      	ldrb	r3, [r7, #19]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d15c      	bne.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01f      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d019      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d016      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7fe ff79 	bl	8000618 <HAL_GetTick>
 8001726:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001728:	e00b      	b.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7fe ff75 	bl	8000618 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d902      	bls.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	74fb      	strb	r3, [r7, #19]
            break;
 8001740:	e006      	b.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ec      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4904      	ldr	r1, [pc, #16]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001768:	4313      	orrs	r3, r2
 800176a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800176e:	e009      	b.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001770:	7cfb      	ldrb	r3, [r7, #19]
 8001772:	74bb      	strb	r3, [r7, #18]
 8001774:	e006      	b.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001784:	7c7b      	ldrb	r3, [r7, #17]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d105      	bne.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178a:	4ba6      	ldr	r3, [pc, #664]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	4aa5      	ldr	r2, [pc, #660]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001794:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017a2:	4ba0      	ldr	r3, [pc, #640]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80017a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a8:	f023 0203 	bic.w	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	499c      	ldr	r1, [pc, #624]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00a      	beq.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017c4:	4b97      	ldr	r3, [pc, #604]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	f023 020c 	bic.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	4994      	ldr	r1, [pc, #592]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00a      	beq.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80017e6:	4b8f      	ldr	r3, [pc, #572]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80017e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	498b      	ldr	r1, [pc, #556]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001808:	4b86      	ldr	r3, [pc, #536]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4983      	ldr	r1, [pc, #524]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001818:	4313      	orrs	r3, r2
 800181a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00a      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800182a:	4b7e      	ldr	r3, [pc, #504]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800182c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001838:	497a      	ldr	r1, [pc, #488]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00a      	beq.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4972      	ldr	r1, [pc, #456]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800185c:	4313      	orrs	r3, r2
 800185e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00a      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800186e:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001874:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187c:	4969      	ldr	r1, [pc, #420]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800187e:	4313      	orrs	r3, r2
 8001880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00a      	beq.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001890:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800189e:	4961      	ldr	r1, [pc, #388]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80018b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c0:	4958      	ldr	r1, [pc, #352]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00a      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	4950      	ldr	r1, [pc, #320]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00a      	beq.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018f6:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80018f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	4947      	ldr	r1, [pc, #284]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001906:	4313      	orrs	r3, r2
 8001908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00a      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800191a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	493f      	ldr	r1, [pc, #252]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001928:	4313      	orrs	r3, r2
 800192a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d028      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800193c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4936      	ldr	r1, [pc, #216]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800194a:	4313      	orrs	r3, r2
 800194c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001958:	d106      	bne.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001964:	60d3      	str	r3, [r2, #12]
 8001966:	e011      	b.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001970:	d10c      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	2101      	movs	r1, #1
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f8c9 	bl	8001b10 <RCCEx_PLLSAI1_Config>
 800197e:	4603      	mov	r3, r0
 8001980:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001982:	7cfb      	ldrb	r3, [r7, #19]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8001988:	7cfb      	ldrb	r3, [r7, #19]
 800198a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d028      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a6:	491f      	ldr	r1, [pc, #124]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80019be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019c2:	60d3      	str	r3, [r2, #12]
 80019c4:	e011      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ce:	d10c      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3304      	adds	r3, #4
 80019d4:	2101      	movs	r1, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f89a 	bl	8001b10 <RCCEx_PLLSAI1_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80019e6:	7cfb      	ldrb	r3, [r7, #19]
 80019e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d02a      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80019f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a14:	d108      	bne.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a16:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a02      	ldr	r2, [pc, #8]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a20:	60d3      	str	r3, [r2, #12]
 8001a22:	e013      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8001a24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2101      	movs	r1, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f869 	bl	8001b10 <RCCEx_PLLSAI1_Config>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001a42:	7cfb      	ldrb	r3, [r7, #19]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d02f      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a66:	4929      	ldr	r1, [pc, #164]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a76:	d10d      	bne.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f846 	bl	8001b10 <RCCEx_PLLSAI1_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001a88:	7cfb      	ldrb	r3, [r7, #19]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d014      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	74bb      	strb	r3, [r7, #18]
 8001a92:	e011      	b.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3320      	adds	r3, #32
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f925 	bl	8001cf4 <RCCEx_PLLSAI2_Config>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001aae:	7cfb      	ldrb	r3, [r7, #19]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8001ab4:	7cfb      	ldrb	r3, [r7, #19]
 8001ab6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad4:	490d      	ldr	r1, [pc, #52]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af8:	4904      	ldr	r1, [pc, #16]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001b00:	7cbb      	ldrb	r3, [r7, #18]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000

08001b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b1e:	4b74      	ldr	r3, [pc, #464]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d018      	beq.n	8001b5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001b2a:	4b71      	ldr	r3, [pc, #452]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0203 	and.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d10d      	bne.n	8001b56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001b42:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
       ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d047      	beq.n	8001be6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e044      	b.n	8001be6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d018      	beq.n	8001b96 <RCCEx_PLLSAI1_Config+0x86>
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d825      	bhi.n	8001bb4 <RCCEx_PLLSAI1_Config+0xa4>
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d002      	beq.n	8001b72 <RCCEx_PLLSAI1_Config+0x62>
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d009      	beq.n	8001b84 <RCCEx_PLLSAI1_Config+0x74>
 8001b70:	e020      	b.n	8001bb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d11d      	bne.n	8001bba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b82:	e01a      	b.n	8001bba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d116      	bne.n	8001bbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b94:	e013      	b.n	8001bbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001b96:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10f      	bne.n	8001bc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001ba2:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001bb2:	e006      	b.n	8001bc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb8:	e004      	b.n	8001bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001bba:	bf00      	nop
 8001bbc:	e002      	b.n	8001bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001bbe:	bf00      	nop
 8001bc0:	e000      	b.n	8001bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	430b      	orrs	r3, r1
 8001be0:	4943      	ldr	r1, [pc, #268]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d17c      	bne.n	8001ce6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001bec:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a3f      	ldr	r2, [pc, #252]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf8:	f7fe fd0e 	bl	8000618 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001bfe:	e009      	b.n	8001c14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c00:	f7fe fd0a 	bl	8000618 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d902      	bls.n	8001c14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	73fb      	strb	r3, [r7, #15]
        break;
 8001c12:	e005      	b.n	8001c20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ef      	bne.n	8001c00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d15f      	bne.n	8001ce6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d110      	bne.n	8001c4e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c2c:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6892      	ldr	r2, [r2, #8]
 8001c3c:	0211      	lsls	r1, r2, #8
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68d2      	ldr	r2, [r2, #12]
 8001c42:	06d2      	lsls	r2, r2, #27
 8001c44:	430a      	orrs	r2, r1
 8001c46:	492a      	ldr	r1, [pc, #168]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	610b      	str	r3, [r1, #16]
 8001c4c:	e027      	b.n	8001c9e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d112      	bne.n	8001c7a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001c5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6892      	ldr	r2, [r2, #8]
 8001c64:	0211      	lsls	r1, r2, #8
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6912      	ldr	r2, [r2, #16]
 8001c6a:	0852      	lsrs	r2, r2, #1
 8001c6c:	3a01      	subs	r2, #1
 8001c6e:	0552      	lsls	r2, r2, #21
 8001c70:	430a      	orrs	r2, r1
 8001c72:	491f      	ldr	r1, [pc, #124]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	610b      	str	r3, [r1, #16]
 8001c78:	e011      	b.n	8001c9e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001c82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6892      	ldr	r2, [r2, #8]
 8001c8a:	0211      	lsls	r1, r2, #8
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6952      	ldr	r2, [r2, #20]
 8001c90:	0852      	lsrs	r2, r2, #1
 8001c92:	3a01      	subs	r2, #1
 8001c94:	0652      	lsls	r2, r2, #25
 8001c96:	430a      	orrs	r2, r1
 8001c98:	4915      	ldr	r1, [pc, #84]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7fe fcb5 	bl	8000618 <HAL_GetTick>
 8001cae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001cb0:	e009      	b.n	8001cc6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001cb2:	f7fe fcb1 	bl	8000618 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d902      	bls.n	8001cc6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	73fb      	strb	r3, [r7, #15]
          break;
 8001cc4:	e005      	b.n	8001cd2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ef      	beq.n	8001cb2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d02:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d018      	beq.n	8001d40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001d0e:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d10d      	bne.n	8001d3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
       ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001d26:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
       ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d047      	beq.n	8001dca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e044      	b.n	8001dca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d018      	beq.n	8001d7a <RCCEx_PLLSAI2_Config+0x86>
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d825      	bhi.n	8001d98 <RCCEx_PLLSAI2_Config+0xa4>
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d002      	beq.n	8001d56 <RCCEx_PLLSAI2_Config+0x62>
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d009      	beq.n	8001d68 <RCCEx_PLLSAI2_Config+0x74>
 8001d54:	e020      	b.n	8001d98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d56:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11d      	bne.n	8001d9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d66:	e01a      	b.n	8001d9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d68:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d116      	bne.n	8001da2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d78:	e013      	b.n	8001da2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10f      	bne.n	8001da6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d86:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001d96:	e006      	b.n	8001da6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9c:	e004      	b.n	8001da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e002      	b.n	8001da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001da2:	bf00      	nop
 8001da4:	e000      	b.n	8001da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001da6:	bf00      	nop
    }

    if(status == HAL_OK)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	4938      	ldr	r1, [pc, #224]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d166      	bne.n	8001e9e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a34      	ldr	r2, [pc, #208]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fc1c 	bl	8000618 <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001de2:	e009      	b.n	8001df8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001de4:	f7fe fc18 	bl	8000618 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d902      	bls.n	8001df8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	73fb      	strb	r3, [r7, #15]
        break;
 8001df6:	e005      	b.n	8001e04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ef      	bne.n	8001de4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d149      	bne.n	8001e9e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d110      	bne.n	8001e32 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001e18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6892      	ldr	r2, [r2, #8]
 8001e20:	0211      	lsls	r1, r2, #8
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	06d2      	lsls	r2, r2, #27
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	491f      	ldr	r1, [pc, #124]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	614b      	str	r3, [r1, #20]
 8001e30:	e011      	b.n	8001e56 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6892      	ldr	r2, [r2, #8]
 8001e42:	0211      	lsls	r1, r2, #8
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6912      	ldr	r2, [r2, #16]
 8001e48:	0852      	lsrs	r2, r2, #1
 8001e4a:	3a01      	subs	r2, #1
 8001e4c:	0652      	lsls	r2, r2, #25
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	4915      	ldr	r1, [pc, #84]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7fe fbd9 	bl	8000618 <HAL_GetTick>
 8001e66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001e68:	e009      	b.n	8001e7e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e6a:	f7fe fbd5 	bl	8000618 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d902      	bls.n	8001e7e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	73fb      	strb	r3, [r7, #15]
          break;
 8001e7c:	e005      	b.n	8001e8a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ef      	beq.n	8001e6a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e049      	b.n	8001f52 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	795b      	ldrb	r3, [r3, #5]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fa90 	bl	80003f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0204 	orr.w	r2, r2, #4
 8001ee8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d104      	bne.n	8001f02 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e027      	b.n	8001f52 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7fe fb89 	bl	8000618 <HAL_GetTick>
 8001f06:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8001f08:	e015      	b.n	8001f36 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8001f0a:	f7fe fb85 	bl	8000618 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d90e      	bls.n	8001f36 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d107      	bne.n	8001f36 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00d      	b.n	8001f52 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d0e2      	beq.n	8001f0a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <__libc_init_array>:
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	4d0d      	ldr	r5, [pc, #52]	; (8001f94 <__libc_init_array+0x38>)
 8001f60:	4c0d      	ldr	r4, [pc, #52]	; (8001f98 <__libc_init_array+0x3c>)
 8001f62:	1b64      	subs	r4, r4, r5
 8001f64:	10a4      	asrs	r4, r4, #2
 8001f66:	2600      	movs	r6, #0
 8001f68:	42a6      	cmp	r6, r4
 8001f6a:	d109      	bne.n	8001f80 <__libc_init_array+0x24>
 8001f6c:	4d0b      	ldr	r5, [pc, #44]	; (8001f9c <__libc_init_array+0x40>)
 8001f6e:	4c0c      	ldr	r4, [pc, #48]	; (8001fa0 <__libc_init_array+0x44>)
 8001f70:	f000 f820 	bl	8001fb4 <_init>
 8001f74:	1b64      	subs	r4, r4, r5
 8001f76:	10a4      	asrs	r4, r4, #2
 8001f78:	2600      	movs	r6, #0
 8001f7a:	42a6      	cmp	r6, r4
 8001f7c:	d105      	bne.n	8001f8a <__libc_init_array+0x2e>
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f84:	4798      	blx	r3
 8001f86:	3601      	adds	r6, #1
 8001f88:	e7ee      	b.n	8001f68 <__libc_init_array+0xc>
 8001f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f8e:	4798      	blx	r3
 8001f90:	3601      	adds	r6, #1
 8001f92:	e7f2      	b.n	8001f7a <__libc_init_array+0x1e>
 8001f94:	0800200c 	.word	0x0800200c
 8001f98:	0800200c 	.word	0x0800200c
 8001f9c:	0800200c 	.word	0x0800200c
 8001fa0:	08002010 	.word	0x08002010

08001fa4 <memset>:
 8001fa4:	4402      	add	r2, r0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d100      	bne.n	8001fae <memset+0xa>
 8001fac:	4770      	bx	lr
 8001fae:	f803 1b01 	strb.w	r1, [r3], #1
 8001fb2:	e7f9      	b.n	8001fa8 <memset+0x4>

08001fb4 <_init>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_fini>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	bf00      	nop
 8001fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc6:	bc08      	pop	{r3}
 8001fc8:	469e      	mov	lr, r3
 8001fca:	4770      	bx	lr
