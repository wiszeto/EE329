
A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001414  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080015c0  080015c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001630  08001630  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001630  08001630  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001630  08001630  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001634  08001634  00011634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000002c  08001664  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08001664  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000447c  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fa9  00000000  00000000  000244d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  00025488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004c8  00000000  00000000  000259e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fa2  00000000  00000000  00025eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000061c2  00000000  00000000  0004ce52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee4fa  00000000  00000000  00053014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014150e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001380  00000000  00000000  00141560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080015a8 	.word	0x080015a8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	080015a8 	.word	0x080015a8

080001ec <keypad_init>:
static    int cols[3] = {Col1, Col2, Col3}; //corresponds to GPIO pins
static    int rows[4] = {Row1, Row2, Row3, Row4}; //coressponds to GPIO pins
static    int delay_time = 10000;

//This function, configures row, column and keypad pin
void keypad_init() {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0

    //Making column pins output mode bits(01)
    COL_PORT->MODER &= ~(GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <keypad_init+0x48>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <keypad_init+0x48>)
 80001f6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80001fa:	6013      	str	r3, [r2, #0]
    COL_PORT->MODER |= (GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0 | GPIO_MODER_MODE15_0);
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <keypad_init+0x48>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <keypad_init+0x48>)
 8000202:	f043 43a8 	orr.w	r3, r3, #1409286144	; 0x54000000
 8000206:	6013      	str	r3, [r2, #0]

    //Making row pins input mode bits(00)
    ROW_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <keypad_init+0x4c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <keypad_init+0x4c>)
 800020e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000212:	6013      	str	r3, [r2, #0]

    //enable pull-down resistor bits(10)
    ROW_PORT->PUPDR &= (GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <keypad_init+0x4c>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <keypad_init+0x4c>)
 800021a:	b2db      	uxtb	r3, r3
 800021c:	60d3      	str	r3, [r2, #12]
    ROW_PORT->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <keypad_init+0x4c>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	4a05      	ldr	r2, [pc, #20]	; (8000238 <keypad_init+0x4c>)
 8000224:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000228:	60d3      	str	r3, [r2, #12]
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	48000400 	.word	0x48000400
 8000238:	48000800 	.word	0x48000800

0800023c <keypad_read>:

int keypad_read(int cols, int row){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    COL_PORT -> BSRR = (Col1 |Col2|Col3); //outputs column pins to high
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <keypad_read+0x58>)
 8000248:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 800024c:	619a      	str	r2, [r3, #24]

    //check if key is pressed
    if (ROW_PORT->IDR){
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <keypad_read+0x5c>)
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d018      	beq.n	8000288 <keypad_read+0x4c>

      //debounce delay
    	for (int delay = 0; delay < delay_time; delay++);
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	e002      	b.n	8000262 <keypad_read+0x26>
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3301      	adds	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <keypad_read+0x60>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	429a      	cmp	r2, r3
 800026a:	dbf7      	blt.n	800025c <keypad_read+0x20>

    	//rechecks if key is presses still for debounce
    	if (ROW_PORT->IDR){
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <keypad_read+0x5c>)
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <keypad_read+0x4c>
    		COL_PORT->BRR = (Col1 |Col2|Col3); //turn off columns
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <keypad_read+0x58>)
 8000276:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 800027a:	629a      	str	r2, [r3, #40]	; 0x28
    		
        //returns array position of keypress
        return check_row_col(NUM_OF_COLS, NUM_OF_ROWS);  
 800027c:	2104      	movs	r1, #4
 800027e:	2003      	movs	r0, #3
 8000280:	f000 f80e 	bl	80002a0 <check_row_col>
 8000284:	4603      	mov	r3, r0
 8000286:	e001      	b.n	800028c <keypad_read+0x50>
    	}
    }
    return -1;
 8000288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	48000400 	.word	0x48000400
 8000298:	48000800 	.word	0x48000800
 800029c:	2000001c 	.word	0x2000001c

080002a0 <check_row_col>:

//iterate through each column and check all rows
int check_row_col(int col, int row){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
    for (int c=0; c < col; c++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	e025      	b.n	80002fc <check_row_col+0x5c>
        COL_PORT->BSRR = cols[c]; //turn on the column
 80002b0:	4a18      	ldr	r2, [pc, #96]	; (8000314 <check_row_col+0x74>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4b17      	ldr	r3, [pc, #92]	; (8000318 <check_row_col+0x78>)
 80002ba:	619a      	str	r2, [r3, #24]
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	e015      	b.n	80002ee <check_row_col+0x4e>
            if (ROW_PORT->IDR & (rows[r])) { //Check if key pressed is in the row
 80002c2:	4b16      	ldr	r3, [pc, #88]	; (800031c <check_row_col+0x7c>)
 80002c4:	691b      	ldr	r3, [r3, #16]
 80002c6:	4916      	ldr	r1, [pc, #88]	; (8000320 <check_row_col+0x80>)
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002ce:	4013      	ands	r3, r2
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d009      	beq.n	80002e8 <check_row_col+0x48>
               return keys[r][c]; //returns array position of keypress
 80002d4:	4913      	ldr	r1, [pc, #76]	; (8000324 <check_row_col+0x84>)
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	4413      	add	r3, r2
 80002e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e6:	e00f      	b.n	8000308 <check_row_col+0x68>
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3301      	adds	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	dbe5      	blt.n	80002c2 <check_row_col+0x22>
    for (int c=0; c < col; c++){
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	3301      	adds	r3, #1
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	429a      	cmp	r2, r3
 8000302:	dbd5      	blt.n	80002b0 <check_row_col+0x10>
            }
        }
    }
    return -1;
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000308:	4618      	mov	r0, r3
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	20000000 	.word	0x20000000
 8000318:	48000400 	.word	0x48000400
 800031c:	48000800 	.word	0x48000800
 8000320:	2000000c 	.word	0x2000000c
 8000324:	080015c0 	.word	0x080015c0

08000328 <main>:
void SystemClock_Config(void);

int set_leds(uint32_t); //value to display onto LEDs

int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 f94a 	bl	80005c6 <HAL_Init>
  SystemClock_Config();
 8000332:	f000 f874 	bl	800041e <SystemClock_Config>


  /* Enable Clk*/
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000336:	4b31      	ldr	r3, [pc, #196]	; (80003fc <main+0xd4>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4a30      	ldr	r2, [pc, #192]	; (80003fc <main+0xd4>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000342:	4b2e      	ldr	r3, [pc, #184]	; (80003fc <main+0xd4>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a2d      	ldr	r2, [pc, #180]	; (80003fc <main+0xd4>)
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 800034e:	4b2b      	ldr	r3, [pc, #172]	; (80003fc <main+0xd4>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	4a2a      	ldr	r2, [pc, #168]	; (80003fc <main+0xd4>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	64d3      	str	r3, [r2, #76]	; 0x4c

  /*Configure LED Output*/
  // Make pin0 output mode
  GPIOA->MODER &= ~(GPIO_MODER_MODE0);
 800035a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000364:	f023 0303 	bic.w	r3, r3, #3
 8000368:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (GPIO_MODER_MODE0_0);
 800036a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6013      	str	r3, [r2, #0]

  // Make pin1 output mode
  GPIOA->MODER &= ~(GPIO_MODER_MODE1);
 800037a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000384:	f023 030c 	bic.w	r3, r3, #12
 8000388:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (GPIO_MODER_MODE1_0);
 800038a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	6013      	str	r3, [r2, #0]

  // Make pin2 output mode
  GPIOA->MODER &= ~(GPIO_MODER_MODE2);
 800039a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003a8:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (GPIO_MODER_MODE2_0);
 80003aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b4:	f043 0310 	orr.w	r3, r3, #16
 80003b8:	6013      	str	r3, [r2, #0]

  // Make pin3 output mode
  GPIOA->MODER &= ~(GPIO_MODER_MODE3);
 80003ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80003c8:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (GPIO_MODER_MODE3_0);
 80003ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d8:	6013      	str	r3, [r2, #0]

  //initalize keypad variables

  //Initializes keypad functions, variables

  keypad_init();
 80003da:	f7ff ff07 	bl	80001ec <keypad_init>

  while (1)
  {
      int output = keypad_read( 4, 3); //get key value
 80003de:	2103      	movs	r1, #3
 80003e0:	2004      	movs	r0, #4
 80003e2:	f7ff ff2b 	bl	800023c <keypad_read>
 80003e6:	6078      	str	r0, [r7, #4]
      if (output != -1){ //if button is pushed sets value to dispaly to LED
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ee:	d0f6      	beq.n	80003de <main+0xb6>
          set_leds(output); //set leds to value
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f804 	bl	8000400 <set_leds>
  {
 80003f8:	e7f1      	b.n	80003de <main+0xb6>
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <set_leds>:
      }
      //else {set_leds(0);} //if key not pressed set leds to 0
  }
}

int set_leds(uint32_t number) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

	  GPIOA->ODR = number; // changes all 16 port bits to count in binary
 8000408:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6153      	str	r3, [r2, #20]

}
 8000410:	bf00      	nop
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <SystemClock_Config>:

void SystemClock_Config(void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b096      	sub	sp, #88	; 0x58
 8000422:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2244      	movs	r2, #68	; 0x44
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f001 f8b3 	bl	8001598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000432:	463b      	mov	r3, r7
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]


  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000440:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000444:	f000 fa28 	bl	8000898 <HAL_PWREx_ControlVoltageScaling>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800044e:	f000 f82c 	bl	80004aa <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000452:	2310      	movs	r3, #16
 8000454:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800045e:	2360      	movs	r3, #96	; 0x60
 8000460:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000462:	2300      	movs	r3, #0
 8000464:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fa6a 	bl	8000944 <HAL_RCC_OscConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000476:	f000 f818 	bl	80004aa <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	230f      	movs	r3, #15
 800047c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800047e:	2300      	movs	r3, #0
 8000480:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048e:	463b      	mov	r3, r7
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fe70 	bl	8001178 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800049e:	f000 f804 	bl	80004aa <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3758      	adds	r7, #88	; 0x58
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <Error_Handler>:

void Error_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ae:	b672      	cpsid	i
}
 80004b0:	bf00      	nop

  __disable_irq();
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6613      	str	r3, [r2, #96]	; 0x60
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	6593      	str	r3, [r2, #88]	; 0x58
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_MspInit+0x44>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <MemManage_Handler+0x4>

0800050e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler+0x4>

0800051a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000548:	f000 f892 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <SystemInit+0x20>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <SystemInit+0x20>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000578:	f7ff ffea 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a2:	f000 ffd5 	bl	8001550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a6:	f7ff febf 	bl	8000328 <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80005b8:	08001638 	.word	0x08001638
  ldr r2, =_sbss
 80005bc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80005c0:	2000004c 	.word	0x2000004c

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>

080005c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f91f 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 f80e 	bl	80005f8 <HAL_InitTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	e001      	b.n	80005ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e8:	f7ff ff64 	bl	80004b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_InitTick+0x6c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d023      	beq.n	8000654 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <HAL_InitTick+0x70>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f91d 	bl	8000862 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10f      	bne.n	800064e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d809      	bhi.n	8000648 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f8f5 	bl	800082a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <HAL_InitTick+0x74>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e007      	b.n	8000658 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e004      	b.n	8000658 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	e001      	b.n	8000658 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028
 8000668:	20000020 	.word	0x20000020
 800066c:	20000024 	.word	0x20000024

08000670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x20>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x24>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_IncTick+0x24>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	20000048 	.word	0x20000048

08000698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_GetTick+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000048 	.word	0x20000048

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff47 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff5c 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffb0 	bl	80007d0 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <HAL_PWREx_GetVoltageRange+0x18>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40007000 	.word	0x40007000

08000898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a6:	d130      	bne.n	800090a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008b4:	d038      	beq.n	8000928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2232      	movs	r2, #50	; 0x32
 80008cc:	fb02 f303 	mul.w	r3, r2, r3
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	0c9b      	lsrs	r3, r3, #18
 80008d8:	3301      	adds	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008dc:	e002      	b.n	80008e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008f0:	d102      	bne.n	80008f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f2      	bne.n	80008de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000904:	d110      	bne.n	8000928 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000906:	2303      	movs	r3, #3
 8000908:	e00f      	b.n	800092a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000916:	d007      	beq.n	8000928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000926:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40007000 	.word	0x40007000
 800093c:	20000020 	.word	0x20000020
 8000940:	431bde83 	.word	0x431bde83

08000944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	f000 bc08 	b.w	8001168 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000958:	4b96      	ldr	r3, [pc, #600]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f003 030c 	and.w	r3, r3, #12
 8000960:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000962:	4b94      	ldr	r3, [pc, #592]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 80e4 	beq.w	8000b42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d007      	beq.n	8000990 <HAL_RCC_OscConfig+0x4c>
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	2b0c      	cmp	r3, #12
 8000984:	f040 808b 	bne.w	8000a9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	2b01      	cmp	r3, #1
 800098c:	f040 8087 	bne.w	8000a9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000990:	4b88      	ldr	r3, [pc, #544]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	2b00      	cmp	r3, #0
 800099a:	d005      	beq.n	80009a8 <HAL_RCC_OscConfig+0x64>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e3df      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a1a      	ldr	r2, [r3, #32]
 80009ac:	4b81      	ldr	r3, [pc, #516]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d004      	beq.n	80009c2 <HAL_RCC_OscConfig+0x7e>
 80009b8:	4b7e      	ldr	r3, [pc, #504]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009c0:	e005      	b.n	80009ce <HAL_RCC_OscConfig+0x8a>
 80009c2:	4b7c      	ldr	r3, [pc, #496]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 80009c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d223      	bcs.n	8000a1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a1b      	ldr	r3, [r3, #32]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fd5a 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e3c0      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009e6:	4b73      	ldr	r3, [pc, #460]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a72      	ldr	r2, [pc, #456]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	4b70      	ldr	r3, [pc, #448]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a1b      	ldr	r3, [r3, #32]
 80009fe:	496d      	ldr	r1, [pc, #436]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a00:	4313      	orrs	r3, r2
 8000a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a04:	4b6b      	ldr	r3, [pc, #428]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	4968      	ldr	r1, [pc, #416]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a14:	4313      	orrs	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
 8000a18:	e025      	b.n	8000a66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a1a:	4b66      	ldr	r3, [pc, #408]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a65      	ldr	r2, [pc, #404]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	4b63      	ldr	r3, [pc, #396]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	4960      	ldr	r1, [pc, #384]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a34:	4313      	orrs	r3, r2
 8000a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a38:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	021b      	lsls	r3, r3, #8
 8000a46:	495b      	ldr	r1, [pc, #364]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d109      	bne.n	8000a66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a1b      	ldr	r3, [r3, #32]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fd1a 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e380      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a66:	f000 fc87 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	4b51      	ldr	r3, [pc, #324]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	091b      	lsrs	r3, r3, #4
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	4950      	ldr	r1, [pc, #320]	; (8000bb8 <HAL_RCC_OscConfig+0x274>)
 8000a78:	5ccb      	ldrb	r3, [r1, r3]
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a82:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <HAL_RCC_OscConfig+0x278>)
 8000a84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <HAL_RCC_OscConfig+0x27c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fdb4 	bl	80005f8 <HAL_InitTick>
 8000a90:	4603      	mov	r3, r0
 8000a92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d052      	beq.n	8000b40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	e364      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d032      	beq.n	8000b0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000aa6:	4b43      	ldr	r3, [pc, #268]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a42      	ldr	r2, [pc, #264]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ab2:	f7ff fdf1 	bl	8000698 <HAL_GetTick>
 8000ab6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ab8:	e008      	b.n	8000acc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000aba:	f7ff fded 	bl	8000698 <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d901      	bls.n	8000acc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e34d      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000acc:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f0      	beq.n	8000aba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ad8:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a35      	ldr	r2, [pc, #212]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	4930      	ldr	r1, [pc, #192]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000af2:	4313      	orrs	r3, r2
 8000af4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	492b      	ldr	r1, [pc, #172]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b06:	4313      	orrs	r3, r2
 8000b08:	604b      	str	r3, [r1, #4]
 8000b0a:	e01a      	b.n	8000b42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b12:	f023 0301 	bic.w	r3, r3, #1
 8000b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fdbe 	bl	8000698 <HAL_GetTick>
 8000b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b1e:	e008      	b.n	8000b32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b20:	f7ff fdba 	bl	8000698 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e31a      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f0      	bne.n	8000b20 <HAL_RCC_OscConfig+0x1dc>
 8000b3e:	e000      	b.n	8000b42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d073      	beq.n	8000c36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	d005      	beq.n	8000b60 <HAL_RCC_OscConfig+0x21c>
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2b0c      	cmp	r3, #12
 8000b58:	d10e      	bne.n	8000b78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d10b      	bne.n	8000b78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d063      	beq.n	8000c34 <HAL_RCC_OscConfig+0x2f0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d15f      	bne.n	8000c34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e2f7      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b80:	d106      	bne.n	8000b90 <HAL_RCC_OscConfig+0x24c>
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e025      	b.n	8000bdc <HAL_RCC_OscConfig+0x298>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b98:	d114      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x280>
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a02      	ldr	r2, [pc, #8]	; (8000bb4 <HAL_RCC_OscConfig+0x270>)
 8000bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e013      	b.n	8000bdc <HAL_RCC_OscConfig+0x298>
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	080015f0 	.word	0x080015f0
 8000bbc:	20000020 	.word	0x20000020
 8000bc0:	20000024 	.word	0x20000024
 8000bc4:	4ba0      	ldr	r3, [pc, #640]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a9f      	ldr	r2, [pc, #636]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b9d      	ldr	r3, [pc, #628]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a9c      	ldr	r2, [pc, #624]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000be4:	f7ff fd58 	bl	8000698 <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bec:	f7ff fd54 	bl	8000698 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b64      	cmp	r3, #100	; 0x64
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e2b4      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bfe:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f0      	beq.n	8000bec <HAL_RCC_OscConfig+0x2a8>
 8000c0a:	e014      	b.n	8000c36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fd44 	bl	8000698 <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c14:	f7ff fd40 	bl	8000698 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b64      	cmp	r3, #100	; 0x64
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e2a0      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c26:	4b88      	ldr	r3, [pc, #544]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f0      	bne.n	8000c14 <HAL_RCC_OscConfig+0x2d0>
 8000c32:	e000      	b.n	8000c36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d060      	beq.n	8000d04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d005      	beq.n	8000c54 <HAL_RCC_OscConfig+0x310>
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2b0c      	cmp	r3, #12
 8000c4c:	d119      	bne.n	8000c82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d116      	bne.n	8000c82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c54:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <HAL_RCC_OscConfig+0x328>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e27d      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	4b76      	ldr	r3, [pc, #472]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	061b      	lsls	r3, r3, #24
 8000c7a:	4973      	ldr	r1, [pc, #460]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c80:	e040      	b.n	8000d04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d023      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c8a:	4b6f      	ldr	r3, [pc, #444]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a6e      	ldr	r2, [pc, #440]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c96:	f7ff fcff 	bl	8000698 <HAL_GetTick>
 8000c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c9e:	f7ff fcfb 	bl	8000698 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e25b      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cb0:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f0      	beq.n	8000c9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	061b      	lsls	r3, r3, #24
 8000cca:	495f      	ldr	r1, [pc, #380]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
 8000cd0:	e018      	b.n	8000d04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a5c      	ldr	r2, [pc, #368]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cde:	f7ff fcdb 	bl	8000698 <HAL_GetTick>
 8000ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fcd7 	bl	8000698 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e237      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cf8:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f0      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d03c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d01c      	beq.n	8000d52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d18:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d1e:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d28:	f7ff fcb6 	bl	8000698 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d30:	f7ff fcb2 	bl	8000698 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e212      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0ef      	beq.n	8000d30 <HAL_RCC_OscConfig+0x3ec>
 8000d50:	e01b      	b.n	8000d8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d58:	4a3b      	ldr	r2, [pc, #236]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d62:	f7ff fc99 	bl	8000698 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fc95 	bl	8000698 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e1f5      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1ef      	bne.n	8000d6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80a6 	beq.w	8000ee4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10d      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dac:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db2:	6593      	str	r3, [r2, #88]	; 0x58
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_RCC_OscConfig+0x508>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d118      	bne.n	8000e02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <HAL_RCC_OscConfig+0x508>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_RCC_OscConfig+0x508>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc5c 	bl	8000698 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de4:	f7ff fc58 	bl	8000698 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e1b8      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_RCC_OscConfig+0x508>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d108      	bne.n	8000e1c <HAL_RCC_OscConfig+0x4d8>
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e1a:	e029      	b.n	8000e70 <HAL_RCC_OscConfig+0x52c>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d115      	bne.n	8000e50 <HAL_RCC_OscConfig+0x50c>
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e3a:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <HAL_RCC_OscConfig+0x504>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e44:	e014      	b.n	8000e70 <HAL_RCC_OscConfig+0x52c>
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40007000 	.word	0x40007000
 8000e50:	4b9d      	ldr	r3, [pc, #628]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e56:	4a9c      	ldr	r2, [pc, #624]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e60:	4b99      	ldr	r3, [pc, #612]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e66:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000e68:	f023 0304 	bic.w	r3, r3, #4
 8000e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d016      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e78:	f7ff fc0e 	bl	8000698 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e7e:	e00a      	b.n	8000e96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e80:	f7ff fc0a 	bl	8000698 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e168      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e96:	4b8c      	ldr	r3, [pc, #560]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ed      	beq.n	8000e80 <HAL_RCC_OscConfig+0x53c>
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fbf7 	bl	8000698 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fbf3 	bl	8000698 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e151      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ec4:	4b80      	ldr	r3, [pc, #512]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ed      	bne.n	8000eae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ed2:	7ffb      	ldrb	r3, [r7, #31]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d105      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed8:	4b7b      	ldr	r3, [pc, #492]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	4a7a      	ldr	r2, [pc, #488]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d03c      	beq.n	8000f6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01c      	beq.n	8000f32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000efe:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f08:	f7ff fbc6 	bl	8000698 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f10:	f7ff fbc2 	bl	8000698 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e122      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f22:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0ef      	beq.n	8000f10 <HAL_RCC_OscConfig+0x5cc>
 8000f30:	e01b      	b.n	8000f6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f32:	4b65      	ldr	r3, [pc, #404]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f38:	4a63      	ldr	r2, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f42:	f7ff fba9 	bl	8000698 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f4a:	f7ff fba5 	bl	8000698 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e105      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f5c:	4b5a      	ldr	r3, [pc, #360]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1ef      	bne.n	8000f4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80f9 	beq.w	8001166 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	f040 80cf 	bne.w	800111c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0203 	and.w	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d12c      	bne.n	8000fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d123      	bne.n	8000fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d11b      	bne.n	8000fec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d113      	bne.n	8000fec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d109      	bne.n	8000fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	085b      	lsrs	r3, r3, #1
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d071      	beq.n	80010d0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d068      	beq.n	80010c4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ac      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001018:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800101a:	f7ff fb3d 	bl	8000698 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001022:	f7ff fb39 	bl	8000698 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e099      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f0      	bne.n	8001022 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_RCC_OscConfig+0x788>)
 8001046:	4013      	ands	r3, r2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001050:	3a01      	subs	r2, #1
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	4311      	orrs	r1, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800105a:	0212      	lsls	r2, r2, #8
 800105c:	4311      	orrs	r1, r2
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001062:	0852      	lsrs	r2, r2, #1
 8001064:	3a01      	subs	r2, #1
 8001066:	0552      	lsls	r2, r2, #21
 8001068:	4311      	orrs	r1, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800106e:	0852      	lsrs	r2, r2, #1
 8001070:	3a01      	subs	r2, #1
 8001072:	0652      	lsls	r2, r2, #25
 8001074:	4311      	orrs	r1, r2
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800107a:	06d2      	lsls	r2, r2, #27
 800107c:	430a      	orrs	r2, r1
 800107e:	4912      	ldr	r1, [pc, #72]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001080:	4313      	orrs	r3, r2
 8001082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 800108a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 8001096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800109a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800109c:	f7ff fafc 	bl	8000698 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff faf8 	bl	8000698 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e058      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_RCC_OscConfig+0x784>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010c2:	e050      	b.n	8001166 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e04f      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
 80010c8:	40021000 	.word	0x40021000
 80010cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d144      	bne.n	8001166 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a23      	ldr	r2, [pc, #140]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 80010e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	4a20      	ldr	r2, [pc, #128]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 80010ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010f4:	f7ff fad0 	bl	8000698 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff facc 	bl	8000698 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e02c      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x7b8>
 800111a:	e024      	b.n	8001166 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d01f      	beq.n	8001162 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 8001128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800112c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fab3 	bl	8000698 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff faaf 	bl	8000698 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e00f      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	4905      	ldr	r1, [pc, #20]	; (8001170 <HAL_RCC_OscConfig+0x82c>)
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_RCC_OscConfig+0x830>)
 800115c:	4013      	ands	r3, r2
 800115e:	60cb      	str	r3, [r1, #12]
 8001160:	e001      	b.n	8001166 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	feeefffc 	.word	0xfeeefffc

08001178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0e7      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800118c:	4b75      	ldr	r3, [pc, #468]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d910      	bls.n	80011bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b72      	ldr	r3, [pc, #456]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 0207 	bic.w	r2, r3, #7
 80011a2:	4970      	ldr	r1, [pc, #448]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b6e      	ldr	r3, [pc, #440]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0cf      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d010      	beq.n	80011ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4b66      	ldr	r3, [pc, #408]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d908      	bls.n	80011ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4960      	ldr	r1, [pc, #384]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d04c      	beq.n	8001290 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d121      	bne.n	800124e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e0a6      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	4b54      	ldr	r3, [pc, #336]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d115      	bne.n	800124e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e09a      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800122e:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e08e      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800123e:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e086      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f023 0203 	bic.w	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4943      	ldr	r1, [pc, #268]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 800125c:	4313      	orrs	r3, r2
 800125e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001260:	f7ff fa1a 	bl	8000698 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	e00a      	b.n	800127e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001268:	f7ff fa16 	bl	8000698 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f241 3288 	movw	r2, #5000	; 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e06e      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 020c 	and.w	r2, r3, #12
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	429a      	cmp	r2, r3
 800128e:	d1eb      	bne.n	8001268 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d010      	beq.n	80012be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d208      	bcs.n	80012be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	492b      	ldr	r1, [pc, #172]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d210      	bcs.n	80012ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 0207 	bic.w	r2, r3, #7
 80012d4:	4923      	ldr	r1, [pc, #140]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_RCC_ClockConfig+0x1ec>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e036      	b.n	800135c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	4918      	ldr	r1, [pc, #96]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001308:	4313      	orrs	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b00      	cmp	r3, #0
 8001316:	d009      	beq.n	800132c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4910      	ldr	r1, [pc, #64]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001328:	4313      	orrs	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800132c:	f000 f824 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	490b      	ldr	r1, [pc, #44]	; (800136c <HAL_RCC_ClockConfig+0x1f4>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800134a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_RCC_ClockConfig+0x1fc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f951 	bl	80005f8 <HAL_InitTick>
 8001356:	4603      	mov	r3, r0
 8001358:	72fb      	strb	r3, [r7, #11]

  return status;
 800135a:	7afb      	ldrb	r3, [r7, #11]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40022000 	.word	0x40022000
 8001368:	40021000 	.word	0x40021000
 800136c:	080015f0 	.word	0x080015f0
 8001370:	20000020 	.word	0x20000020
 8001374:	20000024 	.word	0x20000024

08001378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_GetSysClockFreq+0x34>
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d121      	bne.n	80013ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d11e      	bne.n	80013ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d107      	bne.n	80013c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 80013ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	e005      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <HAL_RCC_GetSysClockFreq+0x10c>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10d      	bne.n	8001400 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d102      	bne.n	80013f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_RCC_GetSysClockFreq+0x110>)
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	e004      	b.n	8001400 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_RCC_GetSysClockFreq+0x114>)
 80013fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d134      	bne.n	8001470 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d003      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0xa6>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d003      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0xac>
 800141c:	e005      	b.n	800142a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_RCC_GetSysClockFreq+0x110>)
 8001420:	617b      	str	r3, [r7, #20]
      break;
 8001422:	e005      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_RCC_GetSysClockFreq+0x114>)
 8001426:	617b      	str	r3, [r7, #20]
      break;
 8001428:	e002      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	617b      	str	r3, [r7, #20]
      break;
 800142e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	3301      	adds	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	fb03 f202 	mul.w	r2, r3, r2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_RCC_GetSysClockFreq+0x108>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	0e5b      	lsrs	r3, r3, #25
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	3301      	adds	r3, #1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001470:	69bb      	ldr	r3, [r7, #24]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	08001600 	.word	0x08001600
 8001488:	00f42400 	.word	0x00f42400
 800148c:	007a1200 	.word	0x007a1200

08001490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014a8:	f7ff f9e8 	bl	800087c <HAL_PWREx_GetVoltageRange>
 80014ac:	6178      	str	r0, [r7, #20]
 80014ae:	e014      	b.n	80014da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	4a24      	ldr	r2, [pc, #144]	; (8001548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6593      	str	r3, [r2, #88]	; 0x58
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80014c8:	f7ff f9d8 	bl	800087c <HAL_PWREx_GetVoltageRange>
 80014cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e0:	d10b      	bne.n	80014fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b80      	cmp	r3, #128	; 0x80
 80014e6:	d919      	bls.n	800151c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2ba0      	cmp	r3, #160	; 0xa0
 80014ec:	d902      	bls.n	80014f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014ee:	2302      	movs	r3, #2
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e013      	b.n	800151c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	e010      	b.n	800151c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b80      	cmp	r3, #128	; 0x80
 80014fe:	d902      	bls.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001500:	2303      	movs	r3, #3
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	e00a      	b.n	800151c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b80      	cmp	r3, #128	; 0x80
 800150a:	d102      	bne.n	8001512 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e004      	b.n	800151c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b70      	cmp	r3, #112	; 0x70
 8001516:	d101      	bne.n	800151c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 0207 	bic.w	r2, r3, #7
 8001524:	4909      	ldr	r1, [pc, #36]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	40022000 	.word	0x40022000

08001550 <__libc_init_array>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	4d0d      	ldr	r5, [pc, #52]	; (8001588 <__libc_init_array+0x38>)
 8001554:	4c0d      	ldr	r4, [pc, #52]	; (800158c <__libc_init_array+0x3c>)
 8001556:	1b64      	subs	r4, r4, r5
 8001558:	10a4      	asrs	r4, r4, #2
 800155a:	2600      	movs	r6, #0
 800155c:	42a6      	cmp	r6, r4
 800155e:	d109      	bne.n	8001574 <__libc_init_array+0x24>
 8001560:	4d0b      	ldr	r5, [pc, #44]	; (8001590 <__libc_init_array+0x40>)
 8001562:	4c0c      	ldr	r4, [pc, #48]	; (8001594 <__libc_init_array+0x44>)
 8001564:	f000 f820 	bl	80015a8 <_init>
 8001568:	1b64      	subs	r4, r4, r5
 800156a:	10a4      	asrs	r4, r4, #2
 800156c:	2600      	movs	r6, #0
 800156e:	42a6      	cmp	r6, r4
 8001570:	d105      	bne.n	800157e <__libc_init_array+0x2e>
 8001572:	bd70      	pop	{r4, r5, r6, pc}
 8001574:	f855 3b04 	ldr.w	r3, [r5], #4
 8001578:	4798      	blx	r3
 800157a:	3601      	adds	r6, #1
 800157c:	e7ee      	b.n	800155c <__libc_init_array+0xc>
 800157e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001582:	4798      	blx	r3
 8001584:	3601      	adds	r6, #1
 8001586:	e7f2      	b.n	800156e <__libc_init_array+0x1e>
 8001588:	08001630 	.word	0x08001630
 800158c:	08001630 	.word	0x08001630
 8001590:	08001630 	.word	0x08001630
 8001594:	08001634 	.word	0x08001634

08001598 <memset>:
 8001598:	4402      	add	r2, r0
 800159a:	4603      	mov	r3, r0
 800159c:	4293      	cmp	r3, r2
 800159e:	d100      	bne.n	80015a2 <memset+0xa>
 80015a0:	4770      	bx	lr
 80015a2:	f803 1b01 	strb.w	r1, [r3], #1
 80015a6:	e7f9      	b.n	800159c <memset+0x4>

080015a8 <_init>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	bf00      	nop
 80015ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ae:	bc08      	pop	{r3}
 80015b0:	469e      	mov	lr, r3
 80015b2:	4770      	bx	lr

080015b4 <_fini>:
 80015b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b6:	bf00      	nop
 80015b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ba:	bc08      	pop	{r3}
 80015bc:	469e      	mov	lr, r3
 80015be:	4770      	bx	lr
