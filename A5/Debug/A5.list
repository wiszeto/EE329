
A5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001418  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080015c4  080015c4  000115c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001604  08001604  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001604  08001604  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001604  08001604  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001604  08001604  00011604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001608  08001608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800160c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001618  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001618  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048a0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001082  00000000  00000000  000248dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000588  00000000  00000000  00025960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e0  00000000  00000000  00025ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027152  00000000  00000000  000263c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a08  00000000  00000000  0004d51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee564  00000000  00000000  00053f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013d8  00000000  00000000  001424d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080015ac 	.word	0x080015ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080015ac 	.word	0x080015ac

080001ec <SPI_init>:
#define Vref 3300
// PA4 SPI1_NSS
// PA5 SPI1_SCK
// PA7 SPI1_MOSI

void SPI_init( void ) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);               // GPIOA: DAC NSS/SCK/SDO
 80001f0:	4b3b      	ldr	r3, [pc, #236]	; (80002e0 <SPI_init+0xf4>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	4a3a      	ldr	r2, [pc, #232]	; (80002e0 <SPI_init+0xf4>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC-> APB2ENR |= (RCC_APB2ENR_SPI1EN);                // SPI1 port
 80001fc:	4b38      	ldr	r3, [pc, #224]	; (80002e0 <SPI_init+0xf4>)
 80001fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000200:	4a37      	ldr	r2, [pc, #220]	; (80002e0 <SPI_init+0xf4>)
 8000202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000206:	6613      	str	r3, [r2, #96]	; 0x60

   GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE7);
 8000208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000212:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000216:	6013      	str	r3, [r2, #0]
   GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1);
 8000218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000222:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 8000226:	6013      	str	r3, [r2, #0]
   GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL4_Pos) | (0x000F << GPIO_AFRL_AFSEL5_Pos) | (0x000F << GPIO_AFRL_AFSEL7_Pos));
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000232:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000236:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800023a:	6213      	str	r3, [r2, #32]
   GPIOA->AFR[0] &= ~((0x0005 << GPIO_AFRL_AFSEL4_Pos) | (0x0005 << GPIO_AFRL_AFSEL5_Pos) | (0x0005 << GPIO_AFRL_AFSEL7_Pos));
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800024a:	f423 03aa 	bic.w	r3, r3, #5570560	; 0x550000
 800024e:	6213      	str	r3, [r2, #32]
//   GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT7);
////   GPIOA->PUPDR
//   GPIOA->OSPEEDR |=((3 << GPIO_OSPEEDR_OSPEED4_Pos) | (3 << GPIO_OSPEEDR_OSPEED5_Pos) | (3 << GPIO_OSPEEDR_OSPEED7_Pos));

   SPI1->CR1 &= ~( SPI_CR1_SPE );             	// disable SPI for config
 8000250:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <SPI_init+0xf8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a23      	ldr	r2, [pc, #140]	; (80002e4 <SPI_init+0xf8>)
 8000256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800025a:	6013      	str	r3, [r2, #0]
   SPI1->CR1 &= ~( SPI_CR1_RXONLY );          	// recv-only OFF
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <SPI_init+0xf8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a20      	ldr	r2, [pc, #128]	; (80002e4 <SPI_init+0xf8>)
 8000262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000266:	6013      	str	r3, [r2, #0]
   SPI1->CR1 &= ~( SPI_CR1_LSBFIRST );        	// data bit order MSb:LSb
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <SPI_init+0xf8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1d      	ldr	r2, [pc, #116]	; (80002e4 <SPI_init+0xf8>)
 800026e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000272:	6013      	str	r3, [r2, #0]
   SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA ); // SCLK polarity:phase = 0:0
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <SPI_init+0xf8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <SPI_init+0xf8>)
 800027a:	f023 0303 	bic.w	r3, r3, #3
 800027e:	6013      	str	r3, [r2, #0]
   SPI1->CR1 |=	 SPI_CR1_MSTR;              	// MCU is SPI controller
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <SPI_init+0xf8>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <SPI_init+0xf8>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6013      	str	r3, [r2, #0]
   // CR2 (reset value = 0x0700 : 8b data)
   SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE ); // disable FIFO intrpts
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <SPI_init+0xf8>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a14      	ldr	r2, [pc, #80]	; (80002e4 <SPI_init+0xf8>)
 8000292:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000296:	6053      	str	r3, [r2, #4]
   SPI1->CR2 &= ~( SPI_CR2_FRF);              	// Moto frame format
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <SPI_init+0xf8>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <SPI_init+0xf8>)
 800029e:	f023 0310 	bic.w	r3, r3, #16
 80002a2:	6053      	str	r3, [r2, #4]
   SPI1->CR2 |=	 SPI_CR2_NSSP;              	// auto-generate NSS pulse
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <SPI_init+0xf8>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <SPI_init+0xf8>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6053      	str	r3, [r2, #4]
   SPI1->CR2 |=	 SPI_CR2_DS;                	// 16-bit data
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <SPI_init+0xf8>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <SPI_init+0xf8>)
 80002b6:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80002ba:	6053      	str	r3, [r2, #4]
   SPI1->CR2 |=	 SPI_CR2_SSOE;              	// enable SS output
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <SPI_init+0xf8>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <SPI_init+0xf8>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6053      	str	r3, [r2, #4]
   // CR1
   SPI1->CR1 |=	 SPI_CR1_SPE;               	// re-enable SPI for ops
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SPI_init+0xf8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <SPI_init+0xf8>)
 80002ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40013000 	.word	0x40013000

080002e8 <DAC_volt_conv>:

uint32_t DAC_volt_conv(uint32_t analog_val){
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]

    //check if vref greater than 3300 mV
    if(analog_val > Vref){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f640 42e4 	movw	r2, #3300	; 0xce4
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d902      	bls.n	8000300 <DAC_volt_conv+0x18>
        analog_val = Vref;
 80002fa:	f640 43e4 	movw	r3, #3300	; 0xce4
 80002fe:	607b      	str	r3, [r7, #4]
    }

    //convert to digital value
    uint32_t dig_val = (analog_val * 4095) / Vref;
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	4613      	mov	r3, r2
 8000304:	031b      	lsls	r3, r3, #12
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	089b      	lsrs	r3, r3, #2
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <DAC_volt_conv+0x3c>)
 800030c:	fba2 2303 	umull	r2, r3, r2, r3
 8000310:	095b      	lsrs	r3, r3, #5
 8000312:	60fb      	str	r3, [r7, #12]
    return dig_val;
 8000314:	68fb      	ldr	r3, [r7, #12]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	09ee009f 	.word	0x09ee009f

08000328 <DAC_write>:

void DAC_write(dig_val) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

    //check if the buffer is empty
    while(!(SPI1->SR & SPI_SR_TXE)){}
 8000330:	bf00      	nop
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <DAC_write+0x2c>)
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <DAC_write+0xa>

    //writing to the DAC
    SPI1->DR = 0x1000 + dig_val;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <DAC_write+0x2c>)
 8000346:	60da      	str	r2, [r3, #12]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40013000 	.word	0x40013000

08000358 <keypad_init>:
static    int cols[3] = {Col1, Col2, Col3}; //corresponds to GPIO pins
static    int rows[4] = {Row1, Row2, Row3, Row4}; //coresponds to GPIO pins
static    int delay_time = 10000;

//This function, configures row, column and keypad pin
void keypad_init() {
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

    //Making column pins output mode bits(01)
    COL_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2);
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <keypad_init+0x48>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <keypad_init+0x48>)
 8000362:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000366:	6013      	str	r3, [r2, #0]
    COL_PORT->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0);
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <keypad_init+0x48>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <keypad_init+0x48>)
 800036e:	f043 0315 	orr.w	r3, r3, #21
 8000372:	6013      	str	r3, [r2, #0]

    //Making row pins input mode bits(00)
    ROW_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <keypad_init+0x4c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <keypad_init+0x4c>)
 800037a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800037e:	6013      	str	r3, [r2, #0]

    //enable pull-down resistor bits(10)
    ROW_PORT->PUPDR &= (GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <keypad_init+0x4c>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <keypad_init+0x4c>)
 8000386:	b2db      	uxtb	r3, r3
 8000388:	60d3      	str	r3, [r2, #12]
    ROW_PORT->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <keypad_init+0x4c>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <keypad_init+0x4c>)
 8000390:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000394:	60d3      	str	r3, [r2, #12]
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	48000400 	.word	0x48000400
 80003a4:	48000c00 	.word	0x48000c00

080003a8 <main>:
#include "keypad.h"

void SystemClock_Config(void);

int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
  HAL_Init();
 80003ae:	f000 f90c 	bl	80005ca <HAL_Init>

  SystemClock_Config();
 80003b2:	f000 f835 	bl	8000420 <SystemClock_Config>

  RCC-> AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80003b6:	4b19      	ldr	r3, [pc, #100]	; (800041c <main+0x74>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a18      	ldr	r2, [pc, #96]	; (800041c <main+0x74>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC-> AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <main+0x74>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <main+0x74>)
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC-> AHB2ENR |= (RCC_AHB2ENR_GPIODEN);
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <main+0x74>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <main+0x74>)
 80003d4:	f043 0308 	orr.w	r3, r3, #8
 80003d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC-> APB2ENR |= (RCC_APB2ENR_SPI1EN);
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <main+0x74>)
 80003dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003de:	4a0f      	ldr	r2, [pc, #60]	; (800041c <main+0x74>)
 80003e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003e4:	6613      	str	r3, [r2, #96]	; 0x60

  keypad_init();
 80003e6:	f7ff ffb7 	bl	8000358 <keypad_init>
  SPI_init();
 80003ea:	f7ff feff 	bl	80001ec <SPI_init>

  uint8_t num_key = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	73fb      	strb	r3, [r7, #15]
  uint32_t output_volt = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]

  while (1)
  {
	  output_volt = 999;
 80003f6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80003fa:	60bb      	str	r3, [r7, #8]
	  uint32_t dig_val = DAC_volt_conv((output_volt * 10) + 200);
 80003fc:	68ba      	ldr	r2, [r7, #8]
 80003fe:	4613      	mov	r3, r2
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	4413      	add	r3, r2
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	33c8      	adds	r3, #200	; 0xc8
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff6d 	bl	80002e8 <DAC_volt_conv>
 800040e:	4603      	mov	r3, r0
 8000410:	607b      	str	r3, [r7, #4]
	  DAC_write(dig_val);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ff88 	bl	8000328 <DAC_write>
  {
 8000418:	e7ed      	b.n	80003f6 <main+0x4e>
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b096      	sub	sp, #88	; 0x58
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	2244      	movs	r2, #68	; 0x44
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f001 f8b4 	bl	800159c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]


  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000442:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000446:	f000 fa29 	bl	800089c <HAL_PWREx_ControlVoltageScaling>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000450:	f000 f82c 	bl	80004ac <Error_Handler>
  }


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000454:	2310      	movs	r3, #16
 8000456:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000460:	2360      	movs	r3, #96	; 0x60
 8000462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000464:	2300      	movs	r3, #0
 8000466:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fa6b 	bl	8000948 <HAL_RCC_OscConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000478:	f000 f818 	bl	80004ac <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	230f      	movs	r3, #15
 800047e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fe71 	bl	800117c <HAL_RCC_ClockConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004a0:	f000 f804 	bl	80004ac <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	3758      	adds	r7, #88	; 0x58
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <Error_Handler>:


void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop

  __disable_irq();
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <Error_Handler+0x8>
	...

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <HAL_MspInit+0x44>)
 80004c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_MspInit+0x44>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_MspInit+0x44>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <HAL_MspInit+0x44>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	6593      	str	r3, [r2, #88]	; 0x58
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <NMI_Handler+0x4>

08000506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <HardFault_Handler+0x4>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <MemManage_Handler+0x4>

08000512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <BusFault_Handler+0x4>

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <UsageFault_Handler+0x4>

0800051e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054c:	f000 f892 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <SystemInit+0x20>)
 800055a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055e:	4a05      	ldr	r2, [pc, #20]	; (8000574 <SystemInit+0x20>)
 8000560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800057c:	f7ff ffea 	bl	8000554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	; (80005b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <LoopForever+0xe>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <LoopForever+0x16>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a6:	f000 ffd5 	bl	8001554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005aa:	f7ff fefd 	bl	80003a8 <main>

080005ae <LoopForever>:

LoopForever:
    b LoopForever
 80005ae:	e7fe      	b.n	80005ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005bc:	0800160c 	.word	0x0800160c
  ldr r2, =_sbss
 80005c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c4:	2000002c 	.word	0x2000002c

080005c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_2_IRQHandler>

080005ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005d0:	2300      	movs	r3, #0
 80005d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f91f 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 f80e 	bl	80005fc <HAL_InitTick>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	e001      	b.n	80005f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005ec:	f7ff ff64 	bl	80004b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005f0:	79fb      	ldrb	r3, [r7, #7]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <HAL_InitTick+0x6c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d023      	beq.n	8000658 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <HAL_InitTick+0x70>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_InitTick+0x6c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f91d 	bl	8000866 <HAL_SYSTICK_Config>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d10f      	bne.n	8000652 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d809      	bhi.n	800064c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f8f5 	bl	800082e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <HAL_InitTick+0x74>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	e007      	b.n	800065c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e004      	b.n	800065c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	e001      	b.n	800065c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800065c:	7bfb      	ldrb	r3, [r7, #15]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000008 	.word	0x20000008
 800066c:	20000000 	.word	0x20000000
 8000670:	20000004 	.word	0x20000004

08000674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x20>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x24>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_IncTick+0x24>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000008 	.word	0x20000008
 8000698:	20000028 	.word	0x20000028

0800069c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_GetTick+0x14>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff8e 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff47 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff5c 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff8e 	bl	800076c <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5d 	bl	8000718 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffb0 	bl	80007d4 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <HAL_PWREx_GetVoltageRange+0x18>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40007000 	.word	0x40007000

0800089c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008aa:	d130      	bne.n	800090e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008b8:	d038      	beq.n	800092c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2232      	movs	r2, #50	; 0x32
 80008d0:	fb02 f303 	mul.w	r3, r2, r3
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	0c9b      	lsrs	r3, r3, #18
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008e0:	e002      	b.n	80008e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008f4:	d102      	bne.n	80008fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f2      	bne.n	80008e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000908:	d110      	bne.n	800092c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800090a:	2303      	movs	r3, #3
 800090c:	e00f      	b.n	800092e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800091a:	d007      	beq.n	800092c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000924:	4a05      	ldr	r2, [pc, #20]	; (800093c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40007000 	.word	0x40007000
 8000940:	20000000 	.word	0x20000000
 8000944:	431bde83 	.word	0x431bde83

08000948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	f000 bc08 	b.w	800116c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800095c:	4b96      	ldr	r3, [pc, #600]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000966:	4b94      	ldr	r3, [pc, #592]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80e4 	beq.w	8000b46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d007      	beq.n	8000994 <HAL_RCC_OscConfig+0x4c>
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2b0c      	cmp	r3, #12
 8000988:	f040 808b 	bne.w	8000aa2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	2b01      	cmp	r3, #1
 8000990:	f040 8087 	bne.w	8000aa2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000994:	4b88      	ldr	r3, [pc, #544]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <HAL_RCC_OscConfig+0x64>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e3df      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a1a      	ldr	r2, [r3, #32]
 80009b0:	4b81      	ldr	r3, [pc, #516]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <HAL_RCC_OscConfig+0x7e>
 80009bc:	4b7e      	ldr	r3, [pc, #504]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009c4:	e005      	b.n	80009d2 <HAL_RCC_OscConfig+0x8a>
 80009c6:	4b7c      	ldr	r3, [pc, #496]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 80009c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009cc:	091b      	lsrs	r3, r3, #4
 80009ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d223      	bcs.n	8000a1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a1b      	ldr	r3, [r3, #32]
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fd5a 	bl	8001494 <RCC_SetFlashLatencyFromMSIRange>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e3c0      	b.n	800116c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009ea:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a72      	ldr	r2, [pc, #456]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	4b70      	ldr	r3, [pc, #448]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	496d      	ldr	r1, [pc, #436]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a04:	4313      	orrs	r3, r2
 8000a06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a08:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	021b      	lsls	r3, r3, #8
 8000a16:	4968      	ldr	r1, [pc, #416]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	604b      	str	r3, [r1, #4]
 8000a1c:	e025      	b.n	8000a6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a1e:	4b66      	ldr	r3, [pc, #408]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a65      	ldr	r2, [pc, #404]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	4960      	ldr	r1, [pc, #384]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	495b      	ldr	r1, [pc, #364]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d109      	bne.n	8000a6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fd1a 	bl	8001494 <RCC_SetFlashLatencyFromMSIRange>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e380      	b.n	800116c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a6a:	f000 fc87 	bl	800137c <HAL_RCC_GetSysClockFreq>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	4950      	ldr	r1, [pc, #320]	; (8000bbc <HAL_RCC_OscConfig+0x274>)
 8000a7c:	5ccb      	ldrb	r3, [r1, r3]
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	fa22 f303 	lsr.w	r3, r2, r3
 8000a86:	4a4e      	ldr	r2, [pc, #312]	; (8000bc0 <HAL_RCC_OscConfig+0x278>)
 8000a88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000a8a:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <HAL_RCC_OscConfig+0x27c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fdb4 	bl	80005fc <HAL_InitTick>
 8000a94:	4603      	mov	r3, r0
 8000a96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d052      	beq.n	8000b44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	e364      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d032      	beq.n	8000b10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000aaa:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ab6:	f7ff fdf1 	bl	800069c <HAL_GetTick>
 8000aba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000abc:	e008      	b.n	8000ad0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000abe:	f7ff fded 	bl	800069c <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d901      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e34d      	b.n	800116c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ad0:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f0      	beq.n	8000abe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000adc:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a35      	ldr	r2, [pc, #212]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4930      	ldr	r1, [pc, #192]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000af6:	4313      	orrs	r3, r2
 8000af8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	492b      	ldr	r1, [pc, #172]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	604b      	str	r3, [r1, #4]
 8000b0e:	e01a      	b.n	8000b46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a28      	ldr	r2, [pc, #160]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fdbe 	bl	800069c <HAL_GetTick>
 8000b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b24:	f7ff fdba 	bl	800069c <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e31a      	b.n	800116c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f0      	bne.n	8000b24 <HAL_RCC_OscConfig+0x1dc>
 8000b42:	e000      	b.n	8000b46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d073      	beq.n	8000c3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	d005      	beq.n	8000b64 <HAL_RCC_OscConfig+0x21c>
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2b0c      	cmp	r3, #12
 8000b5c:	d10e      	bne.n	8000b7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d10b      	bne.n	8000b7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d063      	beq.n	8000c38 <HAL_RCC_OscConfig+0x2f0>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d15f      	bne.n	8000c38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e2f7      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b84:	d106      	bne.n	8000b94 <HAL_RCC_OscConfig+0x24c>
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e025      	b.n	8000be0 <HAL_RCC_OscConfig+0x298>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9c:	d114      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x280>
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a02      	ldr	r2, [pc, #8]	; (8000bb8 <HAL_RCC_OscConfig+0x270>)
 8000bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e013      	b.n	8000be0 <HAL_RCC_OscConfig+0x298>
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	080015c4 	.word	0x080015c4
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	4ba0      	ldr	r3, [pc, #640]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a9f      	ldr	r2, [pc, #636]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b9d      	ldr	r3, [pc, #628]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a9c      	ldr	r2, [pc, #624]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000be8:	f7ff fd58 	bl	800069c <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fd54 	bl	800069c <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b64      	cmp	r3, #100	; 0x64
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e2b4      	b.n	800116c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c02:	4b92      	ldr	r3, [pc, #584]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f0      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x2a8>
 8000c0e:	e014      	b.n	8000c3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c10:	f7ff fd44 	bl	800069c <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff fd40 	bl	800069c <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e2a0      	b.n	800116c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c2a:	4b88      	ldr	r3, [pc, #544]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f0      	bne.n	8000c18 <HAL_RCC_OscConfig+0x2d0>
 8000c36:	e000      	b.n	8000c3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d060      	beq.n	8000d08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d005      	beq.n	8000c58 <HAL_RCC_OscConfig+0x310>
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2b0c      	cmp	r3, #12
 8000c50:	d119      	bne.n	8000c86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d116      	bne.n	8000c86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c58:	4b7c      	ldr	r3, [pc, #496]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d005      	beq.n	8000c70 <HAL_RCC_OscConfig+0x328>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e27d      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c70:	4b76      	ldr	r3, [pc, #472]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	061b      	lsls	r3, r3, #24
 8000c7e:	4973      	ldr	r1, [pc, #460]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000c80:	4313      	orrs	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c84:	e040      	b.n	8000d08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d023      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a6e      	ldr	r2, [pc, #440]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fcff 	bl	800069c <HAL_GetTick>
 8000c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fcfb 	bl	800069c <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e25b      	b.n	800116c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cb4:	4b65      	ldr	r3, [pc, #404]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f0      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc0:	4b62      	ldr	r3, [pc, #392]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	061b      	lsls	r3, r3, #24
 8000cce:	495f      	ldr	r1, [pc, #380]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e018      	b.n	8000d08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	4b5d      	ldr	r3, [pc, #372]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a5c      	ldr	r2, [pc, #368]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce2:	f7ff fcdb 	bl	800069c <HAL_GetTick>
 8000ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cea:	f7ff fcd7 	bl	800069c <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e237      	b.n	800116c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cfc:	4b53      	ldr	r3, [pc, #332]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f0      	bne.n	8000cea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d03c      	beq.n	8000d8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d01c      	beq.n	8000d56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d1c:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d22:	4a4a      	ldr	r2, [pc, #296]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d2c:	f7ff fcb6 	bl	800069c <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d34:	f7ff fcb2 	bl	800069c <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e212      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d46:	4b41      	ldr	r3, [pc, #260]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0ef      	beq.n	8000d34 <HAL_RCC_OscConfig+0x3ec>
 8000d54:	e01b      	b.n	8000d8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d5c:	4a3b      	ldr	r2, [pc, #236]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d66:	f7ff fc99 	bl	800069c <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d6c:	e008      	b.n	8000d80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fc95 	bl	800069c <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e1f5      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d80:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1ef      	bne.n	8000d6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80a6 	beq.w	8000ee8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10d      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db0:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db6:	6593      	str	r3, [r2, #88]	; 0x58
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_RCC_OscConfig+0x508>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d118      	bne.n	8000e06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_RCC_OscConfig+0x508>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <HAL_RCC_OscConfig+0x508>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc5c 	bl	800069c <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de8:	f7ff fc58 	bl	800069c <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e1b8      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_RCC_OscConfig+0x508>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d108      	bne.n	8000e20 <HAL_RCC_OscConfig+0x4d8>
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e1e:	e029      	b.n	8000e74 <HAL_RCC_OscConfig+0x52c>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d115      	bne.n	8000e54 <HAL_RCC_OscConfig+0x50c>
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2e:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e3e:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_RCC_OscConfig+0x504>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e48:	e014      	b.n	8000e74 <HAL_RCC_OscConfig+0x52c>
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40007000 	.word	0x40007000
 8000e54:	4b9d      	ldr	r3, [pc, #628]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	4a9c      	ldr	r2, [pc, #624]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e64:	4b99      	ldr	r3, [pc, #612]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e6a:	4a98      	ldr	r2, [pc, #608]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d016      	beq.n	8000eaa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fc0e 	bl	800069c <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e82:	e00a      	b.n	8000e9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e84:	f7ff fc0a 	bl	800069c <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e168      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e9a:	4b8c      	ldr	r3, [pc, #560]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0ed      	beq.n	8000e84 <HAL_RCC_OscConfig+0x53c>
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fbf7 	bl	800069c <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000eb0:	e00a      	b.n	8000ec8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fbf3 	bl	800069c <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e151      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ec8:	4b80      	ldr	r3, [pc, #512]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ed      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ed6:	7ffb      	ldrb	r3, [r7, #31]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d105      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000edc:	4b7b      	ldr	r3, [pc, #492]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	4a7a      	ldr	r2, [pc, #488]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d01c      	beq.n	8000f36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000efc:	4b73      	ldr	r3, [pc, #460]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f02:	4a72      	ldr	r2, [pc, #456]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fbc6 	bl	800069c <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f14:	f7ff fbc2 	bl	800069c <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e122      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f26:	4b69      	ldr	r3, [pc, #420]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ef      	beq.n	8000f14 <HAL_RCC_OscConfig+0x5cc>
 8000f34:	e01b      	b.n	8000f6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f36:	4b65      	ldr	r3, [pc, #404]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f3c:	4a63      	ldr	r2, [pc, #396]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000f3e:	f023 0301 	bic.w	r3, r3, #1
 8000f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f46:	f7ff fba9 	bl	800069c <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f4e:	f7ff fba5 	bl	800069c <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e105      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f60:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1ef      	bne.n	8000f4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80f9 	beq.w	800116a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	f040 80cf 	bne.w	8001120 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f82:	4b52      	ldr	r3, [pc, #328]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0203 	and.w	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d12c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d123      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d11b      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d113      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d109      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	085b      	lsrs	r3, r3, #1
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d071      	beq.n	80010d4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b0c      	cmp	r3, #12
 8000ff4:	d068      	beq.n	80010c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0ac      	b.n	800116c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8001018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800101c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800101e:	f7ff fb3d 	bl	800069c <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff fb39 	bl	800069c <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e099      	b.n	800116c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <HAL_RCC_OscConfig+0x788>)
 800104a:	4013      	ands	r3, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001054:	3a01      	subs	r2, #1
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	4311      	orrs	r1, r2
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800105e:	0212      	lsls	r2, r2, #8
 8001060:	4311      	orrs	r1, r2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001066:	0852      	lsrs	r2, r2, #1
 8001068:	3a01      	subs	r2, #1
 800106a:	0552      	lsls	r2, r2, #21
 800106c:	4311      	orrs	r1, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001072:	0852      	lsrs	r2, r2, #1
 8001074:	3a01      	subs	r2, #1
 8001076:	0652      	lsls	r2, r2, #25
 8001078:	4311      	orrs	r1, r2
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800107e:	06d2      	lsls	r2, r2, #27
 8001080:	430a      	orrs	r2, r1
 8001082:	4912      	ldr	r1, [pc, #72]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8001084:	4313      	orrs	r3, r2
 8001086:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 800108e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001092:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 800109a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800109e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010a0:	f7ff fafc 	bl	800069c <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff faf8 	bl	800069c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e058      	b.n	800116c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_RCC_OscConfig+0x784>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010c6:	e050      	b.n	800116a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e04f      	b.n	800116c <HAL_RCC_OscConfig+0x824>
 80010cc:	40021000 	.word	0x40021000
 80010d0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d144      	bne.n	800116a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 80010e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 80010f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010f8:	f7ff fad0 	bl	800069c <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff facc 	bl	800069c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e02c      	b.n	800116c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x7b8>
 800111e:	e024      	b.n	800116a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d01f      	beq.n	8001166 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 800112c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001132:	f7ff fab3 	bl	800069c <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff faaf 	bl	800069c <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e00f      	b.n	800116c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f0      	bne.n	800113a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	4905      	ldr	r1, [pc, #20]	; (8001174 <HAL_RCC_OscConfig+0x82c>)
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_RCC_OscConfig+0x830>)
 8001160:	4013      	ands	r3, r2
 8001162:	60cb      	str	r3, [r1, #12]
 8001164:	e001      	b.n	800116a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	feeefffc 	.word	0xfeeefffc

0800117c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0e7      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001190:	4b75      	ldr	r3, [pc, #468]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d910      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 0207 	bic.w	r2, r3, #7
 80011a6:	4970      	ldr	r1, [pc, #448]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b6e      	ldr	r3, [pc, #440]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0cf      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d010      	beq.n	80011ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	4b66      	ldr	r3, [pc, #408]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011d8:	429a      	cmp	r2, r3
 80011da:	d908      	bls.n	80011ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011dc:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4960      	ldr	r1, [pc, #384]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d04c      	beq.n	8001294 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001202:	4b5a      	ldr	r3, [pc, #360]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d121      	bne.n	8001252 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0a6      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121a:	4b54      	ldr	r3, [pc, #336]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d115      	bne.n	8001252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e09a      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e08e      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001242:	4b4a      	ldr	r3, [pc, #296]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e086      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4943      	ldr	r1, [pc, #268]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001264:	f7ff fa1a 	bl	800069c <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fa16 	bl	800069c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e06e      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d010      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d208      	bcs.n	80012c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	492b      	ldr	r1, [pc, #172]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d210      	bcs.n	80012f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 0207 	bic.w	r2, r3, #7
 80012d8:	4923      	ldr	r1, [pc, #140]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e036      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	4918      	ldr	r1, [pc, #96]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d009      	beq.n	8001330 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4910      	ldr	r1, [pc, #64]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001330:	f000 f824 	bl	800137c <HAL_RCC_GetSysClockFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	490b      	ldr	r1, [pc, #44]	; (8001370 <HAL_RCC_ClockConfig+0x1f4>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <HAL_RCC_ClockConfig+0x1f8>)
 800134e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1fc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f951 	bl	80005fc <HAL_InitTick>
 800135a:	4603      	mov	r3, r0
 800135c:	72fb      	strb	r3, [r7, #11]

  return status;
 800135e:	7afb      	ldrb	r3, [r7, #11]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40022000 	.word	0x40022000
 800136c:	40021000 	.word	0x40021000
 8001370:	080015c4 	.word	0x080015c4
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_GetSysClockFreq+0x34>
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d121      	bne.n	80013ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d11e      	bne.n	80013ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d107      	bne.n	80013cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80013bc:	4b31      	ldr	r3, [pc, #196]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 80013be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	e005      	b.n	80013d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80013d8:	4a2b      	ldr	r2, [pc, #172]	; (8001488 <HAL_RCC_GetSysClockFreq+0x10c>)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10d      	bne.n	8001404 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_RCC_GetSysClockFreq+0x110>)
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	e004      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_RCC_GetSysClockFreq+0x114>)
 8001402:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b0c      	cmp	r3, #12
 8001408:	d134      	bne.n	8001474 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d003      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0xa6>
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d003      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0xac>
 8001420:	e005      	b.n	800142e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_RCC_GetSysClockFreq+0x110>)
 8001424:	617b      	str	r3, [r7, #20]
      break;
 8001426:	e005      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_RCC_GetSysClockFreq+0x114>)
 800142a:	617b      	str	r3, [r7, #20]
      break;
 800142c:	e002      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	617b      	str	r3, [r7, #20]
      break;
 8001432:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	fb03 f202 	mul.w	r2, r3, r2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_RCC_GetSysClockFreq+0x108>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	0e5b      	lsrs	r3, r3, #25
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	3301      	adds	r3, #1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001474:	69bb      	ldr	r3, [r7, #24]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	080015d4 	.word	0x080015d4
 800148c:	00f42400 	.word	0x00f42400
 8001490:	007a1200 	.word	0x007a1200

08001494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014ac:	f7ff f9e8 	bl	8000880 <HAL_PWREx_GetVoltageRange>
 80014b0:	6178      	str	r0, [r7, #20]
 80014b2:	e014      	b.n	80014de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	6593      	str	r3, [r2, #88]	; 0x58
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80014cc:	f7ff f9d8 	bl	8000880 <HAL_PWREx_GetVoltageRange>
 80014d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e4:	d10b      	bne.n	80014fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b80      	cmp	r3, #128	; 0x80
 80014ea:	d919      	bls.n	8001520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2ba0      	cmp	r3, #160	; 0xa0
 80014f0:	d902      	bls.n	80014f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	e013      	b.n	8001520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	e010      	b.n	8001520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b80      	cmp	r3, #128	; 0x80
 8001502:	d902      	bls.n	800150a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001504:	2303      	movs	r3, #3
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	e00a      	b.n	8001520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b80      	cmp	r3, #128	; 0x80
 800150e:	d102      	bne.n	8001516 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001510:	2302      	movs	r3, #2
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	e004      	b.n	8001520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b70      	cmp	r3, #112	; 0x70
 800151a:	d101      	bne.n	8001520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 0207 	bic.w	r2, r3, #7
 8001528:	4909      	ldr	r1, [pc, #36]	; (8001550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	40022000 	.word	0x40022000

08001554 <__libc_init_array>:
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	4d0d      	ldr	r5, [pc, #52]	; (800158c <__libc_init_array+0x38>)
 8001558:	4c0d      	ldr	r4, [pc, #52]	; (8001590 <__libc_init_array+0x3c>)
 800155a:	1b64      	subs	r4, r4, r5
 800155c:	10a4      	asrs	r4, r4, #2
 800155e:	2600      	movs	r6, #0
 8001560:	42a6      	cmp	r6, r4
 8001562:	d109      	bne.n	8001578 <__libc_init_array+0x24>
 8001564:	4d0b      	ldr	r5, [pc, #44]	; (8001594 <__libc_init_array+0x40>)
 8001566:	4c0c      	ldr	r4, [pc, #48]	; (8001598 <__libc_init_array+0x44>)
 8001568:	f000 f820 	bl	80015ac <_init>
 800156c:	1b64      	subs	r4, r4, r5
 800156e:	10a4      	asrs	r4, r4, #2
 8001570:	2600      	movs	r6, #0
 8001572:	42a6      	cmp	r6, r4
 8001574:	d105      	bne.n	8001582 <__libc_init_array+0x2e>
 8001576:	bd70      	pop	{r4, r5, r6, pc}
 8001578:	f855 3b04 	ldr.w	r3, [r5], #4
 800157c:	4798      	blx	r3
 800157e:	3601      	adds	r6, #1
 8001580:	e7ee      	b.n	8001560 <__libc_init_array+0xc>
 8001582:	f855 3b04 	ldr.w	r3, [r5], #4
 8001586:	4798      	blx	r3
 8001588:	3601      	adds	r6, #1
 800158a:	e7f2      	b.n	8001572 <__libc_init_array+0x1e>
 800158c:	08001604 	.word	0x08001604
 8001590:	08001604 	.word	0x08001604
 8001594:	08001604 	.word	0x08001604
 8001598:	08001608 	.word	0x08001608

0800159c <memset>:
 800159c:	4402      	add	r2, r0
 800159e:	4603      	mov	r3, r0
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d100      	bne.n	80015a6 <memset+0xa>
 80015a4:	4770      	bx	lr
 80015a6:	f803 1b01 	strb.w	r1, [r3], #1
 80015aa:	e7f9      	b.n	80015a0 <memset+0x4>

080015ac <_init>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	bf00      	nop
 80015b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b2:	bc08      	pop	{r3}
 80015b4:	469e      	mov	lr, r3
 80015b6:	4770      	bx	lr

080015b8 <_fini>:
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	bf00      	nop
 80015bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015be:	bc08      	pop	{r3}
 80015c0:	469e      	mov	lr, r3
 80015c2:	4770      	bx	lr
