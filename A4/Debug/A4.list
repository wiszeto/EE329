
A4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001b5c  08001b5c  00011b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c24  08001c24  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001c24  08001c24  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c24  08001c24  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c24  08001c24  00011c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c28  08001c28  00011c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000014  08001c40  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001c40  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000510a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f6  00000000  00000000  0002514e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00026348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00026920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027268  00000000  00000000  00026e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006de8  00000000  00000000  0004e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeee2  00000000  00000000  00054ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143d82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015a8  00000000  00000000  00143dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001b44 	.word	0x08001b44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08001b44 	.word	0x08001b44

080001ec <SysTick_Init>:
#include "delay.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000248:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000008 	.word	0x20000008
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <LCD_init>:
int LCD_convert_ascii_to_time ( uint8_t asctime );

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  delay_us(100000);
 8000278:	482a      	ldr	r0, [pc, #168]	; (8000324 <LCD_init+0xb0>)
 800027a:	f7ff ffcd 	bl	8000218 <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // enable GPIOA clock on bus
 800027e:	4b2a      	ldr	r3, [pc, #168]	; (8000328 <LCD_init+0xb4>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	4a29      	ldr	r2, [pc, #164]	; (8000328 <LCD_init+0xb4>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 800028a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000298:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 800029c:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
        GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
        GPIO_MODER_MODE7); // clear bits for PA
  control_pins->MODER |=
 800029e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a8:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80002ac:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 80002b0:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
       GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
       GPIO_MODER_MODE7_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 80002b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002bc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80002c0:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4 |
        GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
  control_pins->OSPEEDR |=
 80002c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002cc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80002d0:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
 80002d4:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED3_Pos) | (3 << GPIO_OSPEEDR_OSPEED4_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED5_Pos) | (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED7_Pos));
  control_pins->BRR =
 80002d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002da:	22fe      	movs	r2, #254	; 0xfe
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 80002de:	4811      	ldr	r0, [pc, #68]	; (8000324 <LCD_init+0xb0>)
 80002e0:	f7ff ff9a 	bl	8000218 <delay_us>
  command(0x30);
 80002e4:	2030      	movs	r0, #48	; 0x30
 80002e6:	f000 f83b 	bl	8000360 <command>
  delay_us(100);
 80002ea:	2064      	movs	r0, #100	; 0x64
 80002ec:	f7ff ff94 	bl	8000218 <delay_us>
  command(0x30);
 80002f0:	2030      	movs	r0, #48	; 0x30
 80002f2:	f000 f835 	bl	8000360 <command>
  delay_us(100);
 80002f6:	2064      	movs	r0, #100	; 0x64
 80002f8:	f7ff ff8e 	bl	8000218 <delay_us>
  command(0x30);
 80002fc:	2030      	movs	r0, #48	; 0x30
 80002fe:	f000 f82f 	bl	8000360 <command>
  delay_us(100);
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f7ff ff88 	bl	8000218 <delay_us>
  command(0x20);
 8000308:	2020      	movs	r0, #32
 800030a:	f000 f829 	bl	8000360 <command>
  delay_us(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f7ff ff82 	bl	8000218 <delay_us>
  command(0x02);
 8000314:	2002      	movs	r0, #2
 8000316:	f000 f823 	bl	8000360 <command>
  delay_us(100);
 800031a:	2064      	movs	r0, #100	; 0x64
 800031c:	f7ff ff7c 	bl	8000218 <delay_us>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	000186a0 	.word	0x000186a0
 8000328:	40021000 	.word	0x40021000

0800032c <Nybble>:

void Nybble() {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000334:	2208      	movs	r2, #8
 8000336:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 8000338:	2032      	movs	r0, #50	; 0x32
 800033a:	f7ff ff6d 	bl	8000218 <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 800033e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000342:	2208      	movs	r2, #8
 8000344:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 8000346:	2032      	movs	r0, #50	; 0x32
 8000348:	f7ff ff66 	bl	8000218 <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 800034c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800035a:	6153      	str	r3, [r2, #20]
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}

08000360 <command>:

void command(uint8_t command) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	091b      	lsrs	r3, r3, #4
 800036e:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000370:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000374:	2206      	movs	r2, #6
 8000376:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	e019      	b.n	80003b2 <command+0x52>
    if ((command2 >> i) & 0x01) {
 800037e:	7bfa      	ldrb	r2, [r7, #15]
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	fa42 f303 	asr.w	r3, r2, r3
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d007      	beq.n	800039e <command+0x3e>
      control_pins->BSRR = GPIO_Pin[i];
 800038e:	4a26      	ldr	r2, [pc, #152]	; (8000428 <command+0xc8>)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039a:	619a      	str	r2, [r3, #24]
 800039c:	e006      	b.n	80003ac <command+0x4c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 800039e:	4a22      	ldr	r2, [pc, #136]	; (8000428 <command+0xc8>)
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	3301      	adds	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	dde2      	ble.n	800037e <command+0x1e>
    }
  }

  delay_us(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003bc:	f7ff ff2c 	bl	8000218 <delay_us>
  Nybble(); // Send pulse
 80003c0:	f7ff ffb4 	bl	800032c <Nybble>

  for (int i = 0; i < 4; i++) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
 80003c8:	e019      	b.n	80003fe <command+0x9e>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	fa42 f303 	asr.w	r3, r2, r3
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d007      	beq.n	80003ea <command+0x8a>
      control_pins->BSRR = GPIO_Pin[i];
 80003da:	4a13      	ldr	r2, [pc, #76]	; (8000428 <command+0xc8>)
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e6:	619a      	str	r2, [r3, #24]
 80003e8:	e006      	b.n	80003f8 <command+0x98>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80003ea:	4a0f      	ldr	r2, [pc, #60]	; (8000428 <command+0xc8>)
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	3301      	adds	r3, #1
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	2b03      	cmp	r3, #3
 8000402:	dde2      	ble.n	80003ca <command+0x6a>
    }
  }
  delay_us(1000);
 8000404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000408:	f7ff ff06 	bl	8000218 <delay_us>
  Nybble();                                    // Send pulse
 800040c:	f7ff ff8e 	bl	800032c <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800041a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800041e:	6153      	str	r3, [r2, #20]
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000000 	.word	0x20000000

0800042c <write>:

void write(char letter) {  //write 1 character on the LCD display
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 8000440:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000444:	2202      	movs	r2, #2
 8000446:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	2204      	movs	r2, #4
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e019      	b.n	800048a <write+0x5e>
    if ((c2 >> i) & 0x01) {
 8000456:	7bba      	ldrb	r2, [r7, #14]
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	fa42 f303 	asr.w	r3, r2, r3
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	2b00      	cmp	r3, #0
 8000464:	d007      	beq.n	8000476 <write+0x4a>
      control_pins->BSRR = GPIO_Pin[i];
 8000466:	4a28      	ldr	r2, [pc, #160]	; (8000508 <write+0xdc>)
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800046e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000472:	619a      	str	r2, [r3, #24]
 8000474:	e006      	b.n	8000484 <write+0x58>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000476:	4a24      	ldr	r2, [pc, #144]	; (8000508 <write+0xdc>)
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800047e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000482:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	3301      	adds	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	2b03      	cmp	r3, #3
 800048e:	dde2      	ble.n	8000456 <write+0x2a>
    }
  }

  delay_us(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000494:	f7ff fec0 	bl	8000218 <delay_us>
  Nybble(); //send pulse
 8000498:	f7ff ff48 	bl	800032c <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	e019      	b.n	80004d6 <write+0xaa>
    if ((c >> i) & 0x01) {
 80004a2:	7bfa      	ldrb	r2, [r7, #15]
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	fa42 f303 	asr.w	r3, r2, r3
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d007      	beq.n	80004c2 <write+0x96>
      control_pins->BSRR = GPIO_Pin[i];
 80004b2:	4a15      	ldr	r2, [pc, #84]	; (8000508 <write+0xdc>)
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004be:	619a      	str	r2, [r3, #24]
 80004c0:	e006      	b.n	80004d0 <write+0xa4>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80004c2:	4a11      	ldr	r2, [pc, #68]	; (8000508 <write+0xdc>)
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	3301      	adds	r3, #1
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	dde2      	ble.n	80004a2 <write+0x76>
    }
  }
  delay_us(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e0:	f7ff fe9a 	bl	8000218 <delay_us>
  Nybble(); //send pulse
 80004e4:	f7ff ff22 	bl	800032c <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 80004e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ec:	2202      	movs	r2, #2
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 80004f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004fe:	6153      	str	r3, [r2, #20]
}
 8000500:	bf00      	nop
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000000 	.word	0x20000000

0800050c <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d103      	bne.n	800052a <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	3b80      	subs	r3, #128	; 0x80
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e002      	b.n	8000530 <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	3b40      	subs	r3, #64	; 0x40
 800052e:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff14 	bl	8000360 <command>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	e00c      	b.n	8000568 <str_write+0x28>
    write(str[i]);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4413      	add	r3, r2
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff68 	bl	800042c <write>
    delay_us(100);
 800055c:	2064      	movs	r0, #100	; 0x64
 800055e:	f7ff fe5b 	bl	8000218 <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1ec      	bne.n	800054e <str_write+0xe>
  }
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <main>:
#include "lcd.h"
#include <stdint.h>

void SystemClock_Config(void);

int main(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af00      	add	r7, sp, #0
  // variable declarations
  int random_number;
  int reset_state = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
  int react_state = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	633b      	str	r3, [r7, #48]	; 0x30
  int display_state = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  int start_time = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  int end_time = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  int elapsed_time = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28

  // inits
  HAL_Init();
 800059e:	f000 fa84 	bl	8000aaa <HAL_Init>
  SystemClock_Config();
 80005a2:	f000 f9ad 	bl	8000900 <SystemClock_Config>
  SysTick_Init();
 80005a6:	f7ff fe21 	bl	80001ec <SysTick_Init>
  LCD_init();
 80005aa:	f7ff fe63 	bl	8000274 <LCD_init>

  // clocks
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 80005ae:	4bad      	ldr	r3, [pc, #692]	; (8000864 <main+0x2e4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4aac      	ldr	r2, [pc, #688]	; (8000864 <main+0x2e4>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 80005ba:	4baa      	ldr	r3, [pc, #680]	; (8000864 <main+0x2e4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4aa9      	ldr	r2, [pc, #676]	; (8000864 <main+0x2e4>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;    // RNG clock init
 80005c6:	4ba7      	ldr	r3, [pc, #668]	; (8000864 <main+0x2e4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4aa6      	ldr	r2, [pc, #664]	; (8000864 <main+0x2e4>)
 80005cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->CRRCR |= (RCC_CRRCR_HSI48ON);    // HSI clock init
 80005d2:	4ba4      	ldr	r3, [pc, #656]	; (8000864 <main+0x2e4>)
 80005d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005d8:	4aa2      	ldr	r2, [pc, #648]	; (8000864 <main+0x2e4>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // TIM2 init
 80005e2:	4ba0      	ldr	r3, [pc, #640]	; (8000864 <main+0x2e4>)
 80005e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e6:	4a9f      	ldr	r2, [pc, #636]	; (8000864 <main+0x2e4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6593      	str	r3, [r2, #88]	; 0x58

  TIM2->ARR = 0xFFFFFFFF;   // Max auto-reload value for 32-bit timer
 80005ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f2:	f04f 32ff 	mov.w	r2, #4294967295
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CR1 |= TIM_CR1_CEN; // Start TIM2
 80005f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]

  GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 8000608:	4b97      	ldr	r3, [pc, #604]	; (8000868 <main+0x2e8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a96      	ldr	r2, [pc, #600]	; (8000868 <main+0x2e8>)
 800060e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 8000614:	4b94      	ldr	r3, [pc, #592]	; (8000868 <main+0x2e8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a93      	ldr	r2, [pc, #588]	; (8000868 <main+0x2e8>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6013      	str	r3, [r2, #0]

  GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 8000620:	4b92      	ldr	r3, [pc, #584]	; (800086c <main+0x2ec>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a91      	ldr	r2, [pc, #580]	; (800086c <main+0x2ec>)
 8000626:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800062a:	6013      	str	r3, [r2, #0]
  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 800062c:	4b8f      	ldr	r3, [pc, #572]	; (800086c <main+0x2ec>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a8e      	ldr	r2, [pc, #568]	; (800086c <main+0x2ec>)
 8000632:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000636:	60d3      	str	r3, [r2, #12]
  GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 8000638:	4b8c      	ldr	r3, [pc, #560]	; (800086c <main+0x2ec>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a8b      	ldr	r2, [pc, #556]	; (800086c <main+0x2ec>)
 800063e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000642:	60d3      	str	r3, [r2, #12]

  RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE); // RNG turn on
 8000644:	4b8a      	ldr	r3, [pc, #552]	; (8000870 <main+0x2f0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a89      	ldr	r2, [pc, #548]	; (8000870 <main+0x2f0>)
 800064a:	f043 030c 	orr.w	r3, r3, #12
 800064e:	6013      	str	r3, [r2, #0]

  delay_us(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f7ff fde1 	bl	8000218 <delay_us>
  str_write("EE 329 A4 REACT ");
 8000656:	4887      	ldr	r0, [pc, #540]	; (8000874 <main+0x2f4>)
 8000658:	f7ff ff72 	bl	8000540 <str_write>
  delay_us(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f7ff fddb 	bl	8000218 <delay_us>
  lcd_set_cursor_position(1, 0); // set cursor to second row, first column
 8000662:	2100      	movs	r1, #0
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff ff51 	bl	800050c <lcd_set_cursor_position>
  delay_us(100);
 800066a:	2064      	movs	r0, #100	; 0x64
 800066c:	f7ff fdd4 	bl	8000218 <delay_us>
  str_write("PUSH SW TO TRIG ");
 8000670:	4881      	ldr	r0, [pc, #516]	; (8000878 <main+0x2f8>)
 8000672:	f7ff ff65 	bl	8000540 <str_write>
  while (1) {
    if (reset_state) { // Reset state: waiting for the button press to start the
 8000676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00f      	beq.n	800069c <main+0x11c>
                       // reaction timer
      GPIOB->BRR = GPIO_PIN_7;
 800067c:	4b7a      	ldr	r3, [pc, #488]	; (8000868 <main+0x2e8>)
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
      if (GPIOC->IDR & GPIO_IDR_ID13) { // Check if the button is pressed
 8000682:	4b7a      	ldr	r3, [pc, #488]	; (800086c <main+0x2ec>)
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <main+0x11c>
        reset_state = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
        react_state = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
        delay_us(10000000);
 8000696:	4879      	ldr	r0, [pc, #484]	; (800087c <main+0x2fc>)
 8000698:	f7ff fdbe 	bl	8000218 <delay_us>
      }
    }

    if (react_state) { // React state: waiting for the user's reaction to a
 800069c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d027      	beq.n	80006f2 <main+0x172>
                       // randomly timed LED
      while (!(RNG->SR & RNG_SR_DRDY))
 80006a2:	bf00      	nop
 80006a4:	4b72      	ldr	r3, [pc, #456]	; (8000870 <main+0x2f0>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f9      	beq.n	80006a4 <main+0x124>
        ; // Generate a random number using the hardware random number generator
      random_number = RNG->DR;
 80006b0:	4b6f      	ldr	r3, [pc, #444]	; (8000870 <main+0x2f0>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	61fb      	str	r3, [r7, #28]
      delay_us(random_number & 0xFF); // Wait for a random amount of time
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdac 	bl	8000218 <delay_us>
      start_time = TIM2->CNT;
 80006c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
      GPIOB->BSRR = GPIO_PIN_7;
 80006c8:	4b67      	ldr	r3, [pc, #412]	; (8000868 <main+0x2e8>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	619a      	str	r2, [r3, #24]
      while (1) {
        if (GPIOC->IDR & GPIO_IDR_ID13) { // Wait for the button press and
 80006ce:	4b67      	ldr	r3, [pc, #412]	; (800086c <main+0x2ec>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f9      	beq.n	80006ce <main+0x14e>
                                          // calculate the elapsed time
          end_time = TIM2->CNT;
 80006da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e0:	623b      	str	r3, [r7, #32]
          elapsed_time = end_time - start_time;
 80006e2:	6a3a      	ldr	r2, [r7, #32]
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
          react_state = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
          display_state = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
        }
      }
    }

    if (display_state) { // Display state: show the elapsed time on the LCD
 80006f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0be      	beq.n	8000676 <main+0xf6>
      // Turn off LED
      GPIOB->BRR = GPIO_PIN_7;
 80006f8:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <main+0x2e8>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28

      // Set cursor position and display the "TIME =" message
      lcd_set_cursor_position(1, 0);
 80006fe:	2100      	movs	r1, #0
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ff03 	bl	800050c <lcd_set_cursor_position>
      str_write("TIME = ");
 8000706:	485e      	ldr	r0, [pc, #376]	; (8000880 <main+0x300>)
 8000708:	f7ff ff1a 	bl	8000540 <str_write>

      // Convert elapsed time to milliseconds
      elapsed_time = elapsed_time / 4000;
 800070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070e:	4a5d      	ldr	r2, [pc, #372]	; (8000884 <main+0x304>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	1212      	asrs	r2, r2, #8
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28

      if (elapsed_time <
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000722:	da40      	bge.n	80007a6 <main+0x226>
          1000) { // Display the elapsed time for less than 1000 ms
        char str[4];
        int milliseconds = elapsed_time;
 8000724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000726:	613b      	str	r3, [r7, #16]

        // Clear the previous time displayed and write "0."
        lcd_set_cursor_position(1, 7);
 8000728:	2107      	movs	r1, #7
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff feee 	bl	800050c <lcd_set_cursor_position>
        delay_us(100);
 8000730:	2064      	movs	r0, #100	; 0x64
 8000732:	f7ff fd71 	bl	8000218 <delay_us>
        str_write("          ");
 8000736:	4854      	ldr	r0, [pc, #336]	; (8000888 <main+0x308>)
 8000738:	f7ff ff02 	bl	8000540 <str_write>
        lcd_set_cursor_position(1, 7);
 800073c:	2107      	movs	r1, #7
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fee4 	bl	800050c <lcd_set_cursor_position>
        str_write("0.");
 8000744:	4851      	ldr	r0, [pc, #324]	; (800088c <main+0x30c>)
 8000746:	f7ff fefb 	bl	8000540 <str_write>
        delay_us(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f7ff fd64 	bl	8000218 <delay_us>

        // Convert milliseconds to string and display
        itoa(milliseconds, str, 10);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	220a      	movs	r2, #10
 8000756:	4619      	mov	r1, r3
 8000758:	6938      	ldr	r0, [r7, #16]
 800075a:	f001 f9a7 	bl	8001aac <itoa>
        if (milliseconds < 10) {
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	2b09      	cmp	r3, #9
 8000762:	dc08      	bgt.n	8000776 <main+0x1f6>
          str_write("00");
 8000764:	484a      	ldr	r0, [pc, #296]	; (8000890 <main+0x310>)
 8000766:	f7ff feeb 	bl	8000540 <str_write>
          str_write(str);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fee6 	bl	8000540 <str_write>
 8000774:	e010      	b.n	8000798 <main+0x218>
        } else if (milliseconds < 100) {
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	2b63      	cmp	r3, #99	; 0x63
 800077a:	dc08      	bgt.n	800078e <main+0x20e>
          str_write("0");
 800077c:	4845      	ldr	r0, [pc, #276]	; (8000894 <main+0x314>)
 800077e:	f7ff fedf 	bl	8000540 <str_write>
          str_write(str);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff feda 	bl	8000540 <str_write>
 800078c:	e004      	b.n	8000798 <main+0x218>
        } else {
          str_write(str);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fed4 	bl	8000540 <str_write>
        }

        // Display the "s" (seconds) unit
        delay_us(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f7ff fd3d 	bl	8000218 <delay_us>
        str_write("s");
 800079e:	483e      	ldr	r0, [pc, #248]	; (8000898 <main+0x318>)
 80007a0:	f7ff fece 	bl	8000540 <str_write>
 80007a4:	e086      	b.n	80008b4 <main+0x334>

      } else if (elapsed_time < 10000) { // 10 seconds is 10000ms
 80007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80007ac:	4293      	cmp	r3, r2
 80007ae:	dc77      	bgt.n	80008a0 <main+0x320>
        char str[5];
        int seconds = elapsed_time / 1000;
 80007b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <main+0x304>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	1192      	asrs	r2, r2, #6
 80007ba:	17db      	asrs	r3, r3, #31
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	61bb      	str	r3, [r7, #24]
        int milliseconds = elapsed_time % 1000;
 80007c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c2:	4a30      	ldr	r2, [pc, #192]	; (8000884 <main+0x304>)
 80007c4:	fb82 1203 	smull	r1, r2, r2, r3
 80007c8:	1191      	asrs	r1, r2, #6
 80007ca:	17da      	asrs	r2, r3, #31
 80007cc:	1a8a      	subs	r2, r1, r2
 80007ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007d2:	fb01 f202 	mul.w	r2, r1, r2
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	617b      	str	r3, [r7, #20]

        // Clear the previous time displayed
        lcd_set_cursor_position(1, 7);
 80007da:	2107      	movs	r1, #7
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fe95 	bl	800050c <lcd_set_cursor_position>
        delay_us(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f7ff fd18 	bl	8000218 <delay_us>
        str_write("          ");
 80007e8:	4827      	ldr	r0, [pc, #156]	; (8000888 <main+0x308>)
 80007ea:	f7ff fea9 	bl	8000540 <str_write>
        lcd_set_cursor_position(1, 7);
 80007ee:	2107      	movs	r1, #7
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fe8b 	bl	800050c <lcd_set_cursor_position>

        // Display the seconds part
        itoa(seconds, str, 10);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	220a      	movs	r2, #10
 80007fa:	4619      	mov	r1, r3
 80007fc:	69b8      	ldr	r0, [r7, #24]
 80007fe:	f001 f955 	bl	8001aac <itoa>
        str_write(str);
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe9b 	bl	8000540 <str_write>
        delay_us(100);
 800080a:	2064      	movs	r0, #100	; 0x64
 800080c:	f7ff fd04 	bl	8000218 <delay_us>
        str_write(".");
 8000810:	4822      	ldr	r0, [pc, #136]	; (800089c <main+0x31c>)
 8000812:	f7ff fe95 	bl	8000540 <str_write>

        // Display the milliseconds part
        itoa(milliseconds, str, 10);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	220a      	movs	r2, #10
 800081a:	4619      	mov	r1, r3
 800081c:	6978      	ldr	r0, [r7, #20]
 800081e:	f001 f945 	bl	8001aac <itoa>
        if (milliseconds < 10) {
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	2b09      	cmp	r3, #9
 8000826:	dc07      	bgt.n	8000838 <main+0x2b8>
          str_write("00");
 8000828:	4819      	ldr	r0, [pc, #100]	; (8000890 <main+0x310>)
 800082a:	f7ff fe89 	bl	8000540 <str_write>
          str_write(str);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe85 	bl	8000540 <str_write>
 8000836:	e00e      	b.n	8000856 <main+0x2d6>
        } else if (milliseconds < 100) {
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	2b63      	cmp	r3, #99	; 0x63
 800083c:	dc07      	bgt.n	800084e <main+0x2ce>
          str_write("0");
 800083e:	4815      	ldr	r0, [pc, #84]	; (8000894 <main+0x314>)
 8000840:	f7ff fe7e 	bl	8000540 <str_write>
          str_write(str);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe7a 	bl	8000540 <str_write>
 800084c:	e003      	b.n	8000856 <main+0x2d6>
        } else {
          str_write(str);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe75 	bl	8000540 <str_write>
        }

        // Display the "s" (seconds) unit
        delay_us(100);
 8000856:	2064      	movs	r0, #100	; 0x64
 8000858:	f7ff fcde 	bl	8000218 <delay_us>
        str_write("s");
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <main+0x318>)
 800085e:	f7ff fe6f 	bl	8000540 <str_write>
 8000862:	e027      	b.n	80008b4 <main+0x334>
 8000864:	40021000 	.word	0x40021000
 8000868:	48000400 	.word	0x48000400
 800086c:	48000800 	.word	0x48000800
 8000870:	50060800 	.word	0x50060800
 8000874:	08001b5c 	.word	0x08001b5c
 8000878:	08001b70 	.word	0x08001b70
 800087c:	00989680 	.word	0x00989680
 8000880:	08001b84 	.word	0x08001b84
 8000884:	10624dd3 	.word	0x10624dd3
 8000888:	08001b8c 	.word	0x08001b8c
 800088c:	08001b98 	.word	0x08001b98
 8000890:	08001b9c 	.word	0x08001b9c
 8000894:	08001ba0 	.word	0x08001ba0
 8000898:	08001ba4 	.word	0x08001ba4
 800089c:	08001ba8 	.word	0x08001ba8

      } else { // Display "TIME = 9.999s" if elapsed time is greater than or
               // equal to 10000ms
        lcd_set_cursor_position(1, 0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff fe32 	bl	800050c <lcd_set_cursor_position>
        delay_us(100);
 80008a8:	2064      	movs	r0, #100	; 0x64
 80008aa:	f7ff fcb5 	bl	8000218 <delay_us>
        str_write("TIME = 9.999s");
 80008ae:	4810      	ldr	r0, [pc, #64]	; (80008f0 <main+0x370>)
 80008b0:	f7ff fe46 	bl	8000540 <str_write>
      }

      delay_us(10000000);
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <main+0x374>)
 80008b6:	f7ff fcaf 	bl	8000218 <delay_us>

      // Wait for the button to be pressed to reset the timer
      while (1) {
        if (GPIOC->IDR & GPIO_IDR_ID13) {
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <main+0x378>)
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f9      	beq.n	80008ba <main+0x33a>
          // Reset the timer and states
          elapsed_time = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
          display_state = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          reset_state = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34

          // Display the "PUSH SW TO TRIG" message
          lcd_set_cursor_position(1, 0);
 80008d2:	2100      	movs	r1, #0
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fe19 	bl	800050c <lcd_set_cursor_position>
          delay_us(100);
 80008da:	2064      	movs	r0, #100	; 0x64
 80008dc:	f7ff fc9c 	bl	8000218 <delay_us>
          str_write("PUSH SW TO TRIG ");
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <main+0x37c>)
 80008e2:	f7ff fe2d 	bl	8000540 <str_write>
          delay_us(10000000);
 80008e6:	4803      	ldr	r0, [pc, #12]	; (80008f4 <main+0x374>)
 80008e8:	f7ff fc96 	bl	8000218 <delay_us>

          // Exit the loop
          break;
 80008ec:	bf00      	nop
    if (reset_state) { // Reset state: waiting for the button press to start the
 80008ee:	e6c2      	b.n	8000676 <main+0xf6>
 80008f0:	08001bac 	.word	0x08001bac
 80008f4:	00989680 	.word	0x00989680
 80008f8:	48000800 	.word	0x48000800
 80008fc:	08001b70 	.word	0x08001b70

08000900 <SystemClock_Config>:
      }
    }
  }
}

void SystemClock_Config(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b096      	sub	sp, #88	; 0x58
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2244      	movs	r2, #68	; 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f8ce 	bl	8001ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000922:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000926:	f000 fa29 	bl	8000d7c <HAL_PWREx_ControlVoltageScaling>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x34>
    Error_Handler();
 8000930:	f000 f82c 	bl	800098c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000934:	2310      	movs	r3, #16
 8000936:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000940:	2360      	movs	r3, #96	; 0x60
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fa6b 	bl	8000e28 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x5c>
    Error_Handler();
 8000958:	f000 f818 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800095c:	230f      	movs	r3, #15
 800095e:	603b      	str	r3, [r7, #0]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000970:	463b      	mov	r3, r7
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fe71 	bl	800165c <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x84>
    Error_Handler();
 8000980:	f000 f804 	bl	800098c <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3758      	adds	r7, #88	; 0x58
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	; 0x60
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f892 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a5c:	f7ff ffea 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a86:	f000 ffd5 	bl	8001a34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8a:	f7ff fd79 	bl	8000580 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a9c:	08001c2c 	.word	0x08001c2c
  ldr r2, =_sbss
 8000aa0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aa4:	20000034 	.word	0x20000034

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>

08000aaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f91f 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 f80e 	bl	8000adc <HAL_InitTick>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	71fb      	strb	r3, [r7, #7]
 8000aca:	e001      	b.n	8000ad0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000acc:	f7ff ff64 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_InitTick+0x6c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d023      	beq.n	8000b38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_InitTick+0x70>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_InitTick+0x6c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f91d 	bl	8000d46 <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10f      	bne.n	8000b32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d809      	bhi.n	8000b2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f8f5 	bl	8000d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_InitTick+0x74>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	e007      	b.n	8000b3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	e004      	b.n	8000b3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e001      	b.n	8000b3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	2000000c 	.word	0x2000000c

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000010 	.word	0x20000010
 8000b78:	20000030 	.word	0x20000030

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000030 	.word	0x20000030

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff47 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff5c 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffb0 	bl	8000cb4 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40007000 	.word	0x40007000

08000d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d8a:	d130      	bne.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d98:	d038      	beq.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2232      	movs	r2, #50	; 0x32
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	0c9b      	lsrs	r3, r3, #18
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc0:	e002      	b.n	8000dc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd4:	d102      	bne.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f2      	bne.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de8:	d110      	bne.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e00f      	b.n	8000e0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfa:	d007      	beq.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	431bde83 	.word	0x431bde83

08000e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f000 bc08 	b.w	800164c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e3c:	4b96      	ldr	r3, [pc, #600]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e46:	4b94      	ldr	r3, [pc, #592]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80e4 	beq.w	8001026 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d007      	beq.n	8000e74 <HAL_RCC_OscConfig+0x4c>
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	f040 808b 	bne.w	8000f82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	f040 8087 	bne.w	8000f82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e74:	4b88      	ldr	r3, [pc, #544]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_OscConfig+0x64>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e3df      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1a      	ldr	r2, [r3, #32]
 8000e90:	4b81      	ldr	r3, [pc, #516]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x7e>
 8000e9c:	4b7e      	ldr	r3, [pc, #504]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ea4:	e005      	b.n	8000eb2 <HAL_RCC_OscConfig+0x8a>
 8000ea6:	4b7c      	ldr	r3, [pc, #496]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d223      	bcs.n	8000efe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fd5a 	bl	8001974 <RCC_SetFlashLatencyFromMSIRange>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e3c0      	b.n	800164c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eca:	4b73      	ldr	r3, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a72      	ldr	r2, [pc, #456]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b70      	ldr	r3, [pc, #448]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	496d      	ldr	r1, [pc, #436]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4968      	ldr	r1, [pc, #416]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e025      	b.n	8000f4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efe:	4b66      	ldr	r3, [pc, #408]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a65      	ldr	r2, [pc, #404]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4960      	ldr	r1, [pc, #384]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f1c:	4b5e      	ldr	r3, [pc, #376]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	495b      	ldr	r1, [pc, #364]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fd1a 	bl	8001974 <RCC_SetFlashLatencyFromMSIRange>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e380      	b.n	800164c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f4a:	f000 fc87 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	4950      	ldr	r1, [pc, #320]	; (800109c <HAL_RCC_OscConfig+0x274>)
 8000f5c:	5ccb      	ldrb	r3, [r1, r3]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	fa22 f303 	lsr.w	r3, r2, r3
 8000f66:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_RCC_OscConfig+0x278>)
 8000f68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f6a:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <HAL_RCC_OscConfig+0x27c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fdb4 	bl	8000adc <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d052      	beq.n	8001024 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	e364      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d032      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a42      	ldr	r2, [pc, #264]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fdf1 	bl	8000b7c <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fded 	bl	8000b7c <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e34d      	b.n	800164c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a35      	ldr	r2, [pc, #212]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b33      	ldr	r3, [pc, #204]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4930      	ldr	r1, [pc, #192]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	492b      	ldr	r1, [pc, #172]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
 8000fee:	e01a      	b.n	8001026 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fdbe 	bl	8000b7c <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001004:	f7ff fdba 	bl	8000b7c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e31a      	b.n	800164c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x1dc>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d073      	beq.n	800111a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b08      	cmp	r3, #8
 8001036:	d005      	beq.n	8001044 <HAL_RCC_OscConfig+0x21c>
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d10e      	bne.n	800105c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d10b      	bne.n	800105c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d063      	beq.n	8001118 <HAL_RCC_OscConfig+0x2f0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d15f      	bne.n	8001118 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e2f7      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001064:	d106      	bne.n	8001074 <HAL_RCC_OscConfig+0x24c>
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e025      	b.n	80010c0 <HAL_RCC_OscConfig+0x298>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800107c:	d114      	bne.n	80010a8 <HAL_RCC_OscConfig+0x280>
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a02      	ldr	r2, [pc, #8]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e013      	b.n	80010c0 <HAL_RCC_OscConfig+0x298>
 8001098:	40021000 	.word	0x40021000
 800109c:	08001bbc 	.word	0x08001bbc
 80010a0:	20000008 	.word	0x20000008
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	4ba0      	ldr	r3, [pc, #640]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a9f      	ldr	r2, [pc, #636]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b9d      	ldr	r3, [pc, #628]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a9c      	ldr	r2, [pc, #624]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fd58 	bl	8000b7c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fd54 	bl	8000b7c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e2b4      	b.n	800164c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x2a8>
 80010ee:	e014      	b.n	800111a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fd44 	bl	8000b7c <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fd40 	bl	8000b7c <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e2a0      	b.n	800164c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110a:	4b88      	ldr	r3, [pc, #544]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x2d0>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d060      	beq.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d005      	beq.n	8001138 <HAL_RCC_OscConfig+0x310>
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b0c      	cmp	r3, #12
 8001130:	d119      	bne.n	8001166 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d116      	bne.n	8001166 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001138:	4b7c      	ldr	r3, [pc, #496]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_OscConfig+0x328>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e27d      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	061b      	lsls	r3, r3, #24
 800115e:	4973      	ldr	r1, [pc, #460]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001164:	e040      	b.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d023      	beq.n	80011b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116e:	4b6f      	ldr	r3, [pc, #444]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6e      	ldr	r2, [pc, #440]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff fcff 	bl	8000b7c <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fcfb 	bl	8000b7c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e25b      	b.n	800164c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b62      	ldr	r3, [pc, #392]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	061b      	lsls	r3, r3, #24
 80011ae:	495f      	ldr	r1, [pc, #380]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
 80011b4:	e018      	b.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c2:	f7ff fcdb 	bl	8000b7c <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fcd7 	bl	8000b7c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e237      	b.n	800164c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d03c      	beq.n	800126e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01c      	beq.n	8001236 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fc:	4b4b      	ldr	r3, [pc, #300]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001202:	4a4a      	ldr	r2, [pc, #296]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fcb6 	bl	8000b7c <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fcb2 	bl	8000b7c <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e212      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ef      	beq.n	8001214 <HAL_RCC_OscConfig+0x3ec>
 8001234:	e01b      	b.n	800126e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123c:	4a3b      	ldr	r2, [pc, #236]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001246:	f7ff fc99 	bl	8000b7c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124e:	f7ff fc95 	bl	8000b7c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e1f5      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ef      	bne.n	800124e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80a6 	beq.w	80013c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10d      	bne.n	80012a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a4:	2301      	movs	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d118      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc5c 	bl	8000b7c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c8:	f7ff fc58 	bl	8000b7c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1b8      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <HAL_RCC_OscConfig+0x4d8>
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80012f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012fe:	e029      	b.n	8001354 <HAL_RCC_OscConfig+0x52c>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d115      	bne.n	8001334 <HAL_RCC_OscConfig+0x50c>
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800130a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001328:	e014      	b.n	8001354 <HAL_RCC_OscConfig+0x52c>
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	40007000 	.word	0x40007000
 8001334:	4b9d      	ldr	r3, [pc, #628]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133a:	4a9c      	ldr	r2, [pc, #624]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001344:	4b99      	ldr	r3, [pc, #612]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134a:	4a98      	ldr	r2, [pc, #608]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d016      	beq.n	800138a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fc0e 	bl	8000b7c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fc0a 	bl	8000b7c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e168      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137a:	4b8c      	ldr	r3, [pc, #560]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800137c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ed      	beq.n	8001364 <HAL_RCC_OscConfig+0x53c>
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff fbf7 	bl	8000b7c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fbf3 	bl	8000b7c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e151      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a8:	4b80      	ldr	r3, [pc, #512]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80013aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ed      	bne.n	8001392 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013bc:	4b7b      	ldr	r3, [pc, #492]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	4a7a      	ldr	r2, [pc, #488]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80013c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d03c      	beq.n	800144e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01c      	beq.n	8001416 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013dc:	4b73      	ldr	r3, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80013de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013e2:	4a72      	ldr	r2, [pc, #456]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fbc6 	bl	8000b7c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013f4:	f7ff fbc2 	bl	8000b7c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e122      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ef      	beq.n	80013f4 <HAL_RCC_OscConfig+0x5cc>
 8001414:	e01b      	b.n	800144e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800141c:	4a63      	ldr	r2, [pc, #396]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fba9 	bl	8000b7c <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800142e:	f7ff fba5 	bl	8000b7c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e105      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001440:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ef      	bne.n	800142e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80f9 	beq.w	800164a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	2b02      	cmp	r3, #2
 800145e:	f040 80cf 	bne.w	8001600 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001462:	4b52      	ldr	r3, [pc, #328]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0203 	and.w	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	429a      	cmp	r2, r3
 8001474:	d12c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	3b01      	subs	r3, #1
 8001482:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d123      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d11b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d113      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d109      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	3b01      	subs	r3, #1
 80014ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d071      	beq.n	80015b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d068      	beq.n	80015a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014d6:	4b35      	ldr	r3, [pc, #212]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0ac      	b.n	800164c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 80014f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014fe:	f7ff fb3d 	bl	8000b7c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb39 	bl	8000b7c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e099      	b.n	800164c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x788>)
 800152a:	4013      	ands	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001534:	3a01      	subs	r2, #1
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	4311      	orrs	r1, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800153e:	0212      	lsls	r2, r2, #8
 8001540:	4311      	orrs	r1, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001546:	0852      	lsrs	r2, r2, #1
 8001548:	3a01      	subs	r2, #1
 800154a:	0552      	lsls	r2, r2, #21
 800154c:	4311      	orrs	r1, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001552:	0852      	lsrs	r2, r2, #1
 8001554:	3a01      	subs	r2, #1
 8001556:	0652      	lsls	r2, r2, #25
 8001558:	4311      	orrs	r1, r2
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800155e:	06d2      	lsls	r2, r2, #27
 8001560:	430a      	orrs	r2, r1
 8001562:	4912      	ldr	r1, [pc, #72]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001564:	4313      	orrs	r3, r2
 8001566:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800157a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001580:	f7ff fafc 	bl	8000b7c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff faf8 	bl	8000b7c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e058      	b.n	800164c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_RCC_OscConfig+0x784>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015a6:	e050      	b.n	800164a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e04f      	b.n	800164c <HAL_RCC_OscConfig+0x824>
 80015ac:	40021000 	.word	0x40021000
 80015b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d144      	bne.n	800164a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a23      	ldr	r2, [pc, #140]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 80015c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 80015d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015d8:	f7ff fad0 	bl	8000b7c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff facc 	bl	8000b7c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e02c      	b.n	800164c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x7b8>
 80015fe:	e024      	b.n	800164a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d01f      	beq.n	8001646 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 800160c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fab3 	bl	8000b7c <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff faaf 	bl	8000b7c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e00f      	b.n	800164c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	4905      	ldr	r1, [pc, #20]	; (8001654 <HAL_RCC_OscConfig+0x82c>)
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_OscConfig+0x830>)
 8001640:	4013      	ands	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
 8001644:	e001      	b.n	800164a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	feeefffc 	.word	0xfeeefffc

0800165c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0e7      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d910      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b72      	ldr	r3, [pc, #456]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0207 	bic.w	r2, r3, #7
 8001686:	4970      	ldr	r1, [pc, #448]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b6e      	ldr	r3, [pc, #440]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0cf      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d010      	beq.n	80016ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d908      	bls.n	80016ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4960      	ldr	r1, [pc, #384]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04c      	beq.n	8001774 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e2:	4b5a      	ldr	r3, [pc, #360]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d121      	bne.n	8001732 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0a6      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fa:	4b54      	ldr	r3, [pc, #336]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d115      	bne.n	8001732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e09a      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e08e      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001722:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e086      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f023 0203 	bic.w	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4943      	ldr	r1, [pc, #268]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001744:	f7ff fa1a 	bl	8000b7c <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	e00a      	b.n	8001762 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	f7ff fa16 	bl	8000b7c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e06e      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	4b3a      	ldr	r3, [pc, #232]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 020c 	and.w	r2, r3, #12
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	429a      	cmp	r2, r3
 8001772:	d1eb      	bne.n	800174c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800178c:	429a      	cmp	r2, r3
 800178e:	d208      	bcs.n	80017a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	492b      	ldr	r1, [pc, #172]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d210      	bcs.n	80017d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 0207 	bic.w	r2, r3, #7
 80017b8:	4923      	ldr	r1, [pc, #140]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_RCC_ClockConfig+0x1ec>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e036      	b.n	8001840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	4918      	ldr	r1, [pc, #96]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d009      	beq.n	8001810 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4910      	ldr	r1, [pc, #64]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001810:	f000 f824 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	490b      	ldr	r1, [pc, #44]	; (8001850 <HAL_RCC_ClockConfig+0x1f4>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 800182e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1fc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f951 	bl	8000adc <HAL_InitTick>
 800183a:	4603      	mov	r3, r0
 800183c:	72fb      	strb	r3, [r7, #11]

  return status;
 800183e:	7afb      	ldrb	r3, [r7, #11]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40022000 	.word	0x40022000
 800184c:	40021000 	.word	0x40021000
 8001850:	08001bbc 	.word	0x08001bbc
 8001854:	20000008 	.word	0x20000008
 8001858:	2000000c 	.word	0x2000000c

0800185c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x34>
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d121      	bne.n	80018ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d11e      	bne.n	80018ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e005      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018b8:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10d      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d102      	bne.n	80018da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_GetSysClockFreq+0x110>)
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	e004      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_RCC_GetSysClockFreq+0x114>)
 80018e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d134      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0xa6>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d003      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0xac>
 8001900:	e005      	b.n	800190e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_RCC_GetSysClockFreq+0x110>)
 8001904:	617b      	str	r3, [r7, #20]
      break;
 8001906:	e005      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_GetSysClockFreq+0x114>)
 800190a:	617b      	str	r3, [r7, #20]
      break;
 800190c:	e002      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	617b      	str	r3, [r7, #20]
      break;
 8001912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	3301      	adds	r3, #1
 8001920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	fb03 f202 	mul.w	r2, r3, r2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	0e5b      	lsrs	r3, r3, #25
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	3301      	adds	r3, #1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001954:	69bb      	ldr	r3, [r7, #24]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	08001bcc 	.word	0x08001bcc
 800196c:	00f42400 	.word	0x00f42400
 8001970:	007a1200 	.word	0x007a1200

08001974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800198c:	f7ff f9e8 	bl	8000d60 <HAL_PWREx_GetVoltageRange>
 8001990:	6178      	str	r0, [r7, #20]
 8001992:	e014      	b.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019ac:	f7ff f9d8 	bl	8000d60 <HAL_PWREx_GetVoltageRange>
 80019b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c4:	d10b      	bne.n	80019de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d919      	bls.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2ba0      	cmp	r3, #160	; 0xa0
 80019d0:	d902      	bls.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019d2:	2302      	movs	r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e013      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e010      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d902      	bls.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019e4:	2303      	movs	r3, #3
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e00a      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b80      	cmp	r3, #128	; 0x80
 80019ee:	d102      	bne.n	80019f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	e004      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b70      	cmp	r3, #112	; 0x70
 80019fa:	d101      	bne.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019fc:	2301      	movs	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 0207 	bic.w	r2, r3, #7
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40022000 	.word	0x40022000

08001a34 <__libc_init_array>:
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	4d0d      	ldr	r5, [pc, #52]	; (8001a6c <__libc_init_array+0x38>)
 8001a38:	4c0d      	ldr	r4, [pc, #52]	; (8001a70 <__libc_init_array+0x3c>)
 8001a3a:	1b64      	subs	r4, r4, r5
 8001a3c:	10a4      	asrs	r4, r4, #2
 8001a3e:	2600      	movs	r6, #0
 8001a40:	42a6      	cmp	r6, r4
 8001a42:	d109      	bne.n	8001a58 <__libc_init_array+0x24>
 8001a44:	4d0b      	ldr	r5, [pc, #44]	; (8001a74 <__libc_init_array+0x40>)
 8001a46:	4c0c      	ldr	r4, [pc, #48]	; (8001a78 <__libc_init_array+0x44>)
 8001a48:	f000 f87c 	bl	8001b44 <_init>
 8001a4c:	1b64      	subs	r4, r4, r5
 8001a4e:	10a4      	asrs	r4, r4, #2
 8001a50:	2600      	movs	r6, #0
 8001a52:	42a6      	cmp	r6, r4
 8001a54:	d105      	bne.n	8001a62 <__libc_init_array+0x2e>
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a5c:	4798      	blx	r3
 8001a5e:	3601      	adds	r6, #1
 8001a60:	e7ee      	b.n	8001a40 <__libc_init_array+0xc>
 8001a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a66:	4798      	blx	r3
 8001a68:	3601      	adds	r6, #1
 8001a6a:	e7f2      	b.n	8001a52 <__libc_init_array+0x1e>
 8001a6c:	08001c24 	.word	0x08001c24
 8001a70:	08001c24 	.word	0x08001c24
 8001a74:	08001c24 	.word	0x08001c24
 8001a78:	08001c28 	.word	0x08001c28

08001a7c <__itoa>:
 8001a7c:	1e93      	subs	r3, r2, #2
 8001a7e:	2b22      	cmp	r3, #34	; 0x22
 8001a80:	b510      	push	{r4, lr}
 8001a82:	460c      	mov	r4, r1
 8001a84:	d904      	bls.n	8001a90 <__itoa+0x14>
 8001a86:	2300      	movs	r3, #0
 8001a88:	700b      	strb	r3, [r1, #0]
 8001a8a:	461c      	mov	r4, r3
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	bd10      	pop	{r4, pc}
 8001a90:	2a0a      	cmp	r2, #10
 8001a92:	d109      	bne.n	8001aa8 <__itoa+0x2c>
 8001a94:	2800      	cmp	r0, #0
 8001a96:	da07      	bge.n	8001aa8 <__itoa+0x2c>
 8001a98:	232d      	movs	r3, #45	; 0x2d
 8001a9a:	700b      	strb	r3, [r1, #0]
 8001a9c:	4240      	negs	r0, r0
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4421      	add	r1, r4
 8001aa2:	f000 f80d 	bl	8001ac0 <__utoa>
 8001aa6:	e7f1      	b.n	8001a8c <__itoa+0x10>
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	e7f9      	b.n	8001aa0 <__itoa+0x24>

08001aac <itoa>:
 8001aac:	f7ff bfe6 	b.w	8001a7c <__itoa>

08001ab0 <memset>:
 8001ab0:	4402      	add	r2, r0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d100      	bne.n	8001aba <memset+0xa>
 8001ab8:	4770      	bx	lr
 8001aba:	f803 1b01 	strb.w	r1, [r3], #1
 8001abe:	e7f9      	b.n	8001ab4 <memset+0x4>

08001ac0 <__utoa>:
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	4c1f      	ldr	r4, [pc, #124]	; (8001b40 <__utoa+0x80>)
 8001ac4:	b08b      	sub	sp, #44	; 0x2c
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	466e      	mov	r6, sp
 8001acc:	f104 0c20 	add.w	ip, r4, #32
 8001ad0:	6820      	ldr	r0, [r4, #0]
 8001ad2:	6861      	ldr	r1, [r4, #4]
 8001ad4:	4637      	mov	r7, r6
 8001ad6:	c703      	stmia	r7!, {r0, r1}
 8001ad8:	3408      	adds	r4, #8
 8001ada:	4564      	cmp	r4, ip
 8001adc:	463e      	mov	r6, r7
 8001ade:	d1f7      	bne.n	8001ad0 <__utoa+0x10>
 8001ae0:	7921      	ldrb	r1, [r4, #4]
 8001ae2:	7139      	strb	r1, [r7, #4]
 8001ae4:	1e91      	subs	r1, r2, #2
 8001ae6:	6820      	ldr	r0, [r4, #0]
 8001ae8:	6038      	str	r0, [r7, #0]
 8001aea:	2922      	cmp	r1, #34	; 0x22
 8001aec:	f04f 0100 	mov.w	r1, #0
 8001af0:	d904      	bls.n	8001afc <__utoa+0x3c>
 8001af2:	7019      	strb	r1, [r3, #0]
 8001af4:	460b      	mov	r3, r1
 8001af6:	4618      	mov	r0, r3
 8001af8:	b00b      	add	sp, #44	; 0x2c
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afc:	1e58      	subs	r0, r3, #1
 8001afe:	4684      	mov	ip, r0
 8001b00:	fbb5 f7f2 	udiv	r7, r5, r2
 8001b04:	fb02 5617 	mls	r6, r2, r7, r5
 8001b08:	3628      	adds	r6, #40	; 0x28
 8001b0a:	446e      	add	r6, sp
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8001b12:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8001b16:	462e      	mov	r6, r5
 8001b18:	42b2      	cmp	r2, r6
 8001b1a:	f101 0101 	add.w	r1, r1, #1
 8001b1e:	463d      	mov	r5, r7
 8001b20:	d9ee      	bls.n	8001b00 <__utoa+0x40>
 8001b22:	2200      	movs	r2, #0
 8001b24:	545a      	strb	r2, [r3, r1]
 8001b26:	1919      	adds	r1, r3, r4
 8001b28:	1aa5      	subs	r5, r4, r2
 8001b2a:	42aa      	cmp	r2, r5
 8001b2c:	dae3      	bge.n	8001af6 <__utoa+0x36>
 8001b2e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8001b32:	780e      	ldrb	r6, [r1, #0]
 8001b34:	7006      	strb	r6, [r0, #0]
 8001b36:	3201      	adds	r2, #1
 8001b38:	f801 5901 	strb.w	r5, [r1], #-1
 8001b3c:	e7f4      	b.n	8001b28 <__utoa+0x68>
 8001b3e:	bf00      	nop
 8001b40:	08001bfc 	.word	0x08001bfc

08001b44 <_init>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	bf00      	nop
 8001b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4a:	bc08      	pop	{r3}
 8001b4c:	469e      	mov	lr, r3
 8001b4e:	4770      	bx	lr

08001b50 <_fini>:
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	bf00      	nop
 8001b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b56:	bc08      	pop	{r3}
 8001b58:	469e      	mov	lr, r3
 8001b5a:	4770      	bx	lr
