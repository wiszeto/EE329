
A4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000230c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800252c  0800252c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  0800252c  0800252c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800252c  0800252c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800252c  0800252c  0001252c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000034  08002568  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08002568  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068a0  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179b  00000000  00000000  00026904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  000280a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  00028840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002787e  00000000  00000000  00028f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009889  00000000  00000000  00050786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef6bb  00000000  00000000  0005a00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001496ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c28  00000000  00000000  0014971c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080024a0 	.word	0x080024a0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	080024a0 	.word	0x080024a0

080001ec <SysTick_Init>:
#include "delay.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000248:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <keypad_init>:
static    int cols[3] = {Col1, Col2, Col3}; //corresponds to GPIO pins
static    int rows[4] = {Row1, Row2, Row3, Row4}; //coresponds to GPIO pins
static    int delay_time = 10000;

//This function, configures row, column and keypad pin
void keypad_init() {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

    //Making column pins output mode bits(01)
    COL_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2);
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <keypad_init+0x48>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <keypad_init+0x48>)
 800027e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000282:	6013      	str	r3, [r2, #0]
    COL_PORT->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0);
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <keypad_init+0x48>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <keypad_init+0x48>)
 800028a:	f043 0315 	orr.w	r3, r3, #21
 800028e:	6013      	str	r3, [r2, #0]

    //Making row pins input mode bits(00)
    ROW_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <keypad_init+0x4c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <keypad_init+0x4c>)
 8000296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800029a:	6013      	str	r3, [r2, #0]

    //enable pull-down resistor bits(10)
    ROW_PORT->PUPDR &= (GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <keypad_init+0x4c>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <keypad_init+0x4c>)
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	60d3      	str	r3, [r2, #12]
    ROW_PORT->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <keypad_init+0x4c>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <keypad_init+0x4c>)
 80002ac:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 80002b0:	60d3      	str	r3, [r2, #12]
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	48000400 	.word	0x48000400
 80002c0:	48000c00 	.word	0x48000c00

080002c4 <keypad_read>:

int keypad_read(int cols, int row){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
    COL_PORT -> BSRR = (Col1 |Col2|Col3); //outputs column pins to high
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <keypad_read+0x54>)
 80002d0:	2207      	movs	r2, #7
 80002d2:	619a      	str	r2, [r3, #24]

    //check if key is pressed
    if (ROW_PORT->IDR){
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <keypad_read+0x58>)
 80002d6:	691b      	ldr	r3, [r3, #16]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d017      	beq.n	800030c <keypad_read+0x48>

      //debounce delay
    	for (int delay = 0; delay < delay_time; delay++);
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	e002      	b.n	80002e8 <keypad_read+0x24>
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <keypad_read+0x5c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	dbf7      	blt.n	80002e2 <keypad_read+0x1e>

    	//rechecks if key is presses still for debounce
    	if (ROW_PORT->IDR){
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <keypad_read+0x58>)
 80002f4:	691b      	ldr	r3, [r3, #16]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <keypad_read+0x48>
    		COL_PORT->BRR = (Col1 |Col2|Col3); //turn off columns
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <keypad_read+0x54>)
 80002fc:	2207      	movs	r2, #7
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28

        //returns array position of keypress
        return check_row_col(NUM_OF_COLS, NUM_OF_ROWS);
 8000300:	2104      	movs	r1, #4
 8000302:	2003      	movs	r0, #3
 8000304:	f000 f80e 	bl	8000324 <check_row_col>
 8000308:	4603      	mov	r3, r0
 800030a:	e000      	b.n	800030e <keypad_read+0x4a>
    	}
    }
    return '-';
 800030c:	232d      	movs	r3, #45	; 0x2d
}
 800030e:	4618      	mov	r0, r3
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	48000400 	.word	0x48000400
 800031c:	48000c00 	.word	0x48000c00
 8000320:	2000001c 	.word	0x2000001c

08000324 <check_row_col>:

//iterate through each column and check all rows
int check_row_col(int col, int row){
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
    for (int c=0; c < col; c++){
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e025      	b.n	8000380 <check_row_col+0x5c>
        COL_PORT->BSRR = cols[c]; //turn on the column
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <check_row_col+0x74>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <check_row_col+0x78>)
 800033e:	619a      	str	r2, [r3, #24]
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	e015      	b.n	8000372 <check_row_col+0x4e>
            if (ROW_PORT->IDR & (rows[r])) { //Check if key pressed is in the row
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <check_row_col+0x7c>)
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	4916      	ldr	r1, [pc, #88]	; (80003a4 <check_row_col+0x80>)
 800034c:	68ba      	ldr	r2, [r7, #8]
 800034e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000352:	4013      	ands	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	d009      	beq.n	800036c <check_row_col+0x48>
               return keys[r][c]; //returns array position of keypress
 8000358:	4913      	ldr	r1, [pc, #76]	; (80003a8 <check_row_col+0x84>)
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	4613      	mov	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	4413      	add	r3, r2
 8000362:	18ca      	adds	r2, r1, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	4413      	add	r3, r2
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	e00e      	b.n	800038a <check_row_col+0x66>
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	3301      	adds	r3, #1
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	429a      	cmp	r2, r3
 8000378:	dbe5      	blt.n	8000346 <check_row_col+0x22>
    for (int c=0; c < col; c++){
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3301      	adds	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	dbd5      	blt.n	8000334 <check_row_col+0x10>
            }
        }
    }
    return '-';
 8000388:	232d      	movs	r3, #45	; 0x2d
}
 800038a:	4618      	mov	r0, r3
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000
 800039c:	48000400 	.word	0x48000400
 80003a0:	48000c00 	.word	0x48000c00
 80003a4:	2000000c 	.word	0x2000000c
 80003a8:	080024e0 	.word	0x080024e0

080003ac <LCD_init>:
int LCD_convert_ascii_to_time ( uint8_t asctime );

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  delay_us(100000);
 80003b0:	482a      	ldr	r0, [pc, #168]	; (800045c <LCD_init+0xb0>)
 80003b2:	f7ff ff31 	bl	8000218 <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // enable GPIOA clock on bus
 80003b6:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <LCD_init+0xb4>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a29      	ldr	r2, [pc, #164]	; (8000460 <LCD_init+0xb4>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 80003c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80003d0:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 80003d4:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
        GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
        GPIO_MODER_MODE7); // clear bits for PA
  control_pins->MODER |=
 80003d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e0:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80003e4:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 80003e8:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
       GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
       GPIO_MODER_MODE7_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 80003ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80003f8:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4 |
        GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
  control_pins->OSPEEDR |=
 80003fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000404:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000408:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
 800040c:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED3_Pos) | (3 << GPIO_OSPEEDR_OSPEED4_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED5_Pos) | (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED7_Pos));
  control_pins->BRR =
 800040e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000412:	22fe      	movs	r2, #254	; 0xfe
 8000414:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 8000416:	4811      	ldr	r0, [pc, #68]	; (800045c <LCD_init+0xb0>)
 8000418:	f7ff fefe 	bl	8000218 <delay_us>
  command(0x30);
 800041c:	2030      	movs	r0, #48	; 0x30
 800041e:	f000 f83b 	bl	8000498 <command>
  delay_us(100);
 8000422:	2064      	movs	r0, #100	; 0x64
 8000424:	f7ff fef8 	bl	8000218 <delay_us>
  command(0x30);
 8000428:	2030      	movs	r0, #48	; 0x30
 800042a:	f000 f835 	bl	8000498 <command>
  delay_us(100);
 800042e:	2064      	movs	r0, #100	; 0x64
 8000430:	f7ff fef2 	bl	8000218 <delay_us>
  command(0x30);
 8000434:	2030      	movs	r0, #48	; 0x30
 8000436:	f000 f82f 	bl	8000498 <command>
  delay_us(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f7ff feec 	bl	8000218 <delay_us>
  command(0x20);
 8000440:	2020      	movs	r0, #32
 8000442:	f000 f829 	bl	8000498 <command>
  delay_us(100);
 8000446:	2064      	movs	r0, #100	; 0x64
 8000448:	f7ff fee6 	bl	8000218 <delay_us>
  command(0x02);
 800044c:	2002      	movs	r0, #2
 800044e:	f000 f823 	bl	8000498 <command>
  delay_us(100);
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f7ff fee0 	bl	8000218 <delay_us>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	000186a0 	.word	0x000186a0
 8000460:	40021000 	.word	0x40021000

08000464 <Nybble>:

void Nybble() {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800046c:	2208      	movs	r2, #8
 800046e:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 8000470:	2032      	movs	r0, #50	; 0x32
 8000472:	f7ff fed1 	bl	8000218 <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 8000476:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800047a:	2208      	movs	r2, #8
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 800047e:	2032      	movs	r0, #50	; 0x32
 8000480:	f7ff feca 	bl	8000218 <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000492:	6153      	str	r3, [r2, #20]
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <command>:

void command(uint8_t command) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 80004a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ac:	2206      	movs	r2, #6
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e019      	b.n	80004ea <command+0x52>
    if ((command2 >> i) & 0x01) {
 80004b6:	7bfa      	ldrb	r2, [r7, #15]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	fa42 f303 	asr.w	r3, r2, r3
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d007      	beq.n	80004d6 <command+0x3e>
      control_pins->BSRR = GPIO_Pin[i];
 80004c6:	4a26      	ldr	r2, [pc, #152]	; (8000560 <command+0xc8>)
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	e006      	b.n	80004e4 <command+0x4c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80004d6:	4a22      	ldr	r2, [pc, #136]	; (8000560 <command+0xc8>)
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e2:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	3301      	adds	r3, #1
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	dde2      	ble.n	80004b6 <command+0x1e>
    }
  }

  delay_us(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f7ff fe90 	bl	8000218 <delay_us>
  Nybble(); // Send pulse
 80004f8:	f7ff ffb4 	bl	8000464 <Nybble>

  for (int i = 0; i < 4; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	e019      	b.n	8000536 <command+0x9e>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	fa42 f303 	asr.w	r3, r2, r3
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d007      	beq.n	8000522 <command+0x8a>
      control_pins->BSRR = GPIO_Pin[i];
 8000512:	4a13      	ldr	r2, [pc, #76]	; (8000560 <command+0xc8>)
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800051a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051e:	619a      	str	r2, [r3, #24]
 8000520:	e006      	b.n	8000530 <command+0x98>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000522:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <command+0xc8>)
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800052a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dde2      	ble.n	8000502 <command+0x6a>
    }
  }
  delay_us(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f7ff fe6a 	bl	8000218 <delay_us>
  Nybble();                                    // Send pulse
 8000544:	f7ff ff8e 	bl	8000464 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000556:	6153      	str	r3, [r2, #20]
}
 8000558:	bf00      	nop
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000020 	.word	0x20000020

08000564 <write>:

void write(char letter) {  //write 1 character on the LCD display
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 8000578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800057c:	2202      	movs	r2, #2
 800057e:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	2204      	movs	r2, #4
 8000586:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e019      	b.n	80005c2 <write+0x5e>
    if ((c2 >> i) & 0x01) {
 800058e:	7bba      	ldrb	r2, [r7, #14]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	fa42 f303 	asr.w	r3, r2, r3
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d007      	beq.n	80005ae <write+0x4a>
      control_pins->BSRR = GPIO_Pin[i];
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <write+0xdc>)
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005aa:	619a      	str	r2, [r3, #24]
 80005ac:	e006      	b.n	80005bc <write+0x58>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80005ae:	4a24      	ldr	r2, [pc, #144]	; (8000640 <write+0xdc>)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	3301      	adds	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dde2      	ble.n	800058e <write+0x2a>
    }
  }

  delay_us(1000);
 80005c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005cc:	f7ff fe24 	bl	8000218 <delay_us>
  Nybble(); //send pulse
 80005d0:	f7ff ff48 	bl	8000464 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	e019      	b.n	800060e <write+0xaa>
    if ((c >> i) & 0x01) {
 80005da:	7bfa      	ldrb	r2, [r7, #15]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	fa42 f303 	asr.w	r3, r2, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d007      	beq.n	80005fa <write+0x96>
      control_pins->BSRR = GPIO_Pin[i];
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <write+0xdc>)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f6:	619a      	str	r2, [r3, #24]
 80005f8:	e006      	b.n	8000608 <write+0xa4>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <write+0xdc>)
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	3301      	adds	r3, #1
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	2b03      	cmp	r3, #3
 8000612:	dde2      	ble.n	80005da <write+0x76>
    }
  }
  delay_us(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f7ff fdfe 	bl	8000218 <delay_us>
  Nybble(); //send pulse
 800061c:	f7ff ff22 	bl	8000464 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 8000620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000624:	2202      	movs	r2, #2
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000636:	6153      	str	r3, [r2, #20]
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000020 	.word	0x20000020

08000644 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d103      	bne.n	8000662 <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	3b80      	subs	r3, #128	; 0x80
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e002      	b.n	8000668 <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	3b40      	subs	r3, #64	; 0x40
 8000666:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff14 	bl	8000498 <command>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e00c      	b.n	80006a0 <str_write+0x28>
    write(str[i]);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff68 	bl	8000564 <write>
    delay_us(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f7ff fdbf 	bl	8000218 <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1ec      	bne.n	8000686 <str_write+0xe>
  }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <main>:

void SystemClock_Config(void);
static void MX_RNG_Init(void);

int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
	int random_number;
	int reset_state = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]

  HAL_Init();
 80006c2:	f000 f9da 	bl	8000a7a <HAL_Init>
  SystemClock_Config();
 80006c6:	f000 f8ab 	bl	8000820 <SystemClock_Config>
  MX_RNG_Init();
 80006ca:	f000 f8ef 	bl	80008ac <MX_RNG_Init>
  SysTick_Init();
 80006ce:	f7ff fd8d 	bl	80001ec <SysTick_Init>
  LCD_init();
 80006d2:	f7ff fe6b 	bl	80003ac <LCD_init>
  keypad_init();
 80006d6:	f7ff fdcd 	bl	8000274 <keypad_init>


  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;	//GPIOC clock init
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <main+0x14c>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a49      	ldr	r2, [pc, #292]	; (8000804 <main+0x14c>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;	//GPIOB clock init
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <main+0x14c>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a46      	ldr	r2, [pc, #280]	; (8000804 <main+0x14c>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;	//RNG clock init
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <main+0x14c>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <main+0x14c>)
 80006f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c

  GPIOB->MODER &= ~(GPIO_MODER_MODE7);	//LD2 clear
 80006fe:	4b42      	ldr	r3, [pc, #264]	; (8000808 <main+0x150>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a41      	ldr	r2, [pc, #260]	; (8000808 <main+0x150>)
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODE7_0); //LD2 output mode
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <main+0x150>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a3e      	ldr	r2, [pc, #248]	; (8000808 <main+0x150>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6013      	str	r3, [r2, #0]

  GPIOC->MODER &= ~(GPIO_MODER_MODE0);
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <main+0x154>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a3c      	ldr	r2, [pc, #240]	; (800080c <main+0x154>)
 800071c:	f023 0303 	bic.w	r3, r3, #3
 8000720:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (GPIO_MODER_MODE0_0);
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <main+0x154>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a39      	ldr	r2, [pc, #228]	; (800080c <main+0x154>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(GPIO_MODER_MODE1);
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <main+0x154>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a36      	ldr	r2, [pc, #216]	; (800080c <main+0x154>)
 8000734:	f023 030c 	bic.w	r3, r3, #12
 8000738:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (GPIO_MODER_MODE1_0);
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <main+0x154>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a33      	ldr	r2, [pc, #204]	; (800080c <main+0x154>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(GPIO_MODER_MODE2);
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <main+0x154>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a30      	ldr	r2, [pc, #192]	; (800080c <main+0x154>)
 800074c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000750:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (GPIO_MODER_MODE2_0);
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <main+0x154>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <main+0x154>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(GPIO_MODER_MODE3);
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <main+0x154>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a2a      	ldr	r2, [pc, #168]	; (800080c <main+0x154>)
 8000764:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000768:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (GPIO_MODER_MODE3_0);
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <main+0x154>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a27      	ldr	r2, [pc, #156]	; (800080c <main+0x154>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	6013      	str	r3, [r2, #0]

  RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE); //RNG turn on interrupt mode
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <main+0x158>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a25      	ldr	r2, [pc, #148]	; (8000810 <main+0x158>)
 800077c:	f043 030c 	orr.w	r3, r3, #12
 8000780:	6013      	str	r3, [r2, #0]

  delay_us(100);
 8000782:	2064      	movs	r0, #100	; 0x64
 8000784:	f7ff fd48 	bl	8000218 <delay_us>
    str_write("EE 329 A4 REACT "); // write EE 329 A3 TIMER to first line
 8000788:	4822      	ldr	r0, [pc, #136]	; (8000814 <main+0x15c>)
 800078a:	f7ff ff75 	bl	8000678 <str_write>
    delay_us(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f7ff fd42 	bl	8000218 <delay_us>
    lcd_set_cursor_position(1, 0); // set cursor to second row, first column
 8000794:	2100      	movs	r1, #0
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff ff54 	bl	8000644 <lcd_set_cursor_position>
    delay_us(100);
 800079c:	2064      	movs	r0, #100	; 0x64
 800079e:	f7ff fd3b 	bl	8000218 <delay_us>
    str_write("PUSH SW TO TRIG "); // write *=SET #=GO --:-- to second line
 80007a2:	481d      	ldr	r0, [pc, #116]	; (8000818 <main+0x160>)
 80007a4:	f7ff ff68 	bl	8000678 <str_write>
  while (1)
  {

	  while (reset_state) {
 80007a8:	e011      	b.n	80007ce <main+0x116>
	        char star_check = keypad_read(4, 3); // checks if asterisk is pushed to get out of reset state
 80007aa:	2103      	movs	r1, #3
 80007ac:	2004      	movs	r0, #4
 80007ae:	f7ff fd89 	bl	80002c4 <keypad_read>
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	        if (star_check == '*') { // Checks if button is pushed
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b2a      	cmp	r3, #42	; 0x2a
 80007ba:	d108      	bne.n	80007ce <main+0x116>
	          reset_state = 0; // takes me out of reset state allows me to take inputs
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
	          lcd_set_cursor_position(1, 11); // set cursor to hmin
 80007c0:	210b      	movs	r1, #11
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff ff3e 	bl	8000644 <lcd_set_cursor_position>
	          delay_us(1000000);              // delay for next press
 80007c8:	4814      	ldr	r0, [pc, #80]	; (800081c <main+0x164>)
 80007ca:	f7ff fd25 	bl	8000218 <delay_us>
	  while (reset_state) {
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1ea      	bne.n	80007aa <main+0xf2>
	        }
	      }


		while (!(RNG->SR & RNG_SR_DRDY));
 80007d4:	bf00      	nop
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <main+0x158>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f9      	beq.n	80007d6 <main+0x11e>
		random_number = RNG->DR;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <main+0x158>)
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	60bb      	str	r3, [r7, #8]
		if (random_number > 0 ){
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	ddef      	ble.n	80007ce <main+0x116>
			GPIOB->BSRR = GPIO_PIN_7;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <main+0x150>)
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	619a      	str	r2, [r3, #24]
			GPIOC->ODR = random_number;
 80007f4:	4a05      	ldr	r2, [pc, #20]	; (800080c <main+0x154>)
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	6153      	str	r3, [r2, #20]
			delay_us(10000);
 80007fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80007fe:	f7ff fd0b 	bl	8000218 <delay_us>
	  while (reset_state) {
 8000802:	e7e4      	b.n	80007ce <main+0x116>
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	48000800 	.word	0x48000800
 8000810:	50060800 	.word	0x50060800
 8000814:	080024b8 	.word	0x080024b8
 8000818:	080024cc 	.word	0x080024cc
 800081c:	000f4240 	.word	0x000f4240

08000820 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b096      	sub	sp, #88	; 0x58
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2244      	movs	r2, #68	; 0x44
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fe2e 	bl	8002490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]


  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000842:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000846:	f000 fa81 	bl	8000d4c <HAL_PWREx_ControlVoltageScaling>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000850:	f000 f840 	bl	80008d4 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000854:	2310      	movs	r3, #16
 8000856:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000860:	2360      	movs	r3, #96	; 0x60
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fac3 	bl	8000df8 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000878:	f000 f82c 	bl	80008d4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fec9 	bl	800162c <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008a0:	f000 f818 	bl	80008d4 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3758      	adds	r7, #88	; 0x58
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MX_RNG_Init>:


static void MX_RNG_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_RNG_Init+0x20>)
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <MX_RNG_Init+0x24>)
 80008b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_RNG_Init+0x20>)
 80008b8:	f001 fd6e 	bl	8002398 <HAL_RNG_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008c2:	f000 f807 	bl	80008d4 <Error_Handler>
  }

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000050 	.word	0x20000050
 80008d0:	50060800 	.word	0x50060800

080008d4 <Error_Handler>:

void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop

  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	; 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b0a6      	sub	sp, #152	; 0x98
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	228c      	movs	r2, #140	; 0x8c
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fda9 	bl	8002490 <memset>
  if(hrng->Instance==RNG)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_RNG_MspInit+0x80>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d12b      	bne.n	80009a0 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000948:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800094c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800094e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000956:	2301      	movs	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800095e:	2310      	movs	r3, #16
 8000960:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000962:	2302      	movs	r3, #2
 8000964:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800096e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4618      	mov	r0, r3
 800097a:	f001 f843 	bl	8001a04 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8000984:	f7ff ffa6 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_RNG_MspInit+0x84>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_RNG_MspInit+0x84>)
 800098e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_RNG_MspInit+0x84>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3798      	adds	r7, #152	; 0x98
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	50060800 	.word	0x50060800
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f892 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a2c:	f7ff ffea 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	; (8000a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	; (8000a74 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f001 fcf7 	bl	8002448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5a:	f7ff fe2d 	bl	80006b8 <main>

08000a5e <LoopForever>:

LoopForever:
    b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000a6c:	08002534 	.word	0x08002534
  ldr r2, =_sbss
 8000a70:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000a74:	20000064 	.word	0x20000064

08000a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>

08000a7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f91f 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	f000 f80e 	bl	8000aac <HAL_InitTick>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	e001      	b.n	8000aa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a9c:	f7ff ff20 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_InitTick+0x6c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d023      	beq.n	8000b08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_InitTick+0x70>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_InitTick+0x6c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f91d 	bl	8000d16 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10f      	bne.n	8000b02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d809      	bhi.n	8000afc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f8f5 	bl	8000cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_InitTick+0x74>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e007      	b.n	8000b0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e004      	b.n	8000b0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e001      	b.n	8000b0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000030 	.word	0x20000030
 8000b1c:	20000028 	.word	0x20000028
 8000b20:	2000002c 	.word	0x2000002c

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000030 	.word	0x20000030
 8000b48:	20000060 	.word	0x20000060

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000060 	.word	0x20000060

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f7ff ff8e 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff47 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff5c 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff8e 	bl	8000c1c <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5d 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffb0 	bl	8000c84 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40007000 	.word	0x40007000

08000d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d5a:	d130      	bne.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d68:	d038      	beq.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2232      	movs	r2, #50	; 0x32
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9b      	lsrs	r3, r3, #18
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d90:	e002      	b.n	8000d98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da4:	d102      	bne.n	8000dac <HAL_PWREx_ControlVoltageScaling+0x60>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f2      	bne.n	8000d92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db8:	d110      	bne.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e00f      	b.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dca:	d007      	beq.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dd4:	4a05      	ldr	r2, [pc, #20]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40007000 	.word	0x40007000
 8000df0:	20000028 	.word	0x20000028
 8000df4:	431bde83 	.word	0x431bde83

08000df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f000 bc08 	b.w	800161c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e0c:	4b96      	ldr	r3, [pc, #600]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e16:	4b94      	ldr	r3, [pc, #592]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80e4 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d007      	beq.n	8000e44 <HAL_RCC_OscConfig+0x4c>
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b0c      	cmp	r3, #12
 8000e38:	f040 808b 	bne.w	8000f52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	f040 8087 	bne.w	8000f52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e44:	4b88      	ldr	r3, [pc, #544]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d005      	beq.n	8000e5c <HAL_RCC_OscConfig+0x64>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e3df      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1a      	ldr	r2, [r3, #32]
 8000e60:	4b81      	ldr	r3, [pc, #516]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <HAL_RCC_OscConfig+0x7e>
 8000e6c:	4b7e      	ldr	r3, [pc, #504]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e74:	e005      	b.n	8000e82 <HAL_RCC_OscConfig+0x8a>
 8000e76:	4b7c      	ldr	r3, [pc, #496]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d223      	bcs.n	8000ece <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fd5a 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e3c0      	b.n	800161c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e9a:	4b73      	ldr	r3, [pc, #460]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a72      	ldr	r2, [pc, #456]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b70      	ldr	r3, [pc, #448]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	496d      	ldr	r1, [pc, #436]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb8:	4b6b      	ldr	r3, [pc, #428]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	4968      	ldr	r1, [pc, #416]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
 8000ecc:	e025      	b.n	8000f1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ece:	4b66      	ldr	r3, [pc, #408]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a65      	ldr	r2, [pc, #404]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b63      	ldr	r3, [pc, #396]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4960      	ldr	r1, [pc, #384]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eec:	4b5e      	ldr	r3, [pc, #376]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	495b      	ldr	r1, [pc, #364]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000efc:	4313      	orrs	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d109      	bne.n	8000f1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fd1a 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e380      	b.n	800161c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f1a:	f000 fc87 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	4b51      	ldr	r3, [pc, #324]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	4950      	ldr	r1, [pc, #320]	; (800106c <HAL_RCC_OscConfig+0x274>)
 8000f2c:	5ccb      	ldrb	r3, [r1, r3]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	fa22 f303 	lsr.w	r3, r2, r3
 8000f36:	4a4e      	ldr	r2, [pc, #312]	; (8001070 <HAL_RCC_OscConfig+0x278>)
 8000f38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f3a:	4b4e      	ldr	r3, [pc, #312]	; (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fdb4 	bl	8000aac <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d052      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	e364      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d032      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f5a:	4b43      	ldr	r3, [pc, #268]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a42      	ldr	r2, [pc, #264]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fdf1 	bl	8000b4c <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fded 	bl	8000b4c <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e34d      	b.n	800161c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f80:	4b39      	ldr	r3, [pc, #228]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a35      	ldr	r2, [pc, #212]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4930      	ldr	r1, [pc, #192]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	492b      	ldr	r1, [pc, #172]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
 8000fbe:	e01a      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fdbe 	bl	8000b4c <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fdba 	bl	8000b4c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e31a      	b.n	800161c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1dc>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d073      	beq.n	80010ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d005      	beq.n	8001014 <HAL_RCC_OscConfig+0x21c>
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d10e      	bne.n	800102c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d10b      	bne.n	800102c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d063      	beq.n	80010e8 <HAL_RCC_OscConfig+0x2f0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d15f      	bne.n	80010e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e2f7      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001034:	d106      	bne.n	8001044 <HAL_RCC_OscConfig+0x24c>
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e025      	b.n	8001090 <HAL_RCC_OscConfig+0x298>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800104c:	d114      	bne.n	8001078 <HAL_RCC_OscConfig+0x280>
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a02      	ldr	r2, [pc, #8]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e013      	b.n	8001090 <HAL_RCC_OscConfig+0x298>
 8001068:	40021000 	.word	0x40021000
 800106c:	080024ec 	.word	0x080024ec
 8001070:	20000028 	.word	0x20000028
 8001074:	2000002c 	.word	0x2000002c
 8001078:	4ba0      	ldr	r3, [pc, #640]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a9f      	ldr	r2, [pc, #636]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800107e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b9d      	ldr	r3, [pc, #628]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a9c      	ldr	r2, [pc, #624]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800108a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fd58 	bl	8000b4c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fd54 	bl	8000b4c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e2b4      	b.n	800161c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b2:	4b92      	ldr	r3, [pc, #584]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x2a8>
 80010be:	e014      	b.n	80010ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fd44 	bl	8000b4c <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fd40 	bl	8000b4c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e2a0      	b.n	800161c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010da:	4b88      	ldr	r3, [pc, #544]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x2d0>
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d060      	beq.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_OscConfig+0x310>
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d119      	bne.n	8001136 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d116      	bne.n	8001136 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001108:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_OscConfig+0x328>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e27d      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	061b      	lsls	r3, r3, #24
 800112e:	4973      	ldr	r1, [pc, #460]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001134:	e040      	b.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d023      	beq.n	8001186 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6e      	ldr	r2, [pc, #440]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114a:	f7ff fcff 	bl	8000b4c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fcfb 	bl	8000b4c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e25b      	b.n	800161c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001164:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b62      	ldr	r3, [pc, #392]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	061b      	lsls	r3, r3, #24
 800117e:	495f      	ldr	r1, [pc, #380]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
 8001184:	e018      	b.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001186:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800118c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fcdb 	bl	8000b4c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fcd7 	bl	8000b4c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e237      	b.n	800161c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d03c      	beq.n	800123e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01c      	beq.n	8001206 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011cc:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80011ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d2:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011dc:	f7ff fcb6 	bl	8000b4c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fcb2 	bl	8000b4c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e212      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80011f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0ef      	beq.n	80011e4 <HAL_RCC_OscConfig+0x3ec>
 8001204:	e01b      	b.n	800123e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120c:	4a3b      	ldr	r2, [pc, #236]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001216:	f7ff fc99 	bl	8000b4c <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fc95 	bl	8000b4c <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1f5      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ef      	bne.n	800121e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80a6 	beq.w	8001398 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10d      	bne.n	8001278 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6593      	str	r3, [r2, #88]	; 0x58
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001274:	2301      	movs	r3, #1
 8001276:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_RCC_OscConfig+0x508>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001280:	2b00      	cmp	r3, #0
 8001282:	d118      	bne.n	80012b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_RCC_OscConfig+0x508>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_RCC_OscConfig+0x508>)
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001290:	f7ff fc5c 	bl	8000b4c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001298:	f7ff fc58 	bl	8000b4c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1b8      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_RCC_OscConfig+0x508>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4d8>
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80012c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ce:	e029      	b.n	8001324 <HAL_RCC_OscConfig+0x52c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d115      	bne.n	8001304 <HAL_RCC_OscConfig+0x50c>
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80012da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_RCC_OscConfig+0x504>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f8:	e014      	b.n	8001324 <HAL_RCC_OscConfig+0x52c>
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	40007000 	.word	0x40007000
 8001304:	4b9d      	ldr	r3, [pc, #628]	; (800157c <HAL_RCC_OscConfig+0x784>)
 8001306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130a:	4a9c      	ldr	r2, [pc, #624]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001314:	4b99      	ldr	r3, [pc, #612]	; (800157c <HAL_RCC_OscConfig+0x784>)
 8001316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131a:	4a98      	ldr	r2, [pc, #608]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d016      	beq.n	800135a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fc0e 	bl	8000b4c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001332:	e00a      	b.n	800134a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001334:	f7ff fc0a 	bl	8000b4c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001342:	4293      	cmp	r3, r2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e168      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800134a:	4b8c      	ldr	r3, [pc, #560]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800134c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0ed      	beq.n	8001334 <HAL_RCC_OscConfig+0x53c>
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135a:	f7ff fbf7 	bl	8000b4c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff fbf3 	bl	8000b4c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e151      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ed      	bne.n	8001362 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b7b      	ldr	r3, [pc, #492]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	4a7a      	ldr	r2, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x784>)
 8001392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001396:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0320 	and.w	r3, r3, #32
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d03c      	beq.n	800141e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01c      	beq.n	80013e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013ac:	4b73      	ldr	r3, [pc, #460]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80013ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b2:	4a72      	ldr	r2, [pc, #456]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013bc:	f7ff fbc6 	bl	8000b4c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c4:	f7ff fbc2 	bl	8000b4c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e122      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013d6:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80013d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ef      	beq.n	80013c4 <HAL_RCC_OscConfig+0x5cc>
 80013e4:	e01b      	b.n	800141e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013e6:	4b65      	ldr	r3, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80013e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ec:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7ff fba9 	bl	8000b4c <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013fe:	f7ff fba5 	bl	8000b4c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e105      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001410:	4b5a      	ldr	r3, [pc, #360]	; (800157c <HAL_RCC_OscConfig+0x784>)
 8001412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ef      	bne.n	80013fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80f9 	beq.w	800161a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	2b02      	cmp	r3, #2
 800142e:	f040 80cf 	bne.w	80015d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <HAL_RCC_OscConfig+0x784>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 0203 	and.w	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	429a      	cmp	r2, r3
 8001444:	d12c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	3b01      	subs	r3, #1
 8001452:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d123      	bne.n	80014a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001462:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001464:	429a      	cmp	r2, r3
 8001466:	d11b      	bne.n	80014a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d113      	bne.n	80014a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	3b01      	subs	r3, #1
 8001486:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d109      	bne.n	80014a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	3b01      	subs	r3, #1
 800149a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d071      	beq.n	8001584 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b0c      	cmp	r3, #12
 80014a4:	d068      	beq.n	8001578 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0ac      	b.n	800161c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80014c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ce:	f7ff fb3d 	bl	8000b4c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb39 	bl	8000b4c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e099      	b.n	800161c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_RCC_OscConfig+0x784>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_RCC_OscConfig+0x788>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001504:	3a01      	subs	r2, #1
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	4311      	orrs	r1, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800150e:	0212      	lsls	r2, r2, #8
 8001510:	4311      	orrs	r1, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001516:	0852      	lsrs	r2, r2, #1
 8001518:	3a01      	subs	r2, #1
 800151a:	0552      	lsls	r2, r2, #21
 800151c:	4311      	orrs	r1, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001522:	0852      	lsrs	r2, r2, #1
 8001524:	3a01      	subs	r2, #1
 8001526:	0652      	lsls	r2, r2, #25
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800152e:	06d2      	lsls	r2, r2, #27
 8001530:	430a      	orrs	r2, r1
 8001532:	4912      	ldr	r1, [pc, #72]	; (800157c <HAL_RCC_OscConfig+0x784>)
 8001534:	4313      	orrs	r3, r2
 8001536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800153e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_OscConfig+0x784>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001550:	f7ff fafc 	bl	8000b4c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff faf8 	bl	8000b4c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e058      	b.n	800161c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_RCC_OscConfig+0x784>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001576:	e050      	b.n	800161a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e04f      	b.n	800161c <HAL_RCC_OscConfig+0x824>
 800157c:	40021000 	.word	0x40021000
 8001580:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d144      	bne.n	800161a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a23      	ldr	r2, [pc, #140]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 8001596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800159a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 80015a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015a8:	f7ff fad0 	bl	8000b4c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff facc 	bl	8000b4c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e02c      	b.n	800161c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x7b8>
 80015ce:	e024      	b.n	800161a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d01f      	beq.n	8001616 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 80015dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fab3 	bl	8000b4c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff faaf 	bl	8000b4c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e00f      	b.n	800161c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	4905      	ldr	r1, [pc, #20]	; (8001624 <HAL_RCC_OscConfig+0x82c>)
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x830>)
 8001610:	4013      	ands	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
 8001614:	e001      	b.n	800161a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	feeefffc 	.word	0xfeeefffc

0800162c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0e7      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b75      	ldr	r3, [pc, #468]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d910      	bls.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b72      	ldr	r3, [pc, #456]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4970      	ldr	r1, [pc, #448]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0cf      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d010      	beq.n	800169e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001688:	429a      	cmp	r2, r3
 800168a:	d908      	bls.n	800169e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4960      	ldr	r1, [pc, #384]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d04c      	beq.n	8001744 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d121      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0a6      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	4b54      	ldr	r3, [pc, #336]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d115      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e09a      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e2:	4b4e      	ldr	r3, [pc, #312]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e08e      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e086      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4b46      	ldr	r3, [pc, #280]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 0203 	bic.w	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4943      	ldr	r1, [pc, #268]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001714:	f7ff fa1a 	bl	8000b4c <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	e00a      	b.n	8001732 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171c:	f7ff fa16 	bl	8000b4c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e06e      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 020c 	and.w	r2, r3, #12
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	429a      	cmp	r2, r3
 8001742:	d1eb      	bne.n	800171c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d010      	beq.n	8001772 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175c:	429a      	cmp	r2, r3
 800175e:	d208      	bcs.n	8001772 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	492b      	ldr	r1, [pc, #172]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d210      	bcs.n	80017a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 0207 	bic.w	r2, r3, #7
 8001788:	4923      	ldr	r1, [pc, #140]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e036      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	4918      	ldr	r1, [pc, #96]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d009      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4910      	ldr	r1, [pc, #64]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e0:	f000 f824 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	490b      	ldr	r1, [pc, #44]	; (8001820 <HAL_RCC_ClockConfig+0x1f4>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1fc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f951 	bl	8000aac <HAL_InitTick>
 800180a:	4603      	mov	r3, r0
 800180c:	72fb      	strb	r3, [r7, #11]

  return status;
 800180e:	7afb      	ldrb	r3, [r7, #11]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40022000 	.word	0x40022000
 800181c:	40021000 	.word	0x40021000
 8001820:	080024ec 	.word	0x080024ec
 8001824:	20000028 	.word	0x20000028
 8001828:	2000002c 	.word	0x2000002c

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001844:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x34>
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d121      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d11e      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001860:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e005      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001888:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <HAL_RCC_GetSysClockFreq+0x10c>)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d102      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_RCC_GetSysClockFreq+0x110>)
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	e004      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_RCC_GetSysClockFreq+0x114>)
 80018b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d134      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d003      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0xac>
 80018d0:	e005      	b.n	80018de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_GetSysClockFreq+0x110>)
 80018d4:	617b      	str	r3, [r7, #20]
      break;
 80018d6:	e005      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_GetSysClockFreq+0x114>)
 80018da:	617b      	str	r3, [r7, #20]
      break;
 80018dc:	e002      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	617b      	str	r3, [r7, #20]
      break;
 80018e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	3301      	adds	r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	fb03 f202 	mul.w	r2, r3, r2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	0e5b      	lsrs	r3, r3, #25
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	3301      	adds	r3, #1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001924:	69bb      	ldr	r3, [r7, #24]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	080024fc 	.word	0x080024fc
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200

08001944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800195c:	f7ff f9e8 	bl	8000d30 <HAL_PWREx_GetVoltageRange>
 8001960:	6178      	str	r0, [r7, #20]
 8001962:	e014      	b.n	800198e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4a24      	ldr	r2, [pc, #144]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800197c:	f7ff f9d8 	bl	8000d30 <HAL_PWREx_GetVoltageRange>
 8001980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001994:	d10b      	bne.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d919      	bls.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2ba0      	cmp	r3, #160	; 0xa0
 80019a0:	d902      	bls.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e013      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e010      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b80      	cmp	r3, #128	; 0x80
 80019b2:	d902      	bls.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019b4:	2303      	movs	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e00a      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d102      	bne.n	80019c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	e004      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b70      	cmp	r3, #112	; 0x70
 80019ca:	d101      	bne.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 0207 	bic.w	r2, r3, #7
 80019d8:	4909      	ldr	r1, [pc, #36]	; (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a10:	2300      	movs	r3, #0
 8001a12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d041      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a28:	d02a      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001a2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a2e:	d824      	bhi.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001a30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a34:	d008      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001a36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a3a:	d81e      	bhi.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a44:	d010      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001a46:	e018      	b.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a48:	4b86      	ldr	r3, [pc, #536]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a85      	ldr	r2, [pc, #532]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a54:	e015      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 facd 	bl	8001ffc <RCCEx_PLLSAI1_Config>
 8001a62:	4603      	mov	r3, r0
 8001a64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a66:	e00c      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3320      	adds	r3, #32
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fbb6 	bl	80021e0 <RCCEx_PLLSAI2_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a78:	e003      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	74fb      	strb	r3, [r7, #19]
      break;
 8001a7e:	e000      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a82:	7cfb      	ldrb	r3, [r7, #19]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a88:	4b76      	ldr	r3, [pc, #472]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a96:	4973      	ldr	r1, [pc, #460]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a9e:	e001      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001aa0:	7cfb      	ldrb	r3, [r7, #19]
 8001aa2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d041      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ab4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ab8:	d02a      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001aba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001abe:	d824      	bhi.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aca:	d81e      	bhi.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00a      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d010      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ad6:	e018      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ad8:	4b62      	ldr	r3, [pc, #392]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a61      	ldr	r2, [pc, #388]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ae4:	e015      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fa85 	bl	8001ffc <RCCEx_PLLSAI1_Config>
 8001af2:	4603      	mov	r3, r0
 8001af4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001af6:	e00c      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3320      	adds	r3, #32
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fb6e 	bl	80021e0 <RCCEx_PLLSAI2_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b08:	e003      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001b0e:	e000      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b12:	7cfb      	ldrb	r3, [r7, #19]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10b      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b18:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b26:	494f      	ldr	r1, [pc, #316]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b2e:	e001      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b30:	7cfb      	ldrb	r3, [r7, #19]
 8001b32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a0 	beq.w	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001b56:	2300      	movs	r3, #0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00d      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a3a      	ldr	r2, [pc, #232]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b84:	f7fe ffe2 	bl	8000b4c <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7fe ffde 	bl	8000b4c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d902      	bls.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	74fb      	strb	r3, [r7, #19]
        break;
 8001b9e:	e005      	b.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ef      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d15c      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01f      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d019      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d016      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7fe ff9d 	bl	8000b4c <HAL_GetTick>
 8001c12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c14:	e00b      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7fe ff99 	bl	8000b4c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d902      	bls.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	74fb      	strb	r3, [r7, #19]
            break;
 8001c2c:	e006      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ec      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001c3c:	7cfb      	ldrb	r3, [r7, #19]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	4904      	ldr	r1, [pc, #16]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c5a:	e009      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	74bb      	strb	r3, [r7, #18]
 8001c60:	e006      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c6c:	7cfb      	ldrb	r3, [r7, #19]
 8001c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c70:	7c7b      	ldrb	r3, [r7, #17]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d105      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c76:	4ba6      	ldr	r3, [pc, #664]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	4aa5      	ldr	r2, [pc, #660]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c8e:	4ba0      	ldr	r3, [pc, #640]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c94:	f023 0203 	bic.w	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	499c      	ldr	r1, [pc, #624]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cb0:	4b97      	ldr	r3, [pc, #604]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	f023 020c 	bic.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	4994      	ldr	r1, [pc, #592]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cd2:	4b8f      	ldr	r3, [pc, #572]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	498b      	ldr	r1, [pc, #556]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cf4:	4b86      	ldr	r3, [pc, #536]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4983      	ldr	r1, [pc, #524]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d16:	4b7e      	ldr	r3, [pc, #504]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d24:	497a      	ldr	r1, [pc, #488]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4972      	ldr	r1, [pc, #456]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	4969      	ldr	r1, [pc, #420]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d8a:	4961      	ldr	r1, [pc, #388]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dac:	4958      	ldr	r1, [pc, #352]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	4950      	ldr	r1, [pc, #320]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001de2:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4947      	ldr	r1, [pc, #284]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	493f      	ldr	r1, [pc, #252]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d028      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	4936      	ldr	r1, [pc, #216]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e44:	d106      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e50:	60d3      	str	r3, [r2, #12]
 8001e52:	e011      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2101      	movs	r1, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f8c9 	bl	8001ffc <RCCEx_PLLSAI1_Config>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d028      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	491f      	ldr	r1, [pc, #124]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eae:	60d3      	str	r3, [r2, #12]
 8001eb0:	e011      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f89a 	bl	8001ffc <RCCEx_PLLSAI1_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f00:	d108      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4a02      	ldr	r2, [pc, #8]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0c:	60d3      	str	r3, [r2, #12]
 8001f0e:	e013      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8001f10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2101      	movs	r1, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f869 	bl	8001ffc <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02f      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f44:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f52:	4929      	ldr	r1, [pc, #164]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f62:	d10d      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f846 	bl	8001ffc <RCCEx_PLLSAI1_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d014      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	74bb      	strb	r3, [r7, #18]
 8001f7e:	e011      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3320      	adds	r3, #32
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f925 	bl	80021e0 <RCCEx_PLLSAI2_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fc0:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe4:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001fec:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000

08001ffc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800200a:	4b74      	ldr	r3, [pc, #464]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d018      	beq.n	8002048 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002016:	4b71      	ldr	r3, [pc, #452]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0203 	and.w	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d10d      	bne.n	8002042 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
       ||
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
       ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d047      	beq.n	80020d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	e044      	b.n	80020d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d018      	beq.n	8002082 <RCCEx_PLLSAI1_Config+0x86>
 8002050:	2b03      	cmp	r3, #3
 8002052:	d825      	bhi.n	80020a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002054:	2b01      	cmp	r3, #1
 8002056:	d002      	beq.n	800205e <RCCEx_PLLSAI1_Config+0x62>
 8002058:	2b02      	cmp	r3, #2
 800205a:	d009      	beq.n	8002070 <RCCEx_PLLSAI1_Config+0x74>
 800205c:	e020      	b.n	80020a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800205e:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11d      	bne.n	80020a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206e:	e01a      	b.n	80020a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002070:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d116      	bne.n	80020aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002080:	e013      	b.n	80020aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002082:	4b56      	ldr	r3, [pc, #344]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800208e:	4b53      	ldr	r3, [pc, #332]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800209e:	e006      	b.n	80020ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      break;
 80020a4:	e004      	b.n	80020b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80020a6:	bf00      	nop
 80020a8:	e002      	b.n	80020b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80020aa:	bf00      	nop
 80020ac:	e000      	b.n	80020b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80020ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	430b      	orrs	r3, r1
 80020cc:	4943      	ldr	r1, [pc, #268]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d17c      	bne.n	80021d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80020d8:	4b40      	ldr	r3, [pc, #256]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3f      	ldr	r2, [pc, #252]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80020de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e4:	f7fe fd32 	bl	8000b4c <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020ea:	e009      	b.n	8002100 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020ec:	f7fe fd2e 	bl	8000b4c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d902      	bls.n	8002100 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	73fb      	strb	r3, [r7, #15]
        break;
 80020fe:	e005      	b.n	800210c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ef      	bne.n	80020ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d15f      	bne.n	80021d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d110      	bne.n	800213a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002120:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6892      	ldr	r2, [r2, #8]
 8002128:	0211      	lsls	r1, r2, #8
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	06d2      	lsls	r2, r2, #27
 8002130:	430a      	orrs	r2, r1
 8002132:	492a      	ldr	r1, [pc, #168]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002134:	4313      	orrs	r3, r2
 8002136:	610b      	str	r3, [r1, #16]
 8002138:	e027      	b.n	800218a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d112      	bne.n	8002166 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6892      	ldr	r2, [r2, #8]
 8002150:	0211      	lsls	r1, r2, #8
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6912      	ldr	r2, [r2, #16]
 8002156:	0852      	lsrs	r2, r2, #1
 8002158:	3a01      	subs	r2, #1
 800215a:	0552      	lsls	r2, r2, #21
 800215c:	430a      	orrs	r2, r1
 800215e:	491f      	ldr	r1, [pc, #124]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002160:	4313      	orrs	r3, r2
 8002162:	610b      	str	r3, [r1, #16]
 8002164:	e011      	b.n	800218a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800216e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6892      	ldr	r2, [r2, #8]
 8002176:	0211      	lsls	r1, r2, #8
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6952      	ldr	r2, [r2, #20]
 800217c:	0852      	lsrs	r2, r2, #1
 800217e:	3a01      	subs	r2, #1
 8002180:	0652      	lsls	r2, r2, #25
 8002182:	430a      	orrs	r2, r1
 8002184:	4915      	ldr	r1, [pc, #84]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002186:	4313      	orrs	r3, r2
 8002188:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002194:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe fcd9 	bl	8000b4c <HAL_GetTick>
 800219a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800219c:	e009      	b.n	80021b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800219e:	f7fe fcd5 	bl	8000b4c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d902      	bls.n	80021b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	73fb      	strb	r3, [r7, #15]
          break;
 80021b0:	e005      	b.n	80021be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ef      	beq.n	800219e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000

080021e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ee:	4b69      	ldr	r3, [pc, #420]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d018      	beq.n	800222c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80021fa:	4b66      	ldr	r3, [pc, #408]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d10d      	bne.n	8002226 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
       ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002212:	4b60      	ldr	r3, [pc, #384]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
       ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d047      	beq.n	80022b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e044      	b.n	80022b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d018      	beq.n	8002266 <RCCEx_PLLSAI2_Config+0x86>
 8002234:	2b03      	cmp	r3, #3
 8002236:	d825      	bhi.n	8002284 <RCCEx_PLLSAI2_Config+0xa4>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d002      	beq.n	8002242 <RCCEx_PLLSAI2_Config+0x62>
 800223c:	2b02      	cmp	r3, #2
 800223e:	d009      	beq.n	8002254 <RCCEx_PLLSAI2_Config+0x74>
 8002240:	e020      	b.n	8002284 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002242:	4b54      	ldr	r3, [pc, #336]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11d      	bne.n	800228a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002252:	e01a      	b.n	800228a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002254:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002264:	e013      	b.n	800228e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002266:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002272:	4b48      	ldr	r3, [pc, #288]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002282:	e006      	b.n	8002292 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      break;
 8002288:	e004      	b.n	8002294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800228a:	bf00      	nop
 800228c:	e002      	b.n	8002294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800228e:	bf00      	nop
 8002290:	e000      	b.n	8002294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002292:	bf00      	nop
    }

    if(status == HAL_OK)
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800229a:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	430b      	orrs	r3, r1
 80022b0:	4938      	ldr	r1, [pc, #224]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d166      	bne.n	800238a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a34      	ldr	r2, [pc, #208]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 80022c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c8:	f7fe fc40 	bl	8000b4c <HAL_GetTick>
 80022cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80022ce:	e009      	b.n	80022e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022d0:	f7fe fc3c 	bl	8000b4c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d902      	bls.n	80022e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	73fb      	strb	r3, [r7, #15]
        break;
 80022e2:	e005      	b.n	80022f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ef      	bne.n	80022d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d149      	bne.n	800238a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6892      	ldr	r2, [r2, #8]
 800230c:	0211      	lsls	r1, r2, #8
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	06d2      	lsls	r2, r2, #27
 8002314:	430a      	orrs	r2, r1
 8002316:	491f      	ldr	r1, [pc, #124]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	614b      	str	r3, [r1, #20]
 800231c:	e011      	b.n	8002342 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002326:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6892      	ldr	r2, [r2, #8]
 800232e:	0211      	lsls	r1, r2, #8
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6912      	ldr	r2, [r2, #16]
 8002334:	0852      	lsrs	r2, r2, #1
 8002336:	3a01      	subs	r2, #1
 8002338:	0652      	lsls	r2, r2, #25
 800233a:	430a      	orrs	r2, r1
 800233c:	4915      	ldr	r1, [pc, #84]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fbfd 	bl	8000b4c <HAL_GetTick>
 8002352:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002354:	e009      	b.n	800236a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002356:	f7fe fbf9 	bl	8000b4c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d902      	bls.n	800236a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	73fb      	strb	r3, [r7, #15]
          break;
 8002368:	e005      	b.n	8002376 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ef      	beq.n	8002356 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e049      	b.n	800243e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	795b      	ldrb	r3, [r3, #5]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fab4 	bl	8000928 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0204 	orr.w	r2, r2, #4
 80023d4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d104      	bne.n	80023ee <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2204      	movs	r2, #4
 80023e8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e027      	b.n	800243e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80023ee:	f7fe fbad 	bl	8000b4c <HAL_GetTick>
 80023f2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80023f4:	e015      	b.n	8002422 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80023f6:	f7fe fba9 	bl	8000b4c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d90e      	bls.n	8002422 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b04      	cmp	r3, #4
 8002410:	d107      	bne.n	8002422 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00d      	b.n	800243e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d0e2      	beq.n	80023f6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <__libc_init_array>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	4d0d      	ldr	r5, [pc, #52]	; (8002480 <__libc_init_array+0x38>)
 800244c:	4c0d      	ldr	r4, [pc, #52]	; (8002484 <__libc_init_array+0x3c>)
 800244e:	1b64      	subs	r4, r4, r5
 8002450:	10a4      	asrs	r4, r4, #2
 8002452:	2600      	movs	r6, #0
 8002454:	42a6      	cmp	r6, r4
 8002456:	d109      	bne.n	800246c <__libc_init_array+0x24>
 8002458:	4d0b      	ldr	r5, [pc, #44]	; (8002488 <__libc_init_array+0x40>)
 800245a:	4c0c      	ldr	r4, [pc, #48]	; (800248c <__libc_init_array+0x44>)
 800245c:	f000 f820 	bl	80024a0 <_init>
 8002460:	1b64      	subs	r4, r4, r5
 8002462:	10a4      	asrs	r4, r4, #2
 8002464:	2600      	movs	r6, #0
 8002466:	42a6      	cmp	r6, r4
 8002468:	d105      	bne.n	8002476 <__libc_init_array+0x2e>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002470:	4798      	blx	r3
 8002472:	3601      	adds	r6, #1
 8002474:	e7ee      	b.n	8002454 <__libc_init_array+0xc>
 8002476:	f855 3b04 	ldr.w	r3, [r5], #4
 800247a:	4798      	blx	r3
 800247c:	3601      	adds	r6, #1
 800247e:	e7f2      	b.n	8002466 <__libc_init_array+0x1e>
 8002480:	0800252c 	.word	0x0800252c
 8002484:	0800252c 	.word	0x0800252c
 8002488:	0800252c 	.word	0x0800252c
 800248c:	08002530 	.word	0x08002530

08002490 <memset>:
 8002490:	4402      	add	r2, r0
 8002492:	4603      	mov	r3, r0
 8002494:	4293      	cmp	r3, r2
 8002496:	d100      	bne.n	800249a <memset+0xa>
 8002498:	4770      	bx	lr
 800249a:	f803 1b01 	strb.w	r1, [r3], #1
 800249e:	e7f9      	b.n	8002494 <memset+0x4>

080024a0 <_init>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	bf00      	nop
 80024a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a6:	bc08      	pop	{r3}
 80024a8:	469e      	mov	lr, r3
 80024aa:	4770      	bx	lr

080024ac <_fini>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr
