
P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ccc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001e78  08001e78  00011e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f24  08001f24  00021b0c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f24  08001f24  00021b0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f24  08001f24  00021b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f24  08001f24  00011f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001b0c  20000000  08001f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20001b0c  08003a38  00021b0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  08003a38  00021b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021b0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a3c  00000000  00000000  00021b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d5  00000000  00000000  00027578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  00028a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000578  00000000  00000000  000290a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027729  00000000  00000000  00029618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008610  00000000  00000000  00050d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee84b  00000000  00000000  00059351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147b9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001630  00000000  00000000  00147bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20001b0c 	.word	0x20001b0c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001e60 	.word	0x08001e60

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20001b10 	.word	0x20001b10
 80001e8:	08001e60 	.word	0x08001e60

080001ec <SPI_init>:

// PA4 SPI1_NSS
// PA5 SPI1_SCK
// PA7 SPI1_MOSI

void SPI_init(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  // Enable GPIOA and SPI1 clocks
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // GPIOA: DAC NSS/SCK/SDO
 80001f0:	4b49      	ldr	r3, [pc, #292]	; (8000318 <SPI_init+0x12c>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	4a48      	ldr	r2, [pc, #288]	; (8000318 <SPI_init+0x12c>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);  // SPI1 port
 80001fc:	4b46      	ldr	r3, [pc, #280]	; (8000318 <SPI_init+0x12c>)
 80001fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000200:	4a45      	ldr	r2, [pc, #276]	; (8000318 <SPI_init+0x12c>)
 8000202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000206:	6613      	str	r3, [r2, #96]	; 0x60

  // Configure SPI1_PORT pins for SPI1 alternate functions
  SPI1_PORT->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE7);
 8000208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000212:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000216:	6013      	str	r3, [r2, #0]
  SPI1_PORT->MODER |=
 8000218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000222:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 8000226:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1);
  SPI1_PORT->AFR[0] &=
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000232:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000236:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800023a:	6213      	str	r3, [r2, #32]
      ~((0x000F << GPIO_AFRL_AFSEL4_Pos) | (0x000F << GPIO_AFRL_AFSEL5_Pos) |
        (0x000F << GPIO_AFRL_AFSEL7_Pos));
  SPI1_PORT->AFR[0] |=
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800024a:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800024e:	6213      	str	r3, [r2, #32]
      ((0x0005 << GPIO_AFRL_AFSEL4_Pos) | (0x0005 << GPIO_AFRL_AFSEL5_Pos) |
       (0x0005 << GPIO_AFRL_AFSEL7_Pos));
  SPI1_PORT->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT7);
 8000250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025a:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 800025e:	6053      	str	r3, [r2, #4]
  SPI1_PORT->OSPEEDR |=
 8000260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026a:	f443 434f 	orr.w	r3, r3, #52992	; 0xcf00
 800026e:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED4_Pos) | (3 << GPIO_OSPEEDR_OSPEED5_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED7_Pos));

  // Configure SPI1 settings
  SPI1->CR1 &= ~(SPI_CR1_SPE);                 // disable SPI for config
 8000270:	4b2a      	ldr	r3, [pc, #168]	; (800031c <SPI_init+0x130>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a29      	ldr	r2, [pc, #164]	; (800031c <SPI_init+0x130>)
 8000276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800027a:	6013      	str	r3, [r2, #0]
  SPI1->CR1 &= ~(SPI_CR1_RXONLY);              // recv-only OFF
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <SPI_init+0x130>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a26      	ldr	r2, [pc, #152]	; (800031c <SPI_init+0x130>)
 8000282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000286:	6013      	str	r3, [r2, #0]
  SPI1->CR1 &= ~(SPI_CR1_LSBFIRST);            // data bit order MSb:LSb
 8000288:	4b24      	ldr	r3, [pc, #144]	; (800031c <SPI_init+0x130>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a23      	ldr	r2, [pc, #140]	; (800031c <SPI_init+0x130>)
 800028e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000292:	6013      	str	r3, [r2, #0]
  SPI1->CR1 &= ~(SPI_CR1_CPOL | SPI_CR1_CPHA); // SCLK polarity:phase = 0:0
 8000294:	4b21      	ldr	r3, [pc, #132]	; (800031c <SPI_init+0x130>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a20      	ldr	r2, [pc, #128]	; (800031c <SPI_init+0x130>)
 800029a:	f023 0303 	bic.w	r3, r3, #3
 800029e:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_MSTR;                   // MCU is SPI controller
 80002a0:	4b1e      	ldr	r3, [pc, #120]	; (800031c <SPI_init+0x130>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <SPI_init+0x130>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_SSM; // Enable software slave management
 80002ac:	4b1b      	ldr	r3, [pc, #108]	; (800031c <SPI_init+0x130>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a1a      	ldr	r2, [pc, #104]	; (800031c <SPI_init+0x130>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |=
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <SPI_init+0x130>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a17      	ldr	r2, [pc, #92]	; (800031c <SPI_init+0x130>)
 80002be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c2:	6013      	str	r3, [r2, #0]
      SPI_CR1_SSI; // Set the internal slave select as high (not selected)

  // Configure SPI1 data frame settings
  SPI1->CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE); // disable FIFO intrpts
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <SPI_init+0x130>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <SPI_init+0x130>)
 80002ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002ce:	6053      	str	r3, [r2, #4]
  SPI1->CR2 &= ~(SPI_CR2_FRF);                    // Moto frame format
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <SPI_init+0x130>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <SPI_init+0x130>)
 80002d6:	f023 0310 	bic.w	r3, r3, #16
 80002da:	6053      	str	r3, [r2, #4]
  SPI1->CR2 |= SPI_CR2_NSSP;                      // auto-generate NSS pulse
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <SPI_init+0x130>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <SPI_init+0x130>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6053      	str	r3, [r2, #4]
  SPI1->CR2 |= SPI_CR2_DS;                        // 16-bit data
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <SPI_init+0x130>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <SPI_init+0x130>)
 80002ee:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80002f2:	6053      	str	r3, [r2, #4]
  SPI1->CR2 |= SPI_CR2_SSOE;                      // enable SS output
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <SPI_init+0x130>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a08      	ldr	r2, [pc, #32]	; (800031c <SPI_init+0x130>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6053      	str	r3, [r2, #4]
  // CR1
  SPI1->CR1 |= SPI_CR1_SPE; // re-enable SPI for ops
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <SPI_init+0x130>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a05      	ldr	r2, [pc, #20]	; (800031c <SPI_init+0x130>)
 8000306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000
 800031c:	40013000 	.word	0x40013000

08000320 <DAC_write>:
  // convert to digital value
  uint32_t dig_val = (analog_val * 4095 * 0.805) / Vref;
  return (dig_val - 6);
}

uint32_t DAC_write(uint32_t dig_val) {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  SPI1->CR1 &= ~SPI_CR1_SSI; // Clear the SSI bit, setting the NSS pin low
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <DAC_write+0x54>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <DAC_write+0x54>)
 800032e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000332:	6013      	str	r3, [r2, #0]
                             // (selected slave device)

  // check if the buffer is empty
  while (!(SPI1->SR & SPI_SR_TXE)) {
 8000334:	bf00      	nop
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <DAC_write+0x54>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f9      	beq.n	8000336 <DAC_write+0x16>
  }

  // writing to the DAC
  SPI1->DR = 0x1000 + dig_val;
 8000342:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <DAC_write+0x54>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800034a:	60d3      	str	r3, [r2, #12]
  while (SPI1->SR & SPI_SR_BSY) {
 800034c:	bf00      	nop
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <DAC_write+0x54>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f9      	bne.n	800034e <DAC_write+0x2e>
  } // Wait for the SPI bus to become idle

  SPI1->CR1 |= SPI_CR1_SSI; // Set the SSI bit, setting the NSS pin high
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <DAC_write+0x54>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <DAC_write+0x54>)
 8000360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000364:	6013      	str	r3, [r2, #0]
                            // (deselect slave device)
}
 8000366:	bf00      	nop
 8000368:	4618      	mov	r0, r3
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	40013000 	.word	0x40013000

08000378 <SysTick_Init>:
#include "delay.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <SysTick_Init+0x28>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a07      	ldr	r2, [pc, #28]	; (80003a0 <SysTick_Init+0x28>)
 8000382:	f043 0305 	orr.w	r3, r3, #5
 8000386:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <SysTick_Init+0x28>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <SysTick_Init+0x28>)
 800038e:	f023 0302 	bic.w	r3, r3, #2
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000e010 	.word	0xe000e010

080003a4 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <delay_us+0x50>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a11      	ldr	r2, [pc, #68]	; (80003f8 <delay_us+0x54>)
 80003b2:	fba2 2303 	umull	r2, r3, r2, r3
 80003b6:	0c9b      	lsrs	r3, r3, #18
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <delay_us+0x58>)
 80003c0:	3b01      	subs	r3, #1
 80003c2:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <delay_us+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <delay_us+0x58>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <delay_us+0x58>)
 80003d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d4:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 80003d6:	bf00      	nop
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <delay_us+0x58>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <delay_us+0x34>
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000034 	.word	0x20000034
 80003f8:	431bde83 	.word	0x431bde83
 80003fc:	e000e010 	.word	0xe000e010

08000400 <keypad_init>:
static    int cols[3] = {Col1, Col2, Col3}; //corresponds to GPIO pins
static    int rows[4] = {Row1, Row2, Row3, Row4}; //Corresponds to GPIO pins
static    int delay_time = 10000;

//This function, configures row, column and keypad pin
void keypad_init() {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

    //Making column pins output mode bits(01)
    COL_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2);
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <keypad_init+0x48>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <keypad_init+0x48>)
 800040a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800040e:	6013      	str	r3, [r2, #0]
    COL_PORT->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0);
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <keypad_init+0x48>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <keypad_init+0x48>)
 8000416:	f043 0315 	orr.w	r3, r3, #21
 800041a:	6013      	str	r3, [r2, #0]

    //Making row pins input mode bits(00)
    ROW_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <keypad_init+0x4c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a0a      	ldr	r2, [pc, #40]	; (800044c <keypad_init+0x4c>)
 8000422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000426:	6013      	str	r3, [r2, #0]

    //enable pull-down resistor bits(10)
    ROW_PORT->PUPDR &= (GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <keypad_init+0x4c>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	4a07      	ldr	r2, [pc, #28]	; (800044c <keypad_init+0x4c>)
 800042e:	b2db      	uxtb	r3, r3
 8000430:	60d3      	str	r3, [r2, #12]
    ROW_PORT->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <keypad_init+0x4c>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <keypad_init+0x4c>)
 8000438:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 800043c:	60d3      	str	r3, [r2, #12]
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	48000800 	.word	0x48000800
 800044c:	48000400 	.word	0x48000400

08000450 <keypad_read>:

uint32_t keypad_read(uint32_t cols, uint32_t row){
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
    COL_PORT -> BSRR = (Col1 |Col2|Col3); //outputs column pins to high
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <keypad_read+0x54>)
 800045c:	2207      	movs	r2, #7
 800045e:	619a      	str	r2, [r3, #24]

    //check if key is pressed
    if (ROW_PORT->IDR){
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <keypad_read+0x58>)
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d017      	beq.n	8000498 <keypad_read+0x48>

      //debounce delay
    	for (int delay = 0; delay < delay_time; delay++);
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	e002      	b.n	8000474 <keypad_read+0x24>
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3301      	adds	r3, #1
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <keypad_read+0x5c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	429a      	cmp	r2, r3
 800047c:	dbf7      	blt.n	800046e <keypad_read+0x1e>

    	//rechecks if key is presses still for debounce
    	if (ROW_PORT->IDR){
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <keypad_read+0x58>)
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d008      	beq.n	8000498 <keypad_read+0x48>
    		COL_PORT->BRR = (Col1 |Col2|Col3); //turn off columns
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <keypad_read+0x54>)
 8000488:	2207      	movs	r2, #7
 800048a:	629a      	str	r2, [r3, #40]	; 0x28

        //returns array position of keypress
        return check_row_col(NUM_OF_COLS, NUM_OF_ROWS);
 800048c:	2104      	movs	r1, #4
 800048e:	2003      	movs	r0, #3
 8000490:	f000 f80e 	bl	80004b0 <check_row_col>
 8000494:	4603      	mov	r3, r0
 8000496:	e001      	b.n	800049c <keypad_read+0x4c>
    	}
    }
    return -1;
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800049c:	4618      	mov	r0, r3
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	48000800 	.word	0x48000800
 80004a8:	48000400 	.word	0x48000400
 80004ac:	2000001c 	.word	0x2000001c

080004b0 <check_row_col>:

//iterate through each column and check all rows
uint32_t check_row_col(uint32_t col, uint32_t row){
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
    for (int c=0; c < col; c++){
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	e025      	b.n	800050c <check_row_col+0x5c>
        COL_PORT->BSRR = cols[c]; //turn on the column
 80004c0:	4a18      	ldr	r2, [pc, #96]	; (8000524 <check_row_col+0x74>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <check_row_col+0x78>)
 80004ca:	619a      	str	r2, [r3, #24]
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	e015      	b.n	80004fe <check_row_col+0x4e>
            if (ROW_PORT->IDR & (rows[r])) { //Check if key pressed is in the row
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <check_row_col+0x7c>)
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	4916      	ldr	r1, [pc, #88]	; (8000530 <check_row_col+0x80>)
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004de:	4013      	ands	r3, r2
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d009      	beq.n	80004f8 <check_row_col+0x48>
               return keys[r][c]; //returns array position of keypress
 80004e4:	4913      	ldr	r1, [pc, #76]	; (8000534 <check_row_col+0x84>)
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	18ca      	adds	r2, r1, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	e00f      	b.n	8000518 <check_row_col+0x68>
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	d8e5      	bhi.n	80004d2 <check_row_col+0x22>
    for (int c=0; c < col; c++){
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	3301      	adds	r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	429a      	cmp	r2, r3
 8000512:	d8d5      	bhi.n	80004c0 <check_row_col+0x10>
            }
        }
    }
    return -1;
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000518:	4618      	mov	r0, r3
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20000000 	.word	0x20000000
 8000528:	48000800 	.word	0x48000800
 800052c:	48000400 	.word	0x48000400
 8000530:	2000000c 	.word	0x2000000c
 8000534:	08001ed8 	.word	0x08001ed8

08000538 <LCD_init>:
int LCD_convert_ascii_to_time ( uint8_t asctime );

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  delay_us(100000);
 800053c:	4826      	ldr	r0, [pc, #152]	; (80005d8 <LCD_init+0xa0>)
 800053e:	f7ff ff31 	bl	80003a4 <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIODEN); // enable GPIOD clock on bus
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <LCD_init+0xa4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a25      	ldr	r2, [pc, #148]	; (80005dc <LCD_init+0xa4>)
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <LCD_init+0xa8>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <LCD_init+0xa8>)
 8000554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000558:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 800055c:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
        GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
        GPIO_MODER_MODE7); // clear bits for PA
  control_pins->MODER |=
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <LCD_init+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <LCD_init+0xa8>)
 8000564:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000568:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 800056c:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
       GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
       GPIO_MODER_MODE7_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <LCD_init+0xa8>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <LCD_init+0xa8>)
 8000574:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8000578:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4 |
        GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
  control_pins->OSPEEDR |=
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <LCD_init+0xa8>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <LCD_init+0xa8>)
 8000580:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000584:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
 8000588:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED3_Pos) | (3 << GPIO_OSPEEDR_OSPEED4_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED5_Pos) | (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED7_Pos));
  control_pins->BRR =
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <LCD_init+0xa8>)
 800058c:	22fe      	movs	r2, #254	; 0xfe
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <LCD_init+0xa0>)
 8000592:	f7ff ff07 	bl	80003a4 <delay_us>
  command(0x30);
 8000596:	2030      	movs	r0, #48	; 0x30
 8000598:	f000 f83c 	bl	8000614 <command>
  delay_us(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f7ff ff01 	bl	80003a4 <delay_us>
  command(0x30);
 80005a2:	2030      	movs	r0, #48	; 0x30
 80005a4:	f000 f836 	bl	8000614 <command>
  delay_us(100);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f7ff fefb 	bl	80003a4 <delay_us>
  command(0x30);
 80005ae:	2030      	movs	r0, #48	; 0x30
 80005b0:	f000 f830 	bl	8000614 <command>
  delay_us(100);
 80005b4:	2064      	movs	r0, #100	; 0x64
 80005b6:	f7ff fef5 	bl	80003a4 <delay_us>
  command(0x20);
 80005ba:	2020      	movs	r0, #32
 80005bc:	f000 f82a 	bl	8000614 <command>
  delay_us(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f7ff feef 	bl	80003a4 <delay_us>
  command(0x02);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f000 f824 	bl	8000614 <command>
  delay_us(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f7ff fee9 	bl	80003a4 <delay_us>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	000186a0 	.word	0x000186a0
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48000c00 	.word	0x48000c00

080005e4 <Nybble>:

void Nybble() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <Nybble+0x2c>)
 80005ea:	2208      	movs	r2, #8
 80005ec:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 80005ee:	2032      	movs	r0, #50	; 0x32
 80005f0:	f7ff fed8 	bl	80003a4 <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <Nybble+0x2c>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 80005fa:	2032      	movs	r0, #50	; 0x32
 80005fc:	f7ff fed2 	bl	80003a4 <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <Nybble+0x2c>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a02      	ldr	r2, [pc, #8]	; (8000610 <Nybble+0x2c>)
 8000606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800060a:	6153      	str	r3, [r2, #20]
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	48000c00 	.word	0x48000c00

08000614 <command>:

void command(uint8_t command) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <command+0xbc>)
 8000626:	2206      	movs	r2, #6
 8000628:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e017      	b.n	8000660 <command+0x4c>
    if ((command2 >> i) & 0x01) {
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	fa42 f303 	asr.w	r3, r2, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d006      	beq.n	800064e <command+0x3a>
      control_pins->BSRR = GPIO_Pin[i];
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <command+0xc0>)
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <command+0xbc>)
 800064a:	619a      	str	r2, [r3, #24]
 800064c:	e005      	b.n	800065a <command+0x46>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 800064e:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <command+0xc0>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <command+0xbc>)
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3301      	adds	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	2b03      	cmp	r3, #3
 8000664:	dde4      	ble.n	8000630 <command+0x1c>
    }
  }

  delay_us(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066a:	f7ff fe9b 	bl	80003a4 <delay_us>
  Nybble(); // Send pulse
 800066e:	f7ff ffb9 	bl	80005e4 <Nybble>

  for (int i = 0; i < 4; i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	e017      	b.n	80006a8 <command+0x94>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 8000678:	79fa      	ldrb	r2, [r7, #7]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	fa42 f303 	asr.w	r3, r2, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d006      	beq.n	8000696 <command+0x82>
      control_pins->BSRR = GPIO_Pin[i];
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <command+0xc0>)
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <command+0xbc>)
 8000692:	619a      	str	r2, [r3, #24]
 8000694:	e005      	b.n	80006a2 <command+0x8e>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <command+0xc0>)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <command+0xbc>)
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	3301      	adds	r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	dde4      	ble.n	8000678 <command+0x64>
    }
  }
  delay_us(1000);
 80006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b2:	f7ff fe77 	bl	80003a4 <delay_us>
  Nybble();                                    // Send pulse
 80006b6:	f7ff ff95 	bl	80005e4 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <command+0xbc>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <command+0xbc>)
 80006c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006c4:	6153      	str	r3, [r2, #20]
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	48000c00 	.word	0x48000c00
 80006d4:	20000020 	.word	0x20000020

080006d8 <write>:

void write(char letter) {  //write 1 character on the LCD display
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	091b      	lsrs	r3, r3, #4
 80006ea:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 80006ec:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <write+0xd0>)
 80006ee:	2202      	movs	r2, #2
 80006f0:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <write+0xd0>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e017      	b.n	800072e <write+0x56>
    if ((c2 >> i) & 0x01) {
 80006fe:	7bba      	ldrb	r2, [r7, #14]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa42 f303 	asr.w	r3, r2, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <write+0x44>
      control_pins->BSRR = GPIO_Pin[i];
 800070e:	4a27      	ldr	r2, [pc, #156]	; (80007ac <write+0xd4>)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <write+0xd0>)
 8000718:	619a      	str	r2, [r3, #24]
 800071a:	e005      	b.n	8000728 <write+0x50>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 800071c:	4a23      	ldr	r2, [pc, #140]	; (80007ac <write+0xd4>)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <write+0xd0>)
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b03      	cmp	r3, #3
 8000732:	dde4      	ble.n	80006fe <write+0x26>
    }
  }

  delay_us(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000738:	f7ff fe34 	bl	80003a4 <delay_us>
  Nybble(); //send pulse
 800073c:	f7ff ff52 	bl	80005e4 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	e017      	b.n	8000776 <write+0x9e>
    if ((c >> i) & 0x01) {
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	fa42 f303 	asr.w	r3, r2, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <write+0x8c>
      control_pins->BSRR = GPIO_Pin[i];
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <write+0xd4>)
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <write+0xd0>)
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	e005      	b.n	8000770 <write+0x98>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <write+0xd4>)
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <write+0xd0>)
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	3301      	adds	r3, #1
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	2b03      	cmp	r3, #3
 800077a:	dde4      	ble.n	8000746 <write+0x6e>
    }
  }
  delay_us(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000780:	f7ff fe10 	bl	80003a4 <delay_us>
  Nybble(); //send pulse
 8000784:	f7ff ff2e 	bl	80005e4 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <write+0xd0>)
 800078a:	2202      	movs	r2, #2
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <write+0xd0>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <write+0xd0>)
 8000794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000798:	6153      	str	r3, [r2, #20]
  delay_us(100);
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f7ff fe02 	bl	80003a4 <delay_us>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	48000c00 	.word	0x48000c00
 80007ac:	20000020 	.word	0x20000020

080007b0 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d103      	bne.n	80007ce <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	3b80      	subs	r3, #128	; 0x80
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e002      	b.n	80007d4 <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	3b40      	subs	r3, #64	; 0x40
 80007d2:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff1c 	bl	8000614 <command>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e00c      	b.n	800080c <str_write+0x28>
    write(str[i]);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff6c 	bl	80006d8 <write>
    delay_us(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f7ff fdcf 	bl	80003a4 <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1ec      	bne.n	80007f2 <str_write+0xe>
  }
	delay_us(100);
 8000818:	2064      	movs	r0, #100	; 0x64
 800081a:	f7ff fdc3 	bl	80003a4 <delay_us>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <main>:
uint32_t count = 0;
uint32_t duty_cycle = 4;
uint32_t wave_type = 0;
uint32_t polarity = 0;

int main(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 800082e:	4bab      	ldr	r3, [pc, #684]	; (8000adc <main+0x2b4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4aaa      	ldr	r2, [pc, #680]	; (8000adc <main+0x2b4>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 800083a:	4ba8      	ldr	r3, [pc, #672]	; (8000adc <main+0x2b4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4aa7      	ldr	r2, [pc, #668]	; (8000adc <main+0x2b4>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOEEN);
 8000846:	4ba5      	ldr	r3, [pc, #660]	; (8000adc <main+0x2b4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4aa4      	ldr	r2, [pc, #656]	; (8000adc <main+0x2b4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c

	HAL_Init();
 8000852:	f000 fb14 	bl	8000e7e <HAL_Init>
	SystemClock_Config();
 8000856:	f000 f9f5 	bl	8000c44 <SystemClock_Config>
	SysTick_Init();
 800085a:	f7ff fd8d 	bl	8000378 <SysTick_Init>
	LCD_init();
 800085e:	f7ff fe6b 	bl	8000538 <LCD_init>
	keypad_init();
 8000862:	f7ff fdcd 	bl	8000400 <keypad_init>
	SPI_init();
 8000866:	f7ff fcc1 	bl	80001ec <SPI_init>

	lcd_set_cursor_position(0, 0);
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff9f 	bl	80007b0 <lcd_set_cursor_position>
	str_write("SQU 100 Hz  LAST");
 8000872:	489b      	ldr	r0, [pc, #620]	; (8000ae0 <main+0x2b8>)
 8000874:	f7ff ffb6 	bl	80007e4 <str_write>
	lcd_set_cursor_position(1, 0);
 8000878:	2100      	movs	r1, #0
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff98 	bl	80007b0 <lcd_set_cursor_position>
	str_write("50% DUTY     '9'");
 8000880:	4898      	ldr	r0, [pc, #608]	; (8000ae4 <main+0x2bc>)
 8000882:	f7ff ffaf 	bl	80007e4 <str_write>
	command(0x0C);
 8000886:	200c      	movs	r0, #12
 8000888:	f7ff fec4 	bl	8000614 <command>

	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 800088c:	4b93      	ldr	r3, [pc, #588]	; (8000adc <main+0x2b4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	4a92      	ldr	r2, [pc, #584]	; (8000adc <main+0x2b4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->DIER |= (TIM_DIER_UIE);  // enable event gen, rcv CCR1
 8000898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	60d3      	str	r3, [r2, #12]
	TIM2->ARR = 280;         // ARR = T = counts @4MHz
 80008a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->SR &= ~(TIM_SR_UIF);       // clr IRQ flag in status reg
 80008b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008bc:	f023 0301 	bic.w	r3, r3, #1
 80008c0:	6113      	str	r3, [r2, #16]
	NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 80008c2:	4b89      	ldr	r3, [pc, #548]	; (8000ae8 <main+0x2c0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a88      	ldr	r2, [pc, #544]	; (8000ae8 <main+0x2c0>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80008ce:	b662      	cpsie	i
}
 80008d0:	bf00      	nop
	__enable_irq();                                 // global IRQ enable
	TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
 80008d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6013      	str	r3, [r2, #0]

	// Set pin 1 as output mode
	GPIOE->MODER &= ~(GPIO_MODER_MODE15);
 80008e2:	4b82      	ldr	r3, [pc, #520]	; (8000aec <main+0x2c4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a81      	ldr	r2, [pc, #516]	; (8000aec <main+0x2c4>)
 80008e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80008ec:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (GPIO_MODER_MODE15_0);
 80008ee:	4b7f      	ldr	r3, [pc, #508]	; (8000aec <main+0x2c4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a7e      	ldr	r2, [pc, #504]	; (8000aec <main+0x2c4>)
 80008f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008f8:	6013      	str	r3, [r2, #0]

	while (1) {

		int output = keypad_read(4, 3); // get key value
 80008fa:	2103      	movs	r1, #3
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fda7 	bl	8000450 <keypad_read>
 8000902:	4603      	mov	r3, r0
 8000904:	607b      	str	r3, [r7, #4]

		if (output != -1) { //if key is pressed
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d0f5      	beq.n	80008fa <main+0xd2>
			lcd_set_cursor_position(1, 14);
 800090e:	210e      	movs	r1, #14
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff4d 	bl	80007b0 <lcd_set_cursor_position>
			write(output + '0'); //write latest key at position r1, c14
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3330      	adds	r3, #48	; 0x30
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fedc 	bl	80006d8 <write>

			if ((output < 6) && (output > 0)) { //changes frequency
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b05      	cmp	r3, #5
 8000924:	dc0f      	bgt.n	8000946 <main+0x11e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd0c      	ble.n	8000946 <main+0x11e>
				frequency = output;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a70      	ldr	r2, [pc, #448]	; (8000af0 <main+0x2c8>)
 8000930:	6013      	str	r3, [r2, #0]
				lcd_set_cursor_position(0, 4);
 8000932:	2104      	movs	r1, #4
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff3b 	bl	80007b0 <lcd_set_cursor_position>
				write(output + '0'); //write to board
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3330      	adds	r3, #48	; 0x30
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff feca 	bl	80006d8 <write>
 8000944:	e10a      	b.n	8000b5c <main+0x334>
			} else if (output == 6) { //generate sine wave
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b06      	cmp	r3, #6
 800094a:	d111      	bne.n	8000970 <main+0x148>
				wave_type = 1; //wave type 1 is sine wave
 800094c:	4b69      	ldr	r3, [pc, #420]	; (8000af4 <main+0x2cc>)
 800094e:	2201      	movs	r2, #1
 8000950:	601a      	str	r2, [r3, #0]
				lcd_set_cursor_position(0, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff ff2b 	bl	80007b0 <lcd_set_cursor_position>
				str_write("SIN");
 800095a:	4867      	ldr	r0, [pc, #412]	; (8000af8 <main+0x2d0>)
 800095c:	f7ff ff42 	bl	80007e4 <str_write>
				lcd_set_cursor_position(1, 0);
 8000960:	2100      	movs	r1, #0
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff24 	bl	80007b0 <lcd_set_cursor_position>
				str_write("1980 PTS");
 8000968:	4864      	ldr	r0, [pc, #400]	; (8000afc <main+0x2d4>)
 800096a:	f7ff ff3b 	bl	80007e4 <str_write>
 800096e:	e0f5      	b.n	8000b5c <main+0x334>
			} else if (output == 7) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b07      	cmp	r3, #7
 8000974:	d119      	bne.n	80009aa <main+0x182>
				wave_type = 2;
 8000976:	4b5f      	ldr	r3, [pc, #380]	; (8000af4 <main+0x2cc>)
 8000978:	2202      	movs	r2, #2
 800097a:	601a      	str	r2, [r3, #0]
				lcd_set_cursor_position(0, 0);
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ff16 	bl	80007b0 <lcd_set_cursor_position>
				str_write("SAW");
 8000984:	485e      	ldr	r0, [pc, #376]	; (8000b00 <main+0x2d8>)
 8000986:	f7ff ff2d 	bl	80007e4 <str_write>
				lcd_set_cursor_position(1, 0);
 800098a:	2100      	movs	r1, #0
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ff0f 	bl	80007b0 <lcd_set_cursor_position>
				if (polarity)
 8000992:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <main+0x2dc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <main+0x17a>
					str_write("POSITIVE");
 800099a:	485b      	ldr	r0, [pc, #364]	; (8000b08 <main+0x2e0>)
 800099c:	f7ff ff22 	bl	80007e4 <str_write>
 80009a0:	e0dc      	b.n	8000b5c <main+0x334>
				else
					str_write("NEGATIVE");
 80009a2:	485a      	ldr	r0, [pc, #360]	; (8000b0c <main+0x2e4>)
 80009a4:	f7ff ff1e 	bl	80007e4 <str_write>
 80009a8:	e0d8      	b.n	8000b5c <main+0x334>
			} else if (output == 8) {
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b08      	cmp	r3, #8
 80009ae:	d11b      	bne.n	80009e8 <main+0x1c0>
				wave_type = 0;
 80009b0:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <main+0x2cc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
				lcd_set_cursor_position(1, 0);
 80009b6:	2100      	movs	r1, #0
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fef9 	bl	80007b0 <lcd_set_cursor_position>
				write(duty_cycle + 1 + '0'); //write to board
 80009be:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <main+0x2e8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3331      	adds	r3, #49	; 0x31
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe87 	bl	80006d8 <write>
				lcd_set_cursor_position(0, 0);
 80009ca:	2100      	movs	r1, #0
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff feef 	bl	80007b0 <lcd_set_cursor_position>
				str_write("SQU");
 80009d2:	4850      	ldr	r0, [pc, #320]	; (8000b14 <main+0x2ec>)
 80009d4:	f7ff ff06 	bl	80007e4 <str_write>
				lcd_set_cursor_position(1, 1);
 80009d8:	2101      	movs	r1, #1
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fee8 	bl	80007b0 <lcd_set_cursor_position>
				str_write("0% DUTY");
 80009e0:	484d      	ldr	r0, [pc, #308]	; (8000b18 <main+0x2f0>)
 80009e2:	f7ff feff 	bl	80007e4 <str_write>
 80009e6:	e0b9      	b.n	8000b5c <main+0x334>
			} else if (output == 9) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b09      	cmp	r3, #9
 80009ec:	d124      	bne.n	8000a38 <main+0x210>
				wave_type = 0;
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <main+0x2cc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
				duty_cycle = 4;
 80009f4:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <main+0x2e8>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	601a      	str	r2, [r3, #0]
				frequency = 1;
 80009fa:	4b3d      	ldr	r3, [pc, #244]	; (8000af0 <main+0x2c8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
				lcd_set_cursor_position(0, 4);
 8000a00:	2104      	movs	r1, #4
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fed4 	bl	80007b0 <lcd_set_cursor_position>
				write('1'); //write to board
 8000a08:	2031      	movs	r0, #49	; 0x31
 8000a0a:	f7ff fe65 	bl	80006d8 <write>
				lcd_set_cursor_position(0, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fecd 	bl	80007b0 <lcd_set_cursor_position>
				str_write("SQU");
 8000a16:	483f      	ldr	r0, [pc, #252]	; (8000b14 <main+0x2ec>)
 8000a18:	f7ff fee4 	bl	80007e4 <str_write>
				lcd_set_cursor_position(1, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff fec6 	bl	80007b0 <lcd_set_cursor_position>
				write(duty_cycle + 1 + '0');
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <main+0x2e8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3331      	adds	r3, #49	; 0x31
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe54 	bl	80006d8 <write>
				str_write("0% DUTY");
 8000a30:	4839      	ldr	r0, [pc, #228]	; (8000b18 <main+0x2f0>)
 8000a32:	f7ff fed7 	bl	80007e4 <str_write>
 8000a36:	e091      	b.n	8000b5c <main+0x334>
			} else if (output == 10) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b0a      	cmp	r3, #10
 8000a3c:	d11a      	bne.n	8000a74 <main+0x24c>
				if (duty_cycle != 0)
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <main+0x2e8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <main+0x228>
					duty_cycle--;
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <main+0x2e8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	4a30      	ldr	r2, [pc, #192]	; (8000b10 <main+0x2e8>)
 8000a4e:	6013      	str	r3, [r2, #0]
				lcd_set_cursor_position(1, 0);
 8000a50:	2100      	movs	r1, #0
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff feac 	bl	80007b0 <lcd_set_cursor_position>
				write(duty_cycle + 1 + '0');
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <main+0x2e8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3331      	adds	r3, #49	; 0x31
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe3a 	bl	80006d8 <write>
				lcd_set_cursor_position(1, 14);
 8000a64:	210e      	movs	r1, #14
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff fea2 	bl	80007b0 <lcd_set_cursor_position>
				write('*');
 8000a6c:	202a      	movs	r0, #42	; 0x2a
 8000a6e:	f7ff fe33 	bl	80006d8 <write>
 8000a72:	e073      	b.n	8000b5c <main+0x334>

			} else if (output == 11) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b0b      	cmp	r3, #11
 8000a78:	d11a      	bne.n	8000ab0 <main+0x288>
				if (duty_cycle != 8)
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <main+0x2e8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d004      	beq.n	8000a8c <main+0x264>
					duty_cycle++;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <main+0x2e8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <main+0x2e8>)
 8000a8a:	6013      	str	r3, [r2, #0]
				lcd_set_cursor_position(1, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fe8e 	bl	80007b0 <lcd_set_cursor_position>
				write(duty_cycle + 1 + '0');
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <main+0x2e8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3331      	adds	r3, #49	; 0x31
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe1c 	bl	80006d8 <write>
				lcd_set_cursor_position(1, 14);
 8000aa0:	210e      	movs	r1, #14
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fe84 	bl	80007b0 <lcd_set_cursor_position>
				write('#');
 8000aa8:	2023      	movs	r0, #35	; 0x23
 8000aaa:	f7ff fe15 	bl	80006d8 <write>
 8000aae:	e055      	b.n	8000b5c <main+0x334>
			} else if (output == 0) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d152      	bne.n	8000b5c <main+0x334>
				if (wave_type == 0) {
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <main+0x2cc>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d12e      	bne.n	8000b1c <main+0x2f4>
					duty_cycle = 4;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <main+0x2e8>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	601a      	str	r2, [r3, #0]
					lcd_set_cursor_position(1, 0);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fe72 	bl	80007b0 <lcd_set_cursor_position>
					write(duty_cycle + 1 + '0');
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <main+0x2e8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3331      	adds	r3, #49	; 0x31
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe00 	bl	80006d8 <write>
 8000ad8:	e039      	b.n	8000b4e <main+0x326>
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	08001e78 	.word	0x08001e78
 8000ae4:	08001e8c 	.word	0x08001e8c
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	48001000 	.word	0x48001000
 8000af0:	2000002c 	.word	0x2000002c
 8000af4:	20001b2c 	.word	0x20001b2c
 8000af8:	08001ea0 	.word	0x08001ea0
 8000afc:	08001ea4 	.word	0x08001ea4
 8000b00:	08001eb0 	.word	0x08001eb0
 8000b04:	20001b30 	.word	0x20001b30
 8000b08:	08001eb4 	.word	0x08001eb4
 8000b0c:	08001ec0 	.word	0x08001ec0
 8000b10:	20000030 	.word	0x20000030
 8000b14:	08001ecc 	.word	0x08001ecc
 8000b18:	08001ed0 	.word	0x08001ed0
				} else if (wave_type == 2) {
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <main+0x348>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d114      	bne.n	8000b4e <main+0x326>
					polarity = polarity ^ 1;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <main+0x34c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f083 0301 	eor.w	r3, r3, #1
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <main+0x34c>)
 8000b2e:	6013      	str	r3, [r2, #0]
					lcd_set_cursor_position(1, 0);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fe3c 	bl	80007b0 <lcd_set_cursor_position>
					if (polarity)
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <main+0x34c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <main+0x320>
						str_write("POSITIVE");
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <main+0x350>)
 8000b42:	f7ff fe4f 	bl	80007e4 <str_write>
 8000b46:	e002      	b.n	8000b4e <main+0x326>
					else
						str_write("NEGATIVE");
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <main+0x354>)
 8000b4a:	f7ff fe4b 	bl	80007e4 <str_write>
				}
				lcd_set_cursor_position(1, 14);
 8000b4e:	210e      	movs	r1, #14
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fe2d 	bl	80007b0 <lcd_set_cursor_position>
				write('0');
 8000b56:	2030      	movs	r0, #48	; 0x30
 8000b58:	f7ff fdbe 	bl	80006d8 <write>
			}

			delay_us(300000); //300ms
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <main+0x358>)
 8000b5e:	f7ff fc21 	bl	80003a4 <delay_us>
			NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <main+0x35c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <main+0x35c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6013      	str	r3, [r2, #0]
	while (1) {
 8000b6e:	e6c4      	b.n	80008fa <main+0xd2>
 8000b70:	20001b2c 	.word	0x20001b2c
 8000b74:	20001b30 	.word	0x20001b30
 8000b78:	08001eb4 	.word	0x08001eb4
 8000b7c:	08001ec0 	.word	0x08001ec0
 8000b80:	000493e0 	.word	0x000493e0
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <TIM2_IRQHandler>:

	}

}

void TIM2_IRQHandler(void) {
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af02      	add	r7, sp, #8
	GPIOE->BSRR = (GPIO_PIN_15);
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <TIM2_IRQHandler+0x9c>)
 8000b90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b94:	619a      	str	r2, [r3, #24]
	if (TIM2->SR & TIM_SR_UIF) {
 8000b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d036      	beq.n	8000c12 <TIM2_IRQHandler+0x8a>
		TIM2->SR &= ~(TIM_SR_UIF);
 8000ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	6113      	str	r3, [r2, #16]
		if (keypad_read(4, 3) != -1)
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	2004      	movs	r0, #4
 8000bb8:	f7ff fc4a 	bl	8000450 <keypad_read>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc2:	d007      	beq.n	8000bd4 <TIM2_IRQHandler+0x4c>
			NVIC->ICER[0] |= (1 << (TIM2_IRQn & 0x1F));
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <TIM2_IRQHandler+0xa0>)
 8000bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <TIM2_IRQHandler+0xa0>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if (count < MAX_POINTS) {
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <TIM2_IRQHandler+0xa4>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <TIM2_IRQHandler+0xa8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d215      	bcs.n	8000c0c <TIM2_IRQHandler+0x84>
			wave(wave_type, count, duty_cycle, polarity, MAX_POINTS);
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <TIM2_IRQHandler+0xac>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <TIM2_IRQHandler+0xa4>)
 8000be6:	6819      	ldr	r1, [r3, #0]
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <TIM2_IRQHandler+0xb0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <TIM2_IRQHandler+0xb4>)
 8000bee:	681c      	ldr	r4, [r3, #0]
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <TIM2_IRQHandler+0xa8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	f000 f8d0 	bl	8000d9c <wave>

			//increment count by the selected frequency
			count += frequency;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <TIM2_IRQHandler+0xa4>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <TIM2_IRQHandler+0xb8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <TIM2_IRQHandler+0xa4>)
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e002      	b.n	8000c12 <TIM2_IRQHandler+0x8a>
		}
		//Once count reached max_points, reset
		else {
			count = 0;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <TIM2_IRQHandler+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
		}

	}
	GPIOE->BRR = (GPIO_PIN_15);
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <TIM2_IRQHandler+0x9c>)
 8000c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c1a:	bf00      	nop
 8000c1c:	3704      	adds	r7, #4
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	48001000 	.word	0x48001000
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	20001b28 	.word	0x20001b28
 8000c30:	20000028 	.word	0x20000028
 8000c34:	20001b2c 	.word	0x20001b2c
 8000c38:	20000030 	.word	0x20000030
 8000c3c:	20001b30 	.word	0x20001b30
 8000c40:	2000002c 	.word	0x2000002c

08000c44 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b096      	sub	sp, #88	; 0x58
 8000c48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2244      	movs	r2, #68	; 0x44
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 f8fc 	bl	8001e50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c6a:	f000 fa71 	bl	8001150 <HAL_PWREx_ControlVoltageScaling>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000c74:	f000 f82c 	bl	8000cd0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000c84:	23a0      	movs	r3, #160	; 0xa0
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fab3 	bl	80011fc <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x5c>
		Error_Handler();
 8000c9c:	f000 f818 	bl	8000cd0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 feb9 	bl	8001a30 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x84>
		Error_Handler();
 8000cc4:	f000 f804 	bl	8000cd0 <Error_Handler>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	3758      	adds	r7, #88	; 0x58
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f8da 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <wave>:
#include "wavegen.h"
#include "main.h"

uint32_t wave(uint32_t wave_type, uint32_t offset, uint32_t duty_cycle, uint32_t polarity,
		uint32_t num_points) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
	switch (wave_type) {
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d003      	beq.n	8000db8 <wave+0x1c>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d008      	beq.n	8000dc8 <wave+0x2c>
 8000db6:	e01a      	b.n	8000dee <wave+0x52>
	case 1: //wave = 1 sin
		DAC_write(SINE[offset]);
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <wave+0x80>)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff faad 	bl	8000320 <DAC_write>
		break;
 8000dc6:	e023      	b.n	8000e10 <wave+0x74>
	case 2: //wave = 2 sawtooth
		if (polarity) DAC_write(SAWTOOTH[offset]);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <wave+0x42>
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <wave+0x84>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff faa2 	bl	8000320 <DAC_write>
		else DAC_write(NSAWTOOTH[offset]);
		break;
 8000ddc:	e018      	b.n	8000e10 <wave+0x74>
		else DAC_write(NSAWTOOTH[offset]);
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <wave+0x88>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa9a 	bl	8000320 <DAC_write>
		break;
 8000dec:	e010      	b.n	8000e10 <wave+0x74>


	default: //wave = 0 sqaure_wave
		if (offset <= (WAVE_CYCLE[duty_cycle])) {
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <wave+0x8c>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d804      	bhi.n	8000e08 <wave+0x6c>
			DAC_write(0xBEF); //3v
 8000dfe:	f640 30ef 	movw	r0, #3055	; 0xbef
 8000e02:	f7ff fa8d 	bl	8000320 <DAC_write>
		} else {
			DAC_write(0x5F); //0V
		}
		break;
 8000e06:	e002      	b.n	8000e0e <wave+0x72>
			DAC_write(0x5F); //0V
 8000e08:	205f      	movs	r0, #95	; 0x5f
 8000e0a:	f7ff fa89 	bl	8000320 <DAC_write>
		break;
 8000e0e:	bf00      	nop
	}
}
 8000e10:	bf00      	nop
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000121c 	.word	0x2000121c
 8000e20:	20000934 	.word	0x20000934
 8000e24:	2000004c 	.word	0x2000004c
 8000e28:	20000038 	.word	0x20000038

08000e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e30:	f7ff ffa2 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f000 ffd5 	bl	8001e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5e:	f7ff fce3 	bl	8000828 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20001b0c 	.word	0x20001b0c
  ldr r2, =_sidata
 8000e70:	08001f2c 	.word	0x08001f2c
  ldr r2, =_sbss
 8000e74:	20001b0c 	.word	0x20001b0c
  ldr r4, =_ebss
 8000e78:	20001b38 	.word	0x20001b38

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>

08000e7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f91f 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f80e 	bl	8000eb0 <HAL_InitTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	e001      	b.n	8000ea4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea0:	f7ff ff1c 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_InitTick+0x6c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d023      	beq.n	8000f0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_InitTick+0x70>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f91d 	bl	800111a <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d809      	bhi.n	8000f00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f8f5 	bl	80010e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_InitTick+0x74>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e004      	b.n	8000f10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e001      	b.n	8000f10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20001b08 	.word	0x20001b08
 8000f20:	20000034 	.word	0x20000034
 8000f24:	20001b04 	.word	0x20001b04

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20001b08 	.word	0x20001b08
 8000f4c:	20001b34 	.word	0x20001b34

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20001b34 	.word	0x20001b34

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff47 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff5c 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffb0 	bl	8001088 <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_PWREx_GetVoltageRange+0x18>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40007000 	.word	0x40007000

08001150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800115e:	d130      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116c:	d038      	beq.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2232      	movs	r2, #50	; 0x32
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9b      	lsrs	r3, r3, #18
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001194:	e002      	b.n	800119c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3b01      	subs	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a8:	d102      	bne.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f2      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011bc:	d110      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e00f      	b.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ce:	d007      	beq.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40007000 	.word	0x40007000
 80011f4:	20000034 	.word	0x20000034
 80011f8:	431bde83 	.word	0x431bde83

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	f000 bc08 	b.w	8001a20 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001210:	4b96      	ldr	r3, [pc, #600]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121a:	4b94      	ldr	r3, [pc, #592]	; (800146c <HAL_RCC_OscConfig+0x270>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80e4 	beq.w	80013fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d007      	beq.n	8001248 <HAL_RCC_OscConfig+0x4c>
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	f040 808b 	bne.w	8001356 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b01      	cmp	r3, #1
 8001244:	f040 8087 	bne.w	8001356 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001248:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_OscConfig+0x64>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e3df      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1a      	ldr	r2, [r3, #32]
 8001264:	4b81      	ldr	r3, [pc, #516]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_RCC_OscConfig+0x7e>
 8001270:	4b7e      	ldr	r3, [pc, #504]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001278:	e005      	b.n	8001286 <HAL_RCC_OscConfig+0x8a>
 800127a:	4b7c      	ldr	r3, [pc, #496]	; (800146c <HAL_RCC_OscConfig+0x270>)
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001286:	4293      	cmp	r3, r2
 8001288:	d223      	bcs.n	80012d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fd5a 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e3c0      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129e:	4b73      	ldr	r3, [pc, #460]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a72      	ldr	r2, [pc, #456]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b70      	ldr	r3, [pc, #448]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	496d      	ldr	r1, [pc, #436]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012bc:	4b6b      	ldr	r3, [pc, #428]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	4968      	ldr	r1, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
 80012d0:	e025      	b.n	800131e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b63      	ldr	r3, [pc, #396]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4960      	ldr	r1, [pc, #384]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f0:	4b5e      	ldr	r3, [pc, #376]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	495b      	ldr	r1, [pc, #364]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd1a 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e380      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800131e:	f000 fc87 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001322:	4602      	mov	r2, r0
 8001324:	4b51      	ldr	r3, [pc, #324]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	4950      	ldr	r1, [pc, #320]	; (8001470 <HAL_RCC_OscConfig+0x274>)
 8001330:	5ccb      	ldrb	r3, [r1, r3]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	4a4e      	ldr	r2, [pc, #312]	; (8001474 <HAL_RCC_OscConfig+0x278>)
 800133c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800133e:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fdb4 	bl	8000eb0 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d052      	beq.n	80013f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	e364      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d032      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800135e:	4b43      	ldr	r3, [pc, #268]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a42      	ldr	r2, [pc, #264]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136a:	f7ff fdf1 	bl	8000f50 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001372:	f7ff fded 	bl	8000f50 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e34d      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001384:	4b39      	ldr	r3, [pc, #228]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001390:	4b36      	ldr	r3, [pc, #216]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a35      	ldr	r2, [pc, #212]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b33      	ldr	r3, [pc, #204]	; (800146c <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4930      	ldr	r1, [pc, #192]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	492b      	ldr	r1, [pc, #172]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
 80013c2:	e01a      	b.n	80013fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fdbe 	bl	8000f50 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d8:	f7ff fdba 	bl	8000f50 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e31a      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1dc>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d073      	beq.n	80014ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x21c>
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d10e      	bne.n	8001430 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d10b      	bne.n	8001430 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d063      	beq.n	80014ec <HAL_RCC_OscConfig+0x2f0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d15f      	bne.n	80014ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e2f7      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001438:	d106      	bne.n	8001448 <HAL_RCC_OscConfig+0x24c>
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e025      	b.n	8001494 <HAL_RCC_OscConfig+0x298>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001450:	d114      	bne.n	800147c <HAL_RCC_OscConfig+0x280>
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a02      	ldr	r2, [pc, #8]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e013      	b.n	8001494 <HAL_RCC_OscConfig+0x298>
 800146c:	40021000 	.word	0x40021000
 8001470:	08001ee4 	.word	0x08001ee4
 8001474:	20000034 	.word	0x20000034
 8001478:	20001b04 	.word	0x20001b04
 800147c:	4ba0      	ldr	r3, [pc, #640]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a9f      	ldr	r2, [pc, #636]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b9d      	ldr	r3, [pc, #628]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a9c      	ldr	r2, [pc, #624]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fd58 	bl	8000f50 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fd54 	bl	8000f50 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e2b4      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2a8>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fd44 	bl	8000f50 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fd40 	bl	8000f50 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e2a0      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x2d0>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d060      	beq.n	80015bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x310>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d119      	bne.n	800153a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d116      	bne.n	800153a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	4b7c      	ldr	r3, [pc, #496]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x328>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e27d      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b76      	ldr	r3, [pc, #472]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	4973      	ldr	r1, [pc, #460]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	e040      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d023      	beq.n	800158a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001542:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6e      	ldr	r2, [pc, #440]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fcff 	bl	8000f50 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fcfb 	bl	8000f50 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e25b      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001568:	4b65      	ldr	r3, [pc, #404]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b62      	ldr	r3, [pc, #392]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	495f      	ldr	r1, [pc, #380]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	e018      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a5c      	ldr	r2, [pc, #368]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fcdb 	bl	8000f50 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fcd7 	bl	8000f50 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e237      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b0:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d03c      	beq.n	8001642 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01c      	beq.n	800160a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fcb6 	bl	8000f50 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fcb2 	bl	8000f50 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e212      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ef      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3ec>
 8001608:	e01b      	b.n	8001642 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800160c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001610:	4a3b      	ldr	r2, [pc, #236]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fc99 	bl	8000f50 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fc95 	bl	8000f50 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1f5      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a6 	beq.w	800179c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10d      	bne.n	800167c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a26      	ldr	r2, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001678:	2301      	movs	r3, #1
 800167a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x508>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d118      	bne.n	80016ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_OscConfig+0x508>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_RCC_OscConfig+0x508>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001694:	f7ff fc5c 	bl	8000f50 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff fc58 	bl	8000f50 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1b8      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x508>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4d8>
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d2:	e029      	b.n	8001728 <HAL_RCC_OscConfig+0x52c>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d115      	bne.n	8001708 <HAL_RCC_OscConfig+0x50c>
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x52c>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40007000 	.word	0x40007000
 8001708:	4b9d      	ldr	r3, [pc, #628]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a9c      	ldr	r2, [pc, #624]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001718:	4b99      	ldr	r3, [pc, #612]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a98      	ldr	r2, [pc, #608]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d016      	beq.n	800175e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fc0e 	bl	8000f50 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fc0a 	bl	8000f50 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e168      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174e:	4b8c      	ldr	r3, [pc, #560]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ed      	beq.n	8001738 <HAL_RCC_OscConfig+0x53c>
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fbf7 	bl	8000f50 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fbf3 	bl	8000f50 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e151      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177c:	4b80      	ldr	r3, [pc, #512]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ed      	bne.n	8001766 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03c      	beq.n	8001822 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01c      	beq.n	80017ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017b0:	4b73      	ldr	r3, [pc, #460]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80017b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b6:	4a72      	ldr	r2, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fbc6 	bl	8000f50 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c8:	f7ff fbc2 	bl	8000f50 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e122      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017da:	4b69      	ldr	r3, [pc, #420]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80017dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ef      	beq.n	80017c8 <HAL_RCC_OscConfig+0x5cc>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80017ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f0:	4a63      	ldr	r2, [pc, #396]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fba9 	bl	8000f50 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001802:	f7ff fba5 	bl	8000f50 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e105      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001814:	4b5a      	ldr	r3, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80f9 	beq.w	8001a1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	2b02      	cmp	r3, #2
 8001832:	f040 80cf 	bne.w	80019d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001836:	4b52      	ldr	r3, [pc, #328]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f003 0203 	and.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d12c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	3b01      	subs	r3, #1
 8001856:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d123      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001866:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d11b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d113      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d109      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	3b01      	subs	r3, #1
 800189e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d071      	beq.n	8001988 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d068      	beq.n	800197c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0ac      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80018cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d2:	f7ff fb3d 	bl	8000f50 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb39 	bl	8000f50 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e099      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_RCC_OscConfig+0x788>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001908:	3a01      	subs	r2, #1
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001912:	0212      	lsls	r2, r2, #8
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800191a:	0852      	lsrs	r2, r2, #1
 800191c:	3a01      	subs	r2, #1
 800191e:	0552      	lsls	r2, r2, #21
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001926:	0852      	lsrs	r2, r2, #1
 8001928:	3a01      	subs	r2, #1
 800192a:	0652      	lsls	r2, r2, #25
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001932:	06d2      	lsls	r2, r2, #27
 8001934:	430a      	orrs	r2, r1
 8001936:	4912      	ldr	r1, [pc, #72]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001954:	f7ff fafc 	bl	8000f50 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff faf8 	bl	8000f50 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e058      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_RCC_OscConfig+0x784>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197a:	e050      	b.n	8001a1e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e04f      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
 8001980:	40021000 	.word	0x40021000
 8001984:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d144      	bne.n	8001a1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 800199a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ac:	f7ff fad0 	bl	8000f50 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff facc 	bl	8000f50 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e02c      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x7b8>
 80019d2:	e024      	b.n	8001a1e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d01f      	beq.n	8001a1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fab3 	bl	8000f50 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff faaf 	bl	8000f50 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e00f      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4905      	ldr	r1, [pc, #20]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_RCC_OscConfig+0x830>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
 8001a18:	e001      	b.n	8001a1e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	feeefffc 	.word	0xfeeefffc

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0e7      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b75      	ldr	r3, [pc, #468]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4970      	ldr	r1, [pc, #448]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b6e      	ldr	r3, [pc, #440]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cf      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4960      	ldr	r1, [pc, #384]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d04c      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d121      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0a6      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	4b54      	ldr	r3, [pc, #336]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d115      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e09a      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae6:	4b4e      	ldr	r3, [pc, #312]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e08e      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e086      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4943      	ldr	r1, [pc, #268]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b18:	f7ff fa1a 	bl	8000f50 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fa16 	bl	8000f50 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e06e      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d208      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	492b      	ldr	r1, [pc, #172]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d210      	bcs.n	8001ba6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0207 	bic.w	r2, r3, #7
 8001b8c:	4923      	ldr	r1, [pc, #140]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e036      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4918      	ldr	r1, [pc, #96]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d009      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4910      	ldr	r1, [pc, #64]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be4:	f000 f824 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	490b      	ldr	r1, [pc, #44]	; (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1fc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f951 	bl	8000eb0 <HAL_InitTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c12:	7afb      	ldrb	r3, [r7, #11]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08001ee4 	.word	0x08001ee4
 8001c28:	20000034 	.word	0x20000034
 8001c2c:	20001b04 	.word	0x20001b04

08001c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x34>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d121      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d11e      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e005      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c8c:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	e004      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d134      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d003      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0xac>
 8001cd4:	e005      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd8:	617b      	str	r3, [r7, #20]
      break;
 8001cda:	e005      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cde:	617b      	str	r3, [r7, #20]
      break;
 8001ce0:	e002      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	617b      	str	r3, [r7, #20]
      break;
 8001ce6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	fb03 f202 	mul.w	r2, r3, r2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	0e5b      	lsrs	r3, r3, #25
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d28:	69bb      	ldr	r3, [r7, #24]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08001ef4 	.word	0x08001ef4
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	007a1200 	.word	0x007a1200

08001d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d60:	f7ff f9e8 	bl	8001134 <HAL_PWREx_GetVoltageRange>
 8001d64:	6178      	str	r0, [r7, #20]
 8001d66:	e014      	b.n	8001d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d72:	6593      	str	r3, [r2, #88]	; 0x58
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d80:	f7ff f9d8 	bl	8001134 <HAL_PWREx_GetVoltageRange>
 8001d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d98:	d10b      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d919      	bls.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2ba0      	cmp	r3, #160	; 0xa0
 8001da4:	d902      	bls.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da6:	2302      	movs	r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e013      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dac:	2301      	movs	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e010      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b80      	cmp	r3, #128	; 0x80
 8001db6:	d902      	bls.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001db8:	2303      	movs	r3, #3
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e00a      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d102      	bne.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e004      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b70      	cmp	r3, #112	; 0x70
 8001dce:	d101      	bne.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0207 	bic.w	r2, r3, #7
 8001ddc:	4909      	ldr	r1, [pc, #36]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40022000 	.word	0x40022000

08001e08 <__libc_init_array>:
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	4d0d      	ldr	r5, [pc, #52]	; (8001e40 <__libc_init_array+0x38>)
 8001e0c:	4c0d      	ldr	r4, [pc, #52]	; (8001e44 <__libc_init_array+0x3c>)
 8001e0e:	1b64      	subs	r4, r4, r5
 8001e10:	10a4      	asrs	r4, r4, #2
 8001e12:	2600      	movs	r6, #0
 8001e14:	42a6      	cmp	r6, r4
 8001e16:	d109      	bne.n	8001e2c <__libc_init_array+0x24>
 8001e18:	4d0b      	ldr	r5, [pc, #44]	; (8001e48 <__libc_init_array+0x40>)
 8001e1a:	4c0c      	ldr	r4, [pc, #48]	; (8001e4c <__libc_init_array+0x44>)
 8001e1c:	f000 f820 	bl	8001e60 <_init>
 8001e20:	1b64      	subs	r4, r4, r5
 8001e22:	10a4      	asrs	r4, r4, #2
 8001e24:	2600      	movs	r6, #0
 8001e26:	42a6      	cmp	r6, r4
 8001e28:	d105      	bne.n	8001e36 <__libc_init_array+0x2e>
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e30:	4798      	blx	r3
 8001e32:	3601      	adds	r6, #1
 8001e34:	e7ee      	b.n	8001e14 <__libc_init_array+0xc>
 8001e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e3a:	4798      	blx	r3
 8001e3c:	3601      	adds	r6, #1
 8001e3e:	e7f2      	b.n	8001e26 <__libc_init_array+0x1e>
 8001e40:	08001f24 	.word	0x08001f24
 8001e44:	08001f24 	.word	0x08001f24
 8001e48:	08001f24 	.word	0x08001f24
 8001e4c:	08001f28 	.word	0x08001f28

08001e50 <memset>:
 8001e50:	4402      	add	r2, r0
 8001e52:	4603      	mov	r3, r0
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d100      	bne.n	8001e5a <memset+0xa>
 8001e58:	4770      	bx	lr
 8001e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e5e:	e7f9      	b.n	8001e54 <memset+0x4>

08001e60 <_init>:
 8001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e62:	bf00      	nop
 8001e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e66:	bc08      	pop	{r3}
 8001e68:	469e      	mov	lr, r3
 8001e6a:	4770      	bx	lr

08001e6c <_fini>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	bf00      	nop
 8001e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e72:	bc08      	pop	{r3}
 8001e74:	469e      	mov	lr, r3
 8001e76:	4770      	bx	lr
