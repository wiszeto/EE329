
A7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08002370  08002370  00012370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024ac  080024ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024ac  080024ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024ac  080024ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024ac  080024ac  000124ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080024c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080024c0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c83  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d9  00000000  00000000  00025cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  00026f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00027580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272c8  00000000  00000000  00027ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074b5  00000000  00000000  0004ed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee68a  00000000  00000000  0005622d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001448b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001614  00000000  00000000  00144908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002358 	.word	0x08002358

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002358 	.word	0x08002358

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2uiz>:
 80007bc:	004a      	lsls	r2, r1, #1
 80007be:	d211      	bcs.n	80007e4 <__aeabi_d2uiz+0x28>
 80007c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007c4:	d211      	bcs.n	80007ea <__aeabi_d2uiz+0x2e>
 80007c6:	d50d      	bpl.n	80007e4 <__aeabi_d2uiz+0x28>
 80007c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007d0:	d40e      	bmi.n	80007f0 <__aeabi_d2uiz+0x34>
 80007d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007de:	fa23 f002 	lsr.w	r0, r3, r2
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ee:	d102      	bne.n	80007f6 <__aeabi_d2uiz+0x3a>
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr

080007fc <ADC_Init>:

#include "main.h"
#include "ADC.h"
#include "delay_us.h"

void ADC_Init(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;         // turn on clock for ADC
 8000800:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <ADC_Init+0x13c>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	4a4c      	ldr	r2, [pc, #304]	; (8000938 <ADC_Init+0x13c>)
 8000806:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// power up & calibrate ADC
	ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // clock source = HCLK/1
 800080c:	4b4b      	ldr	r3, [pc, #300]	; (800093c <ADC_Init+0x140>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4a4a      	ldr	r2, [pc, #296]	; (800093c <ADC_Init+0x140>)
 8000812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000816:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~(ADC_CR_DEEPPWD);             // disable deep-power-down
 8000818:	4b49      	ldr	r3, [pc, #292]	; (8000940 <ADC_Init+0x144>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <ADC_Init+0x144>)
 800081e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000822:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN);             // enable V regulator - see RM 18.4.6
 8000824:	4b46      	ldr	r3, [pc, #280]	; (8000940 <ADC_Init+0x144>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a45      	ldr	r2, [pc, #276]	; (8000940 <ADC_Init+0x144>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6093      	str	r3, [r2, #8]
	delay_us(20);                              // wait 20us for ADC to power up
 8000830:	2014      	movs	r0, #20
 8000832:	f000 f889 	bl	8000948 <delay_us>
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);    // PA0=ADC1_IN5, single-ended
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <ADC_Init+0x144>)
 8000838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800083c:	4a40      	ldr	r2, [pc, #256]	; (8000940 <ADC_Init+0x144>)
 800083e:	f023 0320 	bic.w	r3, r3, #32
 8000842:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <ADC_Init+0x144>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	4a3d      	ldr	r2, [pc, #244]	; (8000940 <ADC_Init+0x144>)
 800084c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;                  // start calibration
 8000856:	4b3a      	ldr	r3, [pc, #232]	; (8000940 <ADC_Init+0x144>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	4a39      	ldr	r2, [pc, #228]	; (8000940 <ADC_Init+0x144>)
 800085c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000860:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL) {;}        // wait for calib to finish
 8000862:	bf00      	nop
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <ADC_Init+0x144>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	2b00      	cmp	r3, #0
 800086a:	dbfb      	blt.n	8000864 <ADC_Init+0x68>
	// enable ADC
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <ADC_Init+0x144>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a33      	ldr	r2, [pc, #204]	; (8000940 <ADC_Init+0x144>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]
	ADC1->CR |= ADC_CR_ADEN;                   // enable ADC
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <ADC_Init+0x144>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a30      	ldr	r2, [pc, #192]	; (8000940 <ADC_Init+0x144>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR & ADC_ISR_ADRDY)) {;}    // wait for ADC Ready flag
 8000884:	bf00      	nop
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <ADC_Init+0x144>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f9      	beq.n	8000886 <ADC_Init+0x8a>
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <ADC_Init+0x144>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <ADC_Init+0x144>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6013      	str	r3, [r2, #0]
	// configure ADC sampling & sequencing
	ADC1->SQR1  |= (5 << ADC_SQR1_SQ1_Pos);    // sequence = 1 conv., ch 5
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <ADC_Init+0x144>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a27      	ldr	r2, [pc, #156]	; (8000940 <ADC_Init+0x144>)
 80008a4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SMPR1 |= (7 << ADC_SMPR1_SMP5_Pos);  // ch 5 sample time = 6.5 clocks
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <ADC_Init+0x144>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a24      	ldr	r2, [pc, #144]	; (8000940 <ADC_Init+0x144>)
 80008b0:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 80008b4:	6153      	str	r3, [r2, #20]
	ADC1->CFGR  &= ~( ADC_CFGR_CONT  |         // single conversion mode
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <ADC_Init+0x144>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	4a21      	ldr	r2, [pc, #132]	; (8000940 <ADC_Init+0x144>)
 80008bc:	f423 5330 	bic.w	r3, r3, #11264	; 0x2c00
 80008c0:	f023 0318 	bic.w	r3, r3, #24
 80008c4:	60d3      	str	r3, [r2, #12]
	                  ADC_CFGR_EXTEN |         // h/w trig disabled for s/w trig
	                  ADC_CFGR_RES   );        // 12-bit resolution
	// configure & enable ADC interrupt
	ADC1->IER |= ADC_IER_EOCIE;                // enable end-of-conv interrupt
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <ADC_Init+0x144>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <ADC_Init+0x144>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6053      	str	r3, [r2, #4]
	ADC1->ISR &= ~(ADC_ISR_EOC);               // clear EOC flag
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <ADC_Init+0x144>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <ADC_Init+0x144>)
 80008d8:	f023 0304 	bic.w	r3, r3, #4
 80008dc:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (1<<(ADC1_2_IRQn & 0x1F)); // enable ADC interrupt service
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <ADC_Init+0x148>)
 80008e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008e4:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80008e6:	b662      	cpsie	i
}
 80008e8:	bf00      	nop
	__enable_irq();                            // enable global interrupts
	// configure GPIO pin PA0
	RCC->AHB2ENR  |= (RCC_AHB2ENR_GPIOAEN);    // connect clock to GPIOA
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <ADC_Init+0x13c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <ADC_Init+0x13c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL0);      // clear alt. function select
 80008f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000900:	f023 030f 	bic.w	r3, r3, #15
 8000904:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL0_Pos); // choose AF 7 (PA0=ADC1_IN5)
 8000906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000910:	f043 0307 	orr.w	r3, r3, #7
 8000914:	6213      	str	r3, [r2, #32]
	GPIOA->MODER  |= (GPIO_MODER_MODE0);	       // analog mode for PA0 (set MODER last)
 8000916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000920:	f043 0303 	orr.w	r3, r3, #3
 8000924:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADSTART;                // start 1st conversion
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <ADC_Init+0x144>)
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <ADC_Init+0x144>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6093      	str	r3, [r2, #8]
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	50040300 	.word	0x50040300
 8000940:	50040000 	.word	0x50040000
 8000944:	e000e100 	.word	0xe000e100

08000948 <delay_us>:
 * precise delay timing. Passing a time of 0 will cause an error and result
 * in the maximum delay. Short delays are limited by the clock speed and will
 * often result in longer delay times than specified. @ 4MHz, a delay of 1us
 * will result in a delay of 10-15 us.
 */
void delay_us(const uint32_t time_us) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    // set the counts for the specified delay
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <delay_us+0x50>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a11      	ldr	r2, [pc, #68]	; (800099c <delay_us+0x54>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9b      	lsrs	r3, r3, #18
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <delay_us+0x58>)
 8000964:	3b01      	subs	r3, #1
 8000966:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <delay_us+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <delay_us+0x58>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <delay_us+0x58>)
 8000974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000978:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800097a:	bf00      	nop
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <delay_us+0x58>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0f9      	beq.n	800097c <delay_us+0x34>
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000000 	.word	0x20000000
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <main>:
uint16_t ADC_Out;            //Initializes the variable that takes the ADC output
int Convert_Flag;            //Initializes the flag signaling an ADC output
uint16_t Sample_Array[20];   //Initializes the array of ADC output samples
int Array_Idx = 0;           //Initializes the array index

int main(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  HAL_Init();
 80009a8:	f000 fce5 	bl	8001376 <HAL_Init>
  SystemClock_Config();
 80009ac:	f000 f8b4 	bl	8000b18 <SystemClock_Config>
  ADC_Init();               //Initializes the ADC
 80009b0:	f7ff ff24 	bl	80007fc <ADC_Init>
  LPUART_init();            //Initializes the LPUART
 80009b4:	f000 f95c 	bl	8000c70 <LPUART_init>
  Terminal_Init();          //Initializes the display on the terminal
 80009b8:	f000 fa10 	bl	8000ddc <Terminal_Init>

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 80009bc:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <main+0x110>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c0:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <main+0x110>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <main+0x114>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a3a      	ldr	r2, [pc, #232]	; (8000ab8 <main+0x114>)
 80009ce:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80009d2:	6013      	str	r3, [r2, #0]
  	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <main+0x114>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <main+0x114>)
 80009da:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80009de:	60d3      	str	r3, [r2, #12]
  	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <main+0x114>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <main+0x114>)
 80009e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009ea:	60d3      	str	r3, [r2, #12]
  	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <main+0x110>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f0:	4a30      	ldr	r2, [pc, #192]	; (8000ab4 <main+0x110>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <main+0x118>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <main+0x118>)
 80009fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a02:	6013      	str	r3, [r2, #0]
  	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <main+0x118>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <main+0x118>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
  	GPIOB->MODER &= ~(GPIO_MODER_MODE2);
 8000a10:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <main+0x118>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a29      	ldr	r2, [pc, #164]	; (8000abc <main+0x118>)
 8000a16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a1a:	6013      	str	r3, [r2, #0]
  	GPIOB->MODER |= (GPIO_MODER_MODE2_0);
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <main+0x118>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <main+0x118>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  if (Convert_Flag == 1) {        //If the IRQ signals a new ADC output
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <main+0x11c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d11f      	bne.n	8000a70 <main+0xcc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
		  __disable_irq();            //Disables the interrupt
		  Convert_Flag = 0;           //Resets the IRQ ADC flag
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <main+0x11c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
		  if (Array_Idx > 19) {       //Assures the array is never filled past its 20 item limit
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <main+0x120>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b13      	cmp	r3, #19
 8000a40:	dd02      	ble.n	8000a48 <main+0xa4>
			  Array_Idx = 0;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <main+0x120>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
		  }
		  Sample_Array[Array_Idx] = ADC_Out;   //Puts the ADC output in the array at the current index
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <main+0x120>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <main+0x124>)
 8000a4e:	8811      	ldrh	r1, [r2, #0]
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <main+0x128>)
 8000a52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  Array_Idx ++;                        //Increments the array index
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <main+0x120>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <main+0x120>)
 8000a5e:	6013      	str	r3, [r2, #0]
		  ADC1->CR |= ADC_CR_ADSTART;          //Starts another ADC conversion
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <main+0x12c>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <main+0x12c>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a6c:	b662      	cpsie	i
}
 8000a6e:	bf00      	nop
		  __enable_irq();                      //Enables the interrupt again
	  }
	  if (GPIOC->IDR & GPIO_IDR_ID13) { // Check if the button is pressed
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <main+0x114>)
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00c      	beq.n	8000a96 <main+0xf2>
			  GPIOB->BSRR = GPIO_PIN_7;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <main+0x118>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	619a      	str	r2, [r3, #24]
			  GPIOB->BSRR = GPIO_PIN_2;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <main+0x118>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	619a      	str	r2, [r3, #24]
			  Terminal_Values(Sample_Array);           //Updates the terminal with values in the array
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <main+0x128>)
 8000a8a:	f000 fba5 	bl	80011d8 <Terminal_Values>
			  delay_us(10000);
 8000a8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a92:	f7ff ff59 	bl	8000948 <delay_us>
	  		}
	  Terminal_Values(Sample_Array);
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <main+0x128>)
 8000a98:	f000 fb9e 	bl	80011d8 <Terminal_Values>
	  delay_us(10000);
 8000a9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aa0:	f7ff ff52 	bl	8000948 <delay_us>
	  GPIOB->BRR = GPIO_PIN_7;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <main+0x118>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
	  	  GPIOB->BRR = GPIO_PIN_2;
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <main+0x118>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
	  if (Convert_Flag == 1) {        //If the IRQ signals a new ADC output
 8000ab0:	e7ba      	b.n	8000a28 <main+0x84>
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000800 	.word	0x48000800
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	2000002c 	.word	0x2000002c
 8000ac4:	20000058 	.word	0x20000058
 8000ac8:	20000028 	.word	0x20000028
 8000acc:	20000030 	.word	0x20000030
 8000ad0:	50040000 	.word	0x50040000

08000ad4 <ADC1_2_IRQHandler>:
  }
}

void ADC1_2_IRQHandler(void) {          //Initializes the interrupt handler
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	if (ADC1->ISR & ADC_ISR_EOC) {      //Verifies that the interrupt is triggered
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <ADC1_2_IRQHandler+0x38>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00d      	beq.n	8000b00 <ADC1_2_IRQHandler+0x2c>
		ADC1->ISR &= ~(ADC_ISR_EOC);    //Disables the interrupt trigger
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <ADC1_2_IRQHandler+0x38>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <ADC1_2_IRQHandler+0x38>)
 8000aea:	f023 0304 	bic.w	r3, r3, #4
 8000aee:	6013      	str	r3, [r2, #0]
		ADC_Out = ADC1->DR;             //Reads a value from the ADC output
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <ADC1_2_IRQHandler+0x38>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <ADC1_2_IRQHandler+0x3c>)
 8000af8:	801a      	strh	r2, [r3, #0]
		Convert_Flag = 1;               //Sets the flag to signal an ADC output
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <ADC1_2_IRQHandler+0x40>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
	}
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	50040000 	.word	0x50040000
 8000b10:	20000028 	.word	0x20000028
 8000b14:	2000002c 	.word	0x2000002c

08000b18 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	; 0x58
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2244      	movs	r2, #68	; 0x44
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fc0e 	bl	8002348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b3e:	f000 fd83 	bl	8001648 <HAL_PWREx_ControlVoltageScaling>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b48:	f000 f82c 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b58:	2360      	movs	r3, #96	; 0x60
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fdc5 	bl	80016f4 <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b70:	f000 f818 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f9cb 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b98:	f000 f804 	bl	8000ba4 <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3758      	adds	r7, #88	; 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 fbec 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <LPUART_init>:
int Avg_Counts;
int Min_Volt;
int Max_Volt;
int Avg_Volt;

void LPUART_init(void) {
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV); //power avail on PG[15:2] (LPUART1)
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <LPUART_init+0xe0>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <LPUART_init+0xe0>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   //enable GPIOG clock
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <LPUART_init+0xe4>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <LPUART_init+0xe4>)
 8000c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; //enable LPUART clock bridge
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <LPUART_init+0xe4>)
 8000c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <LPUART_init+0xe4>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8); //Clear Bits
 8000c98:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <LPUART_init+0xe8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <LPUART_init+0xe8>)
 8000c9e:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 8000ca2:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |=(GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <LPUART_init+0xe8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <LPUART_init+0xe8>)
 8000caa:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8000cae:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL7_Pos)); //clear nibble bit 7 AF
 8000cb0:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <LPUART_init+0xe8>)
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <LPUART_init+0xe8>)
 8000cb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000cba:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= (0x0008 << GPIO_AFRL_AFSEL7_Pos);	//all set to AF5
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <LPUART_init+0xe8>)
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	4a25      	ldr	r2, [pc, #148]	; (8000d58 <LPUART_init+0xe8>)
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc6:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos)); //clear nibble bit 7 AF
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <LPUART_init+0xe8>)
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <LPUART_init+0xe8>)
 8000cce:	f023 030f 	bic.w	r3, r3, #15
 8000cd2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= 0x0008 << GPIO_AFRL_AFSEL0_Pos;
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <LPUART_init+0xe8>)
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <LPUART_init+0xe8>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6253      	str	r3, [r2, #36]	; 0x24

	//Resistor and Speed Stuff
	GPIOG->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8); //Resistor stuff
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <LPUART_init+0xe8>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <LPUART_init+0xe8>)
 8000ce6:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8000cea:	6053      	str	r3, [r2, #4]
	GPIOG->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED7_Pos) |
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <LPUART_init+0xe8>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <LPUART_init+0xe8>)
 8000cf2:	f443 3370 	orr.w	r3, r3, #245760	; 0x3c000
 8000cf6:	6093      	str	r3, [r2, #8]
					   (3 << GPIO_OSPEEDR_OSPEED8_Pos)); //Speed Stuff
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); //8-bit data
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <LPUART_init+0xec>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <LPUART_init+0xec>)
 8000cfe:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000d02:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   //enable LPUART1
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <LPUART_init+0xec>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <LPUART_init+0xec>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  //enable xmit & recv
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <LPUART_init+0xec>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <LPUART_init+0xec>)
 8000d16:	f043 030c 	orr.w	r3, r3, #12
 8000d1a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        //enable LPUART1 recv interrupt
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <LPUART_init+0xec>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <LPUART_init+0xec>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       //clear Recv-Not-Empty flag
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <LPUART_init+0xec>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LPUART_init+0xec>)
 8000d2e:	f023 0320 	bic.w	r3, r3, #32
 8000d32:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 8889;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <LPUART_init+0xec>)
 8000d36:	f242 22b9 	movw	r2, #8889	; 0x22b9
 8000d3a:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   //enable LPUART1 ISR
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <LPUART_init+0xf0>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d42:	b662      	cpsie	i
}
 8000d44:	bf00      	nop
	__enable_irq();                          //enable global interrupts
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40007000 	.word	0x40007000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	40008000 	.word	0x40008000
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <LPUART_Print>:



void LPUART_Print(const char* message) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
   uint16_t iStrIdx = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	81fb      	strh	r3, [r7, #14]
   while ( message[iStrIdx] != 0 ) {
 8000d70:	e013      	b.n	8000d9a <LPUART_Print+0x36>
      while(!(LPUART1->ISR & USART_ISR_TXE)) // wait for empty xmit buffer
 8000d72:	bf00      	nop
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <LPUART_Print+0x4c>)
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f9      	beq.n	8000d74 <LPUART_Print+0x10>
         ;
      LPUART1->TDR = message[iStrIdx];       // send this character
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <LPUART_Print+0x4c>)
 8000d8a:	b292      	uxth	r2, r2
 8000d8c:	851a      	strh	r2, [r3, #40]	; 0x28
	iStrIdx++;                             // advance index to next char
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	3301      	adds	r3, #1
 8000d92:	81fb      	strh	r3, [r7, #14]
	delay_us(200);
 8000d94:	20c8      	movs	r0, #200	; 0xc8
 8000d96:	f7ff fdd7 	bl	8000948 <delay_us>
   while ( message[iStrIdx] != 0 ) {
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1e5      	bne.n	8000d72 <LPUART_Print+0xe>
   }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40008000 	.word	0x40008000

08000db4 <LPUART_ESC_Print>:

void LPUART_ESC_Print(const char* input) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	LPUART1->TDR = 0x1b; //hard code 'ESC'
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LPUART_ESC_Print+0x24>)
 8000dbe:	221b      	movs	r2, #27
 8000dc0:	851a      	strh	r2, [r3, #40]	; 0x28
	LPUART_Print(input); //send desired code
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffce 	bl	8000d64 <LPUART_Print>
	delay_us(200); //wait so it is seperate from text
 8000dc8:	20c8      	movs	r0, #200	; 0xc8
 8000dca:	f7ff fdbd 	bl	8000948 <delay_us>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40008000 	.word	0x40008000

08000ddc <Terminal_Init>:

void Terminal_Init(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	LPUART_ESC_Print("[2J");               //clear screen
 8000de0:	4812      	ldr	r0, [pc, #72]	; (8000e2c <Terminal_Init+0x50>)
 8000de2:	f7ff ffe7 	bl	8000db4 <LPUART_ESC_Print>
	LPUART_ESC_Print("[H");                //Moves cursor to origin
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <Terminal_Init+0x54>)
 8000de8:	f7ff ffe4 	bl	8000db4 <LPUART_ESC_Print>
	LPUART_ESC_Print("[3;3H");
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <Terminal_Init+0x58>)
 8000dee:	f7ff ffe1 	bl	8000db4 <LPUART_ESC_Print>
	LPUART_Print("ADC Counts Volts");      //Writes first display line
 8000df2:	4811      	ldr	r0, [pc, #68]	; (8000e38 <Terminal_Init+0x5c>)
 8000df4:	f7ff ffb6 	bl	8000d64 <LPUART_Print>
	LPUART_ESC_Print("[4;3H");
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <Terminal_Init+0x60>)
 8000dfa:	f7ff ffdb 	bl	8000db4 <LPUART_ESC_Print>
	LPUART_Print("MIN  0000  0.000 V");    //Initializes min value display
 8000dfe:	4810      	ldr	r0, [pc, #64]	; (8000e40 <Terminal_Init+0x64>)
 8000e00:	f7ff ffb0 	bl	8000d64 <LPUART_Print>
	LPUART_ESC_Print("[5;3H");
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <Terminal_Init+0x68>)
 8000e06:	f7ff ffd5 	bl	8000db4 <LPUART_ESC_Print>
	LPUART_Print("MAX  0000  0.000 V");    //Initializes max value display
 8000e0a:	480f      	ldr	r0, [pc, #60]	; (8000e48 <Terminal_Init+0x6c>)
 8000e0c:	f7ff ffaa 	bl	8000d64 <LPUART_Print>
	LPUART_ESC_Print("[6;3H");
 8000e10:	480e      	ldr	r0, [pc, #56]	; (8000e4c <Terminal_Init+0x70>)
 8000e12:	f7ff ffcf 	bl	8000db4 <LPUART_ESC_Print>
	LPUART_Print("AVG  0000  0.000 V");    //Initializes avg value display
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <Terminal_Init+0x74>)
 8000e18:	f7ff ffa4 	bl	8000d64 <LPUART_Print>
	LPUART_ESC_Print("[7;3H");
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <Terminal_Init+0x78>)
 8000e1e:	f7ff ffc9 	bl	8000db4 <LPUART_ESC_Print>
	LPUART_Print("Coil Current = 0.000 A");    //Initializes avg value display
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <Terminal_Init+0x7c>)
 8000e24:	f7ff ff9e 	bl	8000d64 <LPUART_Print>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	08002370 	.word	0x08002370
 8000e30:	08002374 	.word	0x08002374
 8000e34:	08002378 	.word	0x08002378
 8000e38:	08002380 	.word	0x08002380
 8000e3c:	08002394 	.word	0x08002394
 8000e40:	0800239c 	.word	0x0800239c
 8000e44:	080023b0 	.word	0x080023b0
 8000e48:	080023b8 	.word	0x080023b8
 8000e4c:	080023cc 	.word	0x080023cc
 8000e50:	080023d4 	.word	0x080023d4
 8000e54:	080023e8 	.word	0x080023e8
 8000e58:	080023f0 	.word	0x080023f0

08000e5c <Samples_Min>:

uint16_t Samples_Min(uint16_t *Array) {      //Finds the min value in an array
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint16_t Min_Sample = 0xFFFF;
 8000e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e68:	81fb      	strh	r3, [r7, #14]
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //For each item in the array...
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	e010      	b.n	8000e92 <Samples_Min+0x36>
		if (Array[Array_Idx] < Min_Sample) {                    //If item is smaller than current min value
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	89fa      	ldrh	r2, [r7, #14]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d905      	bls.n	8000e8c <Samples_Min+0x30>
			Min_Sample = Array[Array_Idx];                      //Set that item to the min
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	81fb      	strh	r3, [r7, #14]
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //For each item in the array...
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b13      	cmp	r3, #19
 8000e96:	ddeb      	ble.n	8000e70 <Samples_Min+0x14>
		}
	}
	Min_Sample = (float)Min_Sample * 1 + 2;              //Calibrates the min value
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eae:	ee17 3a90 	vmov	r3, s15
 8000eb2:	81fb      	strh	r3, [r7, #14]
	return Min_Sample;                                          //Return the calibrated min value
 8000eb4:	89fb      	ldrh	r3, [r7, #14]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <Samples_Max>:

uint16_t Samples_Max(uint16_t *Array) {                         //Finds the max value in an array
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	uint16_t Max_Sample = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	81fb      	strh	r3, [r7, #14]
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //For each item in the array...
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	e010      	b.n	8000ef6 <Samples_Max+0x34>
		if (Array[Array_Idx] > Max_Sample) {                    //If item is larger than current max value
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	89fa      	ldrh	r2, [r7, #14]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d205      	bcs.n	8000ef0 <Samples_Max+0x2e>
			Max_Sample = Array[Array_Idx];                      //Set that item to the max
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	81fb      	strh	r3, [r7, #14]
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //For each item in the array...
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b13      	cmp	r3, #19
 8000efa:	ddeb      	ble.n	8000ed4 <Samples_Max+0x12>
		}
	}
	Max_Sample = (float)Max_Sample * 1 - 2;            //Calibrates the max value
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f06:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f12:	ee17 3a90 	vmov	r3, s15
 8000f16:	81fb      	strh	r3, [r7, #14]
	return Max_Sample;                                          //Return the calibrated max value
 8000f18:	89fb      	ldrh	r3, [r7, #14]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <Samples_Ave>:

uint16_t Samples_Ave(uint16_t *Array) {                         //Finds the avg value in an array
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint32_t Sample_Accum = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
	uint16_t Ave_Sample;
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //Adds up all the items in the array
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	e00b      	b.n	8000f52 <Samples_Ave+0x2a>
		Sample_Accum += Array[Array_Idx];
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	4413      	add	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //Adds up all the items in the array
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b13      	cmp	r3, #19
 8000f56:	ddf0      	ble.n	8000f3a <Samples_Ave+0x12>
	}
	Ave_Sample = Sample_Accum / 20;                             //Divides sum by # of items in array
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <Samples_Ave+0x90>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	81fb      	strh	r3, [r7, #14]
	Ave_Sample = (float)Ave_Sample * 0.98 - 5;            //Calibrates the avg value
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6e:	ee17 0a90 	vmov	r0, s15
 8000f72:	f7ff fbcb 	bl	800070c <__aeabi_f2d>
 8000f76:	a30e      	add	r3, pc, #56	; (adr r3, 8000fb0 <Samples_Ave+0x88>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff f938 	bl	80001f0 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <Samples_Ave+0x94>)
 8000f8e:	f7ff fa5d 	bl	800044c <__aeabi_dsub>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fc0f 	bl	80007bc <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	81fb      	strh	r3, [r7, #14]
	return Ave_Sample;                                          //Return the calibrated avg value
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	f3af 8000 	nop.w
 8000fb0:	f5c28f5c 	.word	0xf5c28f5c
 8000fb4:	3fef5c28 	.word	0x3fef5c28
 8000fb8:	cccccccd 	.word	0xcccccccd
 8000fbc:	40140000 	.word	0x40140000

08000fc0 <Update_Counts>:

void Update_Counts(uint16_t counts) {    //Updates a counts value on the terminal
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	int First_Dig = counts / 1000;       //Isolates the 1st digit of the counts
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4a24      	ldr	r2, [pc, #144]	; (8001060 <Update_Counts+0xa0>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	099b      	lsrs	r3, r3, #6
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	617b      	str	r3, [r7, #20]

	int Second_Dig = counts % 1000;
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <Update_Counts+0xa0>)
 8000fdc:	fba2 1203 	umull	r1, r2, r2, r3
 8000fe0:	0992      	lsrs	r2, r2, #6
 8000fe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe6:	fb01 f202 	mul.w	r2, r1, r2
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	613b      	str	r3, [r7, #16]
	Second_Dig = Second_Dig / 100;       //Isolates the 2nd digit of the counts
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <Update_Counts+0xa4>)
 8000ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff8:	1152      	asrs	r2, r2, #5
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	613b      	str	r3, [r7, #16]

	int Third_Dig = counts % 100;
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <Update_Counts+0xa4>)
 8001004:	fba2 1203 	umull	r1, r2, r2, r3
 8001008:	0952      	lsrs	r2, r2, #5
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	fb01 f202 	mul.w	r2, r1, r2
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	b29b      	uxth	r3, r3
 8001014:	60fb      	str	r3, [r7, #12]
	Third_Dig = Third_Dig / 10;          //Isolates the 3rd digit of the counts
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <Update_Counts+0xa8>)
 800101a:	fb82 1203 	smull	r1, r2, r2, r3
 800101e:	1092      	asrs	r2, r2, #2
 8001020:	17db      	asrs	r3, r3, #31
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	60fb      	str	r3, [r7, #12]

	int Fourth_Dig = counts % 10;        //Isolates the 4th digit of the counts
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <Update_Counts+0xac>)
 800102a:	fba3 1302 	umull	r1, r3, r3, r2
 800102e:	08d9      	lsrs	r1, r3, #3
 8001030:	460b      	mov	r3, r1
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	60bb      	str	r3, [r7, #8]

	Digit_Write(First_Dig);              //Writes 1st digit of updated counts
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f000 f872 	bl	8001128 <Digit_Write>
	Digit_Write(Second_Dig);             //Writes 2nd digit of updated counts
 8001044:	6938      	ldr	r0, [r7, #16]
 8001046:	f000 f86f 	bl	8001128 <Digit_Write>
	Digit_Write(Third_Dig);              //Writes 3rd digit of updated counts
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f86c 	bl	8001128 <Digit_Write>
	Digit_Write(Fourth_Dig);             //Writes 4th digit of updated counts
 8001050:	68b8      	ldr	r0, [r7, #8]
 8001052:	f000 f869 	bl	8001128 <Digit_Write>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	10624dd3 	.word	0x10624dd3
 8001064:	51eb851f 	.word	0x51eb851f
 8001068:	66666667 	.word	0x66666667
 800106c:	cccccccd 	.word	0xcccccccd

08001070 <Update_Volts>:

void Update_Volts(uint16_t voltage) {    //Updates a voltage value on the terminal
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
	int First_Dig = voltage / 1000;      //Isolates the 1st digit of the voltage
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <Update_Volts+0xa4>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	099b      	lsrs	r3, r3, #6
 8001084:	b29b      	uxth	r3, r3
 8001086:	617b      	str	r3, [r7, #20]

	int Second_Dig = voltage % 1000;
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <Update_Volts+0xa4>)
 800108c:	fba2 1203 	umull	r1, r2, r2, r3
 8001090:	0992      	lsrs	r2, r2, #6
 8001092:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001096:	fb01 f202 	mul.w	r2, r1, r2
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	613b      	str	r3, [r7, #16]
	Second_Dig = Second_Dig / 100;       //Isolates the 2nd digit of the voltage
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <Update_Volts+0xa8>)
 80010a4:	fb82 1203 	smull	r1, r2, r2, r3
 80010a8:	1152      	asrs	r2, r2, #5
 80010aa:	17db      	asrs	r3, r3, #31
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	613b      	str	r3, [r7, #16]

	int Third_Dig = voltage % 100;
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	4a19      	ldr	r2, [pc, #100]	; (8001118 <Update_Volts+0xa8>)
 80010b4:	fba2 1203 	umull	r1, r2, r2, r3
 80010b8:	0952      	lsrs	r2, r2, #5
 80010ba:	2164      	movs	r1, #100	; 0x64
 80010bc:	fb01 f202 	mul.w	r2, r1, r2
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	60fb      	str	r3, [r7, #12]
	Third_Dig = Third_Dig / 10;          //Isolates the 3rd digit of the voltage
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <Update_Volts+0xac>)
 80010ca:	fb82 1203 	smull	r1, r2, r2, r3
 80010ce:	1092      	asrs	r2, r2, #2
 80010d0:	17db      	asrs	r3, r3, #31
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	60fb      	str	r3, [r7, #12]

	int Fourth_Dig = voltage % 10;       //Isolates the 4th digit of the voltage
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <Update_Volts+0xb0>)
 80010da:	fba3 1302 	umull	r1, r3, r3, r2
 80010de:	08d9      	lsrs	r1, r3, #3
 80010e0:	460b      	mov	r3, r1
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	60bb      	str	r3, [r7, #8]

	Digit_Write(First_Dig);              //Writes 1st digit of updated voltage
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f000 f81a 	bl	8001128 <Digit_Write>
	LPUART_Print(".");                   //Writes the decimal point for the voltage
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <Update_Volts+0xb4>)
 80010f6:	f7ff fe35 	bl	8000d64 <LPUART_Print>
	Digit_Write(Second_Dig);             //Writes 2nd digit of updated voltage
 80010fa:	6938      	ldr	r0, [r7, #16]
 80010fc:	f000 f814 	bl	8001128 <Digit_Write>
	Digit_Write(Third_Dig);              //Writes 3rd digit of updated voltage
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f811 	bl	8001128 <Digit_Write>
	Digit_Write(Fourth_Dig);             //Writes 4th digit of updated voltage
 8001106:	68b8      	ldr	r0, [r7, #8]
 8001108:	f000 f80e 	bl	8001128 <Digit_Write>
}
 800110c:	bf00      	nop
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	10624dd3 	.word	0x10624dd3
 8001118:	51eb851f 	.word	0x51eb851f
 800111c:	66666667 	.word	0x66666667
 8001120:	cccccccd 	.word	0xcccccccd
 8001124:	08002408 	.word	0x08002408

08001128 <Digit_Write>:

void Digit_Write(int digit) {            //Writes a digit to the terminal
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if (digit == 0) {                    //If the given digit is a 0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <Digit_Write+0x14>
		LPUART_Print("0");               //Writes a 0 to the terminal
 8001136:	481e      	ldr	r0, [pc, #120]	; (80011b0 <Digit_Write+0x88>)
 8001138:	f7ff fe14 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 1) {                    //If the given digit is a 1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <Digit_Write+0x20>
		LPUART_Print("1");               //Writes a 1 to the terminal
 8001142:	481c      	ldr	r0, [pc, #112]	; (80011b4 <Digit_Write+0x8c>)
 8001144:	f7ff fe0e 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 2) {                    //If the given digit is a 2
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d102      	bne.n	8001154 <Digit_Write+0x2c>
		LPUART_Print("2");               //Writes a 2 to the terminal
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <Digit_Write+0x90>)
 8001150:	f7ff fe08 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 3) {                    //If the given digit is a 3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d102      	bne.n	8001160 <Digit_Write+0x38>
		LPUART_Print("3");               //Writes a 3 to the terminal
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <Digit_Write+0x94>)
 800115c:	f7ff fe02 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 4) {                    //If the given digit is a 4
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b04      	cmp	r3, #4
 8001164:	d102      	bne.n	800116c <Digit_Write+0x44>
		LPUART_Print("4");               //Writes a 4 to the terminal
 8001166:	4816      	ldr	r0, [pc, #88]	; (80011c0 <Digit_Write+0x98>)
 8001168:	f7ff fdfc 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 5) {                    //If the given digit is a 5
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d102      	bne.n	8001178 <Digit_Write+0x50>
		LPUART_Print("5");               //Writes a 5 to the terminal
 8001172:	4814      	ldr	r0, [pc, #80]	; (80011c4 <Digit_Write+0x9c>)
 8001174:	f7ff fdf6 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 6) {                    //If the given digit is a 6
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b06      	cmp	r3, #6
 800117c:	d102      	bne.n	8001184 <Digit_Write+0x5c>
		LPUART_Print("6");               //Writes a 6 to the terminal
 800117e:	4812      	ldr	r0, [pc, #72]	; (80011c8 <Digit_Write+0xa0>)
 8001180:	f7ff fdf0 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 7) {                    //If the given digit is a 7
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d102      	bne.n	8001190 <Digit_Write+0x68>
		LPUART_Print("7");               //Writes a 7 to the terminal
 800118a:	4810      	ldr	r0, [pc, #64]	; (80011cc <Digit_Write+0xa4>)
 800118c:	f7ff fdea 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 8) {                    //If the given digit is a 8
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b08      	cmp	r3, #8
 8001194:	d102      	bne.n	800119c <Digit_Write+0x74>
		LPUART_Print("8");               //Writes a 8 to the terminal
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <Digit_Write+0xa8>)
 8001198:	f7ff fde4 	bl	8000d64 <LPUART_Print>
	}
	if (digit == 9) {                    //If the given digit is a 9
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b09      	cmp	r3, #9
 80011a0:	d102      	bne.n	80011a8 <Digit_Write+0x80>
		LPUART_Print("9");               //Writes a 9 to the terminal
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <Digit_Write+0xac>)
 80011a4:	f7ff fdde 	bl	8000d64 <LPUART_Print>
	}
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0800240c 	.word	0x0800240c
 80011b4:	08002410 	.word	0x08002410
 80011b8:	08002414 	.word	0x08002414
 80011bc:	08002418 	.word	0x08002418
 80011c0:	0800241c 	.word	0x0800241c
 80011c4:	08002420 	.word	0x08002420
 80011c8:	08002424 	.word	0x08002424
 80011cc:	08002428 	.word	0x08002428
 80011d0:	0800242c 	.word	0x0800242c
 80011d4:	08002430 	.word	0x08002430

080011d8 <Terminal_Values>:

void Terminal_Values(uint16_t *Array) {  //Gets and writes to terminal the six needed values
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	  Min_Counts = Samples_Min(Array);   //Gets the minimum counts value
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fe3b 	bl	8000e5c <Samples_Min>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <Terminal_Values+0x110>)
 80011ec:	601a      	str	r2, [r3, #0]
	  Max_Counts = Samples_Max(Array);   //Gets the maximum counts value
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe67 	bl	8000ec2 <Samples_Max>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <Terminal_Values+0x114>)
 80011fa:	601a      	str	r2, [r3, #0]
	  Avg_Counts = Samples_Ave(Array);   //Gets the average counts value
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fe93 	bl	8000f28 <Samples_Ave>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <Terminal_Values+0x118>)
 8001208:	601a      	str	r2, [r3, #0]

	  LPUART_ESC_Print("[4;8H");
 800120a:	483a      	ldr	r0, [pc, #232]	; (80012f4 <Terminal_Values+0x11c>)
 800120c:	f7ff fdd2 	bl	8000db4 <LPUART_ESC_Print>
	  Update_Counts(Min_Counts);         //Updates the terminal min counts value
 8001210:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <Terminal_Values+0x110>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fed2 	bl	8000fc0 <Update_Counts>
	  LPUART_ESC_Print("[5;8H");
 800121c:	4836      	ldr	r0, [pc, #216]	; (80012f8 <Terminal_Values+0x120>)
 800121e:	f7ff fdc9 	bl	8000db4 <LPUART_ESC_Print>
	  Update_Counts(Max_Counts);         //Updates the terminal max counts value
 8001222:	4b32      	ldr	r3, [pc, #200]	; (80012ec <Terminal_Values+0x114>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fec9 	bl	8000fc0 <Update_Counts>
	  LPUART_ESC_Print("[6;8H");
 800122e:	4833      	ldr	r0, [pc, #204]	; (80012fc <Terminal_Values+0x124>)
 8001230:	f7ff fdc0 	bl	8000db4 <LPUART_ESC_Print>
	  Update_Counts(Avg_Counts);         //Updates the terminal max counts value
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <Terminal_Values+0x118>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fec0 	bl	8000fc0 <Update_Counts>


	  Min_Volt = (Min_Counts * 8) / 10;  //Calculates the min volt value
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <Terminal_Values+0x110>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <Terminal_Values+0x128>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1092      	asrs	r2, r2, #2
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <Terminal_Values+0x12c>)
 8001254:	6013      	str	r3, [r2, #0]
	  Max_Volt = (Max_Counts * 8) / 10;  //Calculates the max volt value
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <Terminal_Values+0x114>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4a28      	ldr	r2, [pc, #160]	; (8001300 <Terminal_Values+0x128>)
 800125e:	fb82 1203 	smull	r1, r2, r2, r3
 8001262:	1092      	asrs	r2, r2, #2
 8001264:	17db      	asrs	r3, r3, #31
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <Terminal_Values+0x130>)
 800126a:	6013      	str	r3, [r2, #0]
	  Avg_Volt = (Avg_Counts * 8) / 10;  //Calculates the avg volt value
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <Terminal_Values+0x118>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <Terminal_Values+0x128>)
 8001274:	fb82 1203 	smull	r1, r2, r2, r3
 8001278:	1092      	asrs	r2, r2, #2
 800127a:	17db      	asrs	r3, r3, #31
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <Terminal_Values+0x134>)
 8001280:	6013      	str	r3, [r2, #0]

	  LPUART_ESC_Print("[4;14H");
 8001282:	4823      	ldr	r0, [pc, #140]	; (8001310 <Terminal_Values+0x138>)
 8001284:	f7ff fd96 	bl	8000db4 <LPUART_ESC_Print>
	  Update_Volts(Min_Volt);            //Updates the terminal min volt value
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <Terminal_Values+0x12c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff feee 	bl	8001070 <Update_Volts>
	  LPUART_ESC_Print("[5;14H");
 8001294:	481f      	ldr	r0, [pc, #124]	; (8001314 <Terminal_Values+0x13c>)
 8001296:	f7ff fd8d 	bl	8000db4 <LPUART_ESC_Print>
	  Update_Volts(Max_Volt);            //Updates the terminal max volt value
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <Terminal_Values+0x130>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fee5 	bl	8001070 <Update_Volts>
	  LPUART_ESC_Print("[6;14H");
 80012a6:	481c      	ldr	r0, [pc, #112]	; (8001318 <Terminal_Values+0x140>)
 80012a8:	f7ff fd84 	bl	8000db4 <LPUART_ESC_Print>
	  Update_Volts(Avg_Volt);            //Updates the terminal avg volt value
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <Terminal_Values+0x134>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fedc 	bl	8001070 <Update_Volts>
	  LPUART_ESC_Print("[7;18H");
 80012b8:	4818      	ldr	r0, [pc, #96]	; (800131c <Terminal_Values+0x144>)
 80012ba:	f7ff fd7b 	bl	8000db4 <LPUART_ESC_Print>
	  Update_Volts(Avg_Volt/15);
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <Terminal_Values+0x134>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <Terminal_Values+0x148>)
 80012c4:	fb82 1203 	smull	r1, r2, r2, r3
 80012c8:	441a      	add	r2, r3
 80012ca:	10d2      	asrs	r2, r2, #3
 80012cc:	17db      	asrs	r3, r3, #31
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fecc 	bl	8001070 <Update_Volts>
	  delay_us(200);                     //A short delay
 80012d8:	20c8      	movs	r0, #200	; 0xc8
 80012da:	f7ff fb35 	bl	8000948 <delay_us>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000060 	.word	0x20000060
 80012ec:	2000005c 	.word	0x2000005c
 80012f0:	20000064 	.word	0x20000064
 80012f4:	08002434 	.word	0x08002434
 80012f8:	0800243c 	.word	0x0800243c
 80012fc:	08002444 	.word	0x08002444
 8001300:	66666667 	.word	0x66666667
 8001304:	20000068 	.word	0x20000068
 8001308:	2000006c 	.word	0x2000006c
 800130c:	20000070 	.word	0x20000070
 8001310:	0800244c 	.word	0x0800244c
 8001314:	08002454 	.word	0x08002454
 8001318:	0800245c 	.word	0x0800245c
 800131c:	08002464 	.word	0x08002464
 8001320:	88888889 	.word	0x88888889

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001328:	f7ff fc90 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	; (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f000 ffd5 	bl	8002300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff fb25 	bl	80009a4 <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800135c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001368:	080024b4 	.word	0x080024b4
  ldr r2, =_sbss
 800136c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001370:	20000078 	.word	0x20000078

08001374 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC3_IRQHandler>

08001376 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f91f 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	200f      	movs	r0, #15
 8001388:	f000 f80e 	bl	80013a8 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	e001      	b.n	800139c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001398:	f7ff fc0a 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800139c:	79fb      	ldrb	r3, [r7, #7]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_InitTick+0x6c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d023      	beq.n	8001404 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_InitTick+0x70>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_InitTick+0x6c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f91d 	bl	8001612 <HAL_SYSTICK_Config>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d809      	bhi.n	80013f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 f8f5 	bl	80015da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_InitTick+0x74>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e007      	b.n	8001408 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e004      	b.n	8001408 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e001      	b.n	8001408 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	20000074 	.word	0x20000074

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000074 	.word	0x20000074

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff47 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff5c 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffb0 	bl	8001580 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <HAL_PWREx_GetVoltageRange+0x18>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40007000 	.word	0x40007000

08001648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001656:	d130      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001664:	d038      	beq.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2232      	movs	r2, #50	; 0x32
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	3301      	adds	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800168c:	e002      	b.n	8001694 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3b01      	subs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a0:	d102      	bne.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f2      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b4:	d110      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e00f      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d007      	beq.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000
 80016ec:	20000000 	.word	0x20000000
 80016f0:	431bde83 	.word	0x431bde83

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	f000 bc08 	b.w	8001f18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001708:	4b96      	ldr	r3, [pc, #600]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001712:	4b94      	ldr	r3, [pc, #592]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80e4 	beq.w	80018f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_RCC_OscConfig+0x4c>
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	f040 808b 	bne.w	800184e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 8087 	bne.w	800184e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001740:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_OscConfig+0x64>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e3df      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1a      	ldr	r2, [r3, #32]
 800175c:	4b81      	ldr	r3, [pc, #516]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_RCC_OscConfig+0x7e>
 8001768:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001770:	e005      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
 8001772:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800177e:	4293      	cmp	r3, r2
 8001780:	d223      	bcs.n	80017ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fd5a 	bl	8002240 <RCC_SetFlashLatencyFromMSIRange>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e3c0      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001796:	4b73      	ldr	r3, [pc, #460]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a72      	ldr	r2, [pc, #456]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	496d      	ldr	r1, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b4:	4b6b      	ldr	r3, [pc, #428]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	4968      	ldr	r1, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
 80017c8:	e025      	b.n	8001816 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ca:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a65      	ldr	r2, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4960      	ldr	r1, [pc, #384]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e8:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	495b      	ldr	r1, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fd1a 	bl	8002240 <RCC_SetFlashLatencyFromMSIRange>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e380      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001816:	f000 fc87 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b51      	ldr	r3, [pc, #324]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	4950      	ldr	r1, [pc, #320]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	4a4e      	ldr	r2, [pc, #312]	; (800196c <HAL_RCC_OscConfig+0x278>)
 8001834:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fdb4 	bl	80013a8 <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d052      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	e364      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d032      	beq.n	80018bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001856:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a42      	ldr	r2, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001862:	f7ff fdf1 	bl	8001448 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186a:	f7ff fded 	bl	8001448 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e34d      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a35      	ldr	r2, [pc, #212]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b33      	ldr	r3, [pc, #204]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4930      	ldr	r1, [pc, #192]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	492b      	ldr	r1, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
 80018ba:	e01a      	b.n	80018f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fdbe 	bl	8001448 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d0:	f7ff fdba 	bl	8001448 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e31a      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1dc>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d073      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x21c>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d10e      	bne.n	8001928 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d063      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d15f      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e2f7      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x24c>
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e025      	b.n	800198c <HAL_RCC_OscConfig+0x298>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d114      	bne.n	8001974 <HAL_RCC_OscConfig+0x280>
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a02      	ldr	r2, [pc, #8]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e013      	b.n	800198c <HAL_RCC_OscConfig+0x298>
 8001964:	40021000 	.word	0x40021000
 8001968:	0800246c 	.word	0x0800246c
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a9f      	ldr	r2, [pc, #636]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b9d      	ldr	r3, [pc, #628]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a9c      	ldr	r2, [pc, #624]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fd58 	bl	8001448 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fd54 	bl	8001448 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e2b4      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ae:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x2a8>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fd44 	bl	8001448 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fd40 	bl	8001448 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e2a0      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2d0>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d060      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_OscConfig+0x310>
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d119      	bne.n	8001a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d116      	bne.n	8001a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a04:	4b7c      	ldr	r3, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_OscConfig+0x328>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e27d      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	4973      	ldr	r1, [pc, #460]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a30:	e040      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d023      	beq.n	8001a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3a:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff fcff 	bl	8001448 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff fcfb 	bl	8001448 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e25b      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a60:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	495f      	ldr	r1, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	e018      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a5c      	ldr	r2, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fcdb 	bl	8001448 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a96:	f7ff fcd7 	bl	8001448 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e237      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d03c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ace:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fcb6 	bl	8001448 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fcb2 	bl	8001448 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e212      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ef      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x3ec>
 8001b00:	e01b      	b.n	8001b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b08:	4a3b      	ldr	r2, [pc, #236]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fc99 	bl	8001448 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff fc95 	bl	8001448 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1f5      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b2c:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ef      	bne.n	8001b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80a6 	beq.w	8001c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d118      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fc5c 	bl	8001448 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff fc58 	bl	8001448 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1b8      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4d8>
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bca:	e029      	b.n	8001c20 <HAL_RCC_OscConfig+0x52c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d115      	bne.n	8001c00 <HAL_RCC_OscConfig+0x50c>
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bea:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x52c>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	4b9d      	ldr	r3, [pc, #628]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a9c      	ldr	r2, [pc, #624]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c10:	4b99      	ldr	r3, [pc, #612]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a98      	ldr	r2, [pc, #608]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d016      	beq.n	8001c56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff fc0e 	bl	8001448 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7ff fc0a 	bl	8001448 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e168      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c46:	4b8c      	ldr	r3, [pc, #560]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ed      	beq.n	8001c30 <HAL_RCC_OscConfig+0x53c>
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff fbf7 	bl	8001448 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fbf3 	bl	8001448 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e151      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c74:	4b80      	ldr	r3, [pc, #512]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ed      	bne.n	8001c5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	4a7a      	ldr	r2, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ca8:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cae:	4a72      	ldr	r2, [pc, #456]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fbc6 	bl	8001448 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc0:	f7ff fbc2 	bl	8001448 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e122      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cd2:	4b69      	ldr	r3, [pc, #420]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ef      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x5cc>
 8001ce0:	e01b      	b.n	8001d1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ce2:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce8:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fba9 	bl	8001448 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfa:	f7ff fba5 	bl	8001448 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e105      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ef      	bne.n	8001cfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80f9 	beq.w	8001f16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	f040 80cf 	bne.w	8001ecc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d2e:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0203 	and.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d12c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d123      	bne.n	8001d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d11b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d113      	bne.n	8001d9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d109      	bne.n	8001d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	3b01      	subs	r3, #1
 8001d96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d071      	beq.n	8001e80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d068      	beq.n	8001e74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dae:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0ac      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dca:	f7ff fb3d 	bl	8001448 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fb39 	bl	8001448 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e099      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_RCC_OscConfig+0x788>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0a:	0212      	lsls	r2, r2, #8
 8001e0c:	4311      	orrs	r1, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e12:	0852      	lsrs	r2, r2, #1
 8001e14:	3a01      	subs	r2, #1
 8001e16:	0552      	lsls	r2, r2, #21
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e1e:	0852      	lsrs	r2, r2, #1
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0652      	lsls	r2, r2, #25
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e2a:	06d2      	lsls	r2, r2, #27
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	4912      	ldr	r1, [pc, #72]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e4c:	f7ff fafc 	bl	8001448 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff faf8 	bl	8001448 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e058      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e72:	e050      	b.n	8001f16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e04f      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d144      	bne.n	8001f16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ea4:	f7ff fad0 	bl	8001448 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff facc 	bl	8001448 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e02c      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x7b8>
 8001eca:	e024      	b.n	8001f16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d01f      	beq.n	8001f12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff fab3 	bl	8001448 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff faaf 	bl	8001448 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e00f      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4905      	ldr	r1, [pc, #20]	; (8001f20 <HAL_RCC_OscConfig+0x82c>)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_OscConfig+0x830>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60cb      	str	r3, [r1, #12]
 8001f10:	e001      	b.n	8001f16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	feeefffc 	.word	0xfeeefffc

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0e7      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b75      	ldr	r3, [pc, #468]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b72      	ldr	r3, [pc, #456]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4970      	ldr	r1, [pc, #448]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b6e      	ldr	r3, [pc, #440]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0cf      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d010      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d908      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4960      	ldr	r1, [pc, #384]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d04c      	beq.n	8002040 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d121      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0a6      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc6:	4b54      	ldr	r3, [pc, #336]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d115      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e09a      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fde:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e08e      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e086      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b46      	ldr	r3, [pc, #280]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4943      	ldr	r1, [pc, #268]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7ff fa1a 	bl	8001448 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff fa16 	bl	8001448 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e06e      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d010      	beq.n	800206e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002058:	429a      	cmp	r2, r3
 800205a:	d208      	bcs.n	800206e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	492b      	ldr	r1, [pc, #172]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d210      	bcs.n	800209e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 0207 	bic.w	r2, r3, #7
 8002084:	4923      	ldr	r1, [pc, #140]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_ClockConfig+0x1ec>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e036      	b.n	800210c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4918      	ldr	r1, [pc, #96]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4910      	ldr	r1, [pc, #64]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020dc:	f000 f824 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	490b      	ldr	r1, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x1f4>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1fc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f951 	bl	80013a8 <HAL_InitTick>
 8002106:	4603      	mov	r3, r0
 8002108:	72fb      	strb	r3, [r7, #11]

  return status;
 800210a:	7afb      	ldrb	r3, [r7, #11]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40022000 	.word	0x40022000
 8002118:	40021000 	.word	0x40021000
 800211c:	0800246c 	.word	0x0800246c
 8002120:	20000000 	.word	0x20000000
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x34>
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d121      	bne.n	800219a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d11e      	bne.n	800219a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e005      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002184:	4a2b      	ldr	r2, [pc, #172]	; (8002234 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_RCC_GetSysClockFreq+0x110>)
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e004      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_RCC_GetSysClockFreq+0x114>)
 80021ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d134      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0xa6>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d003      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0xac>
 80021cc:	e005      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_RCC_GetSysClockFreq+0x110>)
 80021d0:	617b      	str	r3, [r7, #20]
      break;
 80021d2:	e005      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_RCC_GetSysClockFreq+0x114>)
 80021d6:	617b      	str	r3, [r7, #20]
      break;
 80021d8:	e002      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	617b      	str	r3, [r7, #20]
      break;
 80021de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	3301      	adds	r3, #1
 80021ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	fb03 f202 	mul.w	r2, r3, r2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	0e5b      	lsrs	r3, r3, #25
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	3301      	adds	r3, #1
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002220:	69bb      	ldr	r3, [r7, #24]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	0800247c 	.word	0x0800247c
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002258:	f7ff f9e8 	bl	800162c <HAL_PWREx_GetVoltageRange>
 800225c:	6178      	str	r0, [r7, #20]
 800225e:	e014      	b.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	6593      	str	r3, [r2, #88]	; 0x58
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002278:	f7ff f9d8 	bl	800162c <HAL_PWREx_GetVoltageRange>
 800227c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002288:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002290:	d10b      	bne.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d919      	bls.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2ba0      	cmp	r3, #160	; 0xa0
 800229c:	d902      	bls.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800229e:	2302      	movs	r3, #2
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	e013      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a4:	2301      	movs	r3, #1
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	e010      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b80      	cmp	r3, #128	; 0x80
 80022ae:	d902      	bls.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022b0:	2303      	movs	r3, #3
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	e00a      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b80      	cmp	r3, #128	; 0x80
 80022ba:	d102      	bne.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022bc:	2302      	movs	r3, #2
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	e004      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d101      	bne.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c8:	2301      	movs	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 0207 	bic.w	r2, r3, #7
 80022d4:	4909      	ldr	r1, [pc, #36]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40022000 	.word	0x40022000

08002300 <__libc_init_array>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4d0d      	ldr	r5, [pc, #52]	; (8002338 <__libc_init_array+0x38>)
 8002304:	4c0d      	ldr	r4, [pc, #52]	; (800233c <__libc_init_array+0x3c>)
 8002306:	1b64      	subs	r4, r4, r5
 8002308:	10a4      	asrs	r4, r4, #2
 800230a:	2600      	movs	r6, #0
 800230c:	42a6      	cmp	r6, r4
 800230e:	d109      	bne.n	8002324 <__libc_init_array+0x24>
 8002310:	4d0b      	ldr	r5, [pc, #44]	; (8002340 <__libc_init_array+0x40>)
 8002312:	4c0c      	ldr	r4, [pc, #48]	; (8002344 <__libc_init_array+0x44>)
 8002314:	f000 f820 	bl	8002358 <_init>
 8002318:	1b64      	subs	r4, r4, r5
 800231a:	10a4      	asrs	r4, r4, #2
 800231c:	2600      	movs	r6, #0
 800231e:	42a6      	cmp	r6, r4
 8002320:	d105      	bne.n	800232e <__libc_init_array+0x2e>
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	f855 3b04 	ldr.w	r3, [r5], #4
 8002328:	4798      	blx	r3
 800232a:	3601      	adds	r6, #1
 800232c:	e7ee      	b.n	800230c <__libc_init_array+0xc>
 800232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002332:	4798      	blx	r3
 8002334:	3601      	adds	r6, #1
 8002336:	e7f2      	b.n	800231e <__libc_init_array+0x1e>
 8002338:	080024ac 	.word	0x080024ac
 800233c:	080024ac 	.word	0x080024ac
 8002340:	080024ac 	.word	0x080024ac
 8002344:	080024b0 	.word	0x080024b0

08002348 <memset>:
 8002348:	4402      	add	r2, r0
 800234a:	4603      	mov	r3, r0
 800234c:	4293      	cmp	r3, r2
 800234e:	d100      	bne.n	8002352 <memset+0xa>
 8002350:	4770      	bx	lr
 8002352:	f803 1b01 	strb.w	r1, [r3], #1
 8002356:	e7f9      	b.n	800234c <memset+0x4>

08002358 <_init>:
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	bf00      	nop
 800235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235e:	bc08      	pop	{r3}
 8002360:	469e      	mov	lr, r3
 8002362:	4770      	bx	lr

08002364 <_fini>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	bf00      	nop
 8002368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236a:	bc08      	pop	{r3}
 800236c:	469e      	mov	lr, r3
 800236e:	4770      	bx	lr
