
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001854  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001a00  08001a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a68  08001a68  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001a68  08001a68  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a68  08001a68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a6c  08001a6c  00011a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000014  08001a84  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08001a84  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005676  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d9  00000000  00000000  000256ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00026998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  00026fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027356  00000000  00000000  000274f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007513  00000000  00000000  0004e846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee6c1  00000000  00000000  00055d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014441a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015a4  00000000  00000000  0014446c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080019e8 	.word	0x080019e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080019e8 	.word	0x080019e8

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000008 	.word	0x20000008
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <LCD_init>:
int LCD_convert_ascii_to_time ( uint8_t asctime );

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  delay_us(100000);
 800024c:	482a      	ldr	r0, [pc, #168]	; (80002f8 <LCD_init+0xb0>)
 800024e:	f7ff ffcd 	bl	80001ec <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // enable GPIOA clock on bus
 8000252:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <LCD_init+0xb4>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	4a29      	ldr	r2, [pc, #164]	; (80002fc <LCD_init+0xb4>)
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 800025e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000268:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800026c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8000270:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
        GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
        GPIO_MODER_MODE7); // clear bits for PA
  control_pins->MODER |=
 8000272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027c:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000280:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 8000284:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
       GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
       GPIO_MODER_MODE7_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 8000286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000290:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8000294:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4 |
        GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
  control_pins->OSPEEDR |=
 8000296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80002a4:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
 80002a8:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED3_Pos) | (3 << GPIO_OSPEEDR_OSPEED4_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED5_Pos) | (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED7_Pos));
  control_pins->BRR =
 80002aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ae:	22fe      	movs	r2, #254	; 0xfe
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 80002b2:	4811      	ldr	r0, [pc, #68]	; (80002f8 <LCD_init+0xb0>)
 80002b4:	f7ff ff9a 	bl	80001ec <delay_us>
  command(0x30);
 80002b8:	2030      	movs	r0, #48	; 0x30
 80002ba:	f000 f83b 	bl	8000334 <command>
  delay_us(100);
 80002be:	2064      	movs	r0, #100	; 0x64
 80002c0:	f7ff ff94 	bl	80001ec <delay_us>
  command(0x30);
 80002c4:	2030      	movs	r0, #48	; 0x30
 80002c6:	f000 f835 	bl	8000334 <command>
  delay_us(100);
 80002ca:	2064      	movs	r0, #100	; 0x64
 80002cc:	f7ff ff8e 	bl	80001ec <delay_us>
  command(0x30);
 80002d0:	2030      	movs	r0, #48	; 0x30
 80002d2:	f000 f82f 	bl	8000334 <command>
  delay_us(100);
 80002d6:	2064      	movs	r0, #100	; 0x64
 80002d8:	f7ff ff88 	bl	80001ec <delay_us>
  command(0x20);
 80002dc:	2020      	movs	r0, #32
 80002de:	f000 f829 	bl	8000334 <command>
  delay_us(100);
 80002e2:	2064      	movs	r0, #100	; 0x64
 80002e4:	f7ff ff82 	bl	80001ec <delay_us>
  command(0x02);
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 f823 	bl	8000334 <command>
  delay_us(100);
 80002ee:	2064      	movs	r0, #100	; 0x64
 80002f0:	f7ff ff7c 	bl	80001ec <delay_us>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	000186a0 	.word	0x000186a0
 80002fc:	40021000 	.word	0x40021000

08000300 <Nybble>:

void Nybble() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	2208      	movs	r2, #8
 800030a:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 800030c:	2032      	movs	r0, #50	; 0x32
 800030e:	f7ff ff6d 	bl	80001ec <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 8000312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000316:	2208      	movs	r2, #8
 8000318:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 800031a:	2032      	movs	r0, #50	; 0x32
 800031c:	f7ff ff66 	bl	80001ec <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800032a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800032e:	6153      	str	r3, [r2, #20]
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}

08000334 <command>:

void command(uint8_t command) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	091b      	lsrs	r3, r3, #4
 8000342:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000348:	2206      	movs	r2, #6
 800034a:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e019      	b.n	8000386 <command+0x52>
    if ((command2 >> i) & 0x01) {
 8000352:	7bfa      	ldrb	r2, [r7, #15]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	fa42 f303 	asr.w	r3, r2, r3
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	2b00      	cmp	r3, #0
 8000360:	d007      	beq.n	8000372 <command+0x3e>
      control_pins->BSRR = GPIO_Pin[i];
 8000362:	4a26      	ldr	r2, [pc, #152]	; (80003fc <command+0xc8>)
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800036a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036e:	619a      	str	r2, [r3, #24]
 8000370:	e006      	b.n	8000380 <command+0x4c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <command+0xc8>)
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800037a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	3301      	adds	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	2b03      	cmp	r3, #3
 800038a:	dde2      	ble.n	8000352 <command+0x1e>
    }
  }

  delay_us(1000);
 800038c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000390:	f7ff ff2c 	bl	80001ec <delay_us>
  Nybble(); // Send pulse
 8000394:	f7ff ffb4 	bl	8000300 <Nybble>

  for (int i = 0; i < 4; i++) {
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	e019      	b.n	80003d2 <command+0x9e>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	fa42 f303 	asr.w	r3, r2, r3
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d007      	beq.n	80003be <command+0x8a>
      control_pins->BSRR = GPIO_Pin[i];
 80003ae:	4a13      	ldr	r2, [pc, #76]	; (80003fc <command+0xc8>)
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ba:	619a      	str	r2, [r3, #24]
 80003bc:	e006      	b.n	80003cc <command+0x98>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80003be:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <command+0xc8>)
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	3301      	adds	r3, #1
 80003d0:	613b      	str	r3, [r7, #16]
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	dde2      	ble.n	800039e <command+0x6a>
    }
  }
  delay_us(1000);
 80003d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003dc:	f7ff ff06 	bl	80001ec <delay_us>
  Nybble();                                    // Send pulse
 80003e0:	f7ff ff8e 	bl	8000300 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 80003e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003f2:	6153      	str	r3, [r2, #20]
}
 80003f4:	bf00      	nop
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000000 	.word	0x20000000

08000400 <write>:

void write(char letter) {  //write 1 character on the LCD display
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	091b      	lsrs	r3, r3, #4
 8000412:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 8000414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000418:	2202      	movs	r2, #2
 800041a:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 800041c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000420:	2204      	movs	r2, #4
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	e019      	b.n	800045e <write+0x5e>
    if ((c2 >> i) & 0x01) {
 800042a:	7bba      	ldrb	r2, [r7, #14]
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	fa42 f303 	asr.w	r3, r2, r3
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d007      	beq.n	800044a <write+0x4a>
      control_pins->BSRR = GPIO_Pin[i];
 800043a:	4a2a      	ldr	r2, [pc, #168]	; (80004e4 <write+0xe4>)
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000446:	619a      	str	r2, [r3, #24]
 8000448:	e006      	b.n	8000458 <write+0x58>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 800044a:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <write+0xe4>)
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	3301      	adds	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	2b03      	cmp	r3, #3
 8000462:	dde2      	ble.n	800042a <write+0x2a>
    }
  }

  delay_us(1000);
 8000464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000468:	f7ff fec0 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 800046c:	f7ff ff48 	bl	8000300 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	e019      	b.n	80004aa <write+0xaa>
    if ((c >> i) & 0x01) {
 8000476:	7bfa      	ldrb	r2, [r7, #15]
 8000478:	693b      	ldr	r3, [r7, #16]
 800047a:	fa42 f303 	asr.w	r3, r2, r3
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b00      	cmp	r3, #0
 8000484:	d007      	beq.n	8000496 <write+0x96>
      control_pins->BSRR = GPIO_Pin[i];
 8000486:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <write+0xe4>)
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800048e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000492:	619a      	str	r2, [r3, #24]
 8000494:	e006      	b.n	80004a4 <write+0xa4>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000496:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <write+0xe4>)
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800049e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a2:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	3301      	adds	r3, #1
 80004a8:	613b      	str	r3, [r7, #16]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	dde2      	ble.n	8000476 <write+0x76>
    }
  }
  delay_us(1000);
 80004b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b4:	f7ff fe9a 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 80004b8:	f7ff ff22 	bl	8000300 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 80004bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c0:	2202      	movs	r2, #2
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 80004c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004d2:	6153      	str	r3, [r2, #20]
  delay_us(100);
 80004d4:	2064      	movs	r0, #100	; 0x64
 80004d6:	f7ff fe89 	bl	80001ec <delay_us>
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000000 	.word	0x20000000

080004e8 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d103      	bne.n	8000506 <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	3b80      	subs	r3, #128	; 0x80
 8000502:	73fb      	strb	r3, [r7, #15]
 8000504:	e002      	b.n	800050c <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	3b40      	subs	r3, #64	; 0x40
 800050a:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff10 	bl	8000334 <command>
}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e00c      	b.n	8000544 <str_write+0x28>
    write(str[i]);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff64 	bl	8000400 <write>
    delay_us(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f7ff fe57 	bl	80001ec <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1ec      	bne.n	800052a <str_write+0xe>
  }
	delay_us(100);
 8000550:	2064      	movs	r0, #100	; 0x64
 8000552:	f7ff fe4b 	bl	80001ec <delay_us>
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <main>:
void SystemClock_Config(void);
#define BUFFER_SIZE 256
static char buffer[BUFFER_SIZE];
static int index = 0;
int flag = 0;
int main(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

	HAL_Init();
 8000564:	f000 fa4f 	bl	8000a06 <HAL_Init>
	SystemClock_Config();
 8000568:	f000 f8d2 	bl	8000710 <SystemClock_Config>
	LPUART_init();
 800056c:	f000 f97c 	bl	8000868 <LPUART_init>
	LCD_init();
 8000570:	f7ff fe6a 	bl	8000248 <LCD_init>
	command(0x0C);
 8000574:	200c      	movs	r0, #12
 8000576:	f7ff fedd 	bl	8000334 <command>
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 800057a:	4b35      	ldr	r3, [pc, #212]	; (8000650 <main+0xf0>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a34      	ldr	r2, [pc, #208]	; (8000650 <main+0xf0>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <main+0xf4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a32      	ldr	r2, [pc, #200]	; (8000654 <main+0xf4>)
 800058c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000590:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 8000592:	4b30      	ldr	r3, [pc, #192]	; (8000654 <main+0xf4>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <main+0xf4>)
 8000598:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800059c:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <main+0xf4>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	4a2c      	ldr	r2, [pc, #176]	; (8000654 <main+0xf4>)
 80005a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005a8:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <main+0xf0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a28      	ldr	r2, [pc, #160]	; (8000650 <main+0xf0>)
 80005b0:	f043 0302 	orr.w	r3, r3, #2
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <main+0xf8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a27      	ldr	r2, [pc, #156]	; (8000658 <main+0xf8>)
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <main+0xf8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a24      	ldr	r2, [pc, #144]	; (8000658 <main+0xf8>)
 80005c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005cc:	6013      	str	r3, [r2, #0]

	delay_us(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f7ff fe0c 	bl	80001ec <delay_us>
	lcd_set_cursor_position(0, 0); // set cursor to second row, first column
 80005d4:	2100      	movs	r1, #0
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff86 	bl	80004e8 <lcd_set_cursor_position>
	while (1) {
		if (flag) {
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <main+0xfc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d017      	beq.n	8000614 <main+0xb4>
			delay_us(10000);
 80005e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005e8:	f7ff fe00 	bl	80001ec <delay_us>
			flag = 0;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <main+0xfc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
			str_write("Welcome ");
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0x100>)
 80005f4:	f7ff ff92 	bl	800051c <str_write>
			str_write(buffer);  // process the string
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <main+0x104>)
 80005fa:	f7ff ff8f 	bl	800051c <str_write>

			lcd_set_cursor_position(1, 0); // set cursor to second row, first column
 80005fe:	2100      	movs	r1, #0
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff71 	bl	80004e8 <lcd_set_cursor_position>
			str_write("Put fngr on sens");
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <main+0x108>)
 8000608:	f7ff ff88 	bl	800051c <str_write>
			lcd_set_cursor_position(0, 0); // set cursor to second row, first column
 800060c:	2100      	movs	r1, #0
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ff6a 	bl	80004e8 <lcd_set_cursor_position>
		}
		if (GPIOC->IDR & GPIO_IDR_ID13) { // Check if the button is pressed
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <main+0xf4>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d013      	beq.n	8000648 <main+0xe8>
			GPIOB->BSRR = GPIO_PIN_7;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <main+0xf8>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	619a      	str	r2, [r3, #24]
			delay_us(10000);
 8000626:	f242 7010 	movw	r0, #10000	; 0x2710
 800062a:	f7ff fddf 	bl	80001ec <delay_us>
			while (!(LPUART1->ISR & USART_ISR_TXE));
 800062e:	bf00      	nop
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <main+0x10c>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f9      	beq.n	8000630 <main+0xd0>
			LPUART_Print("WILSON\n");
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <main+0x110>)
 800063e:	f000 f99d 	bl	800097c <LPUART_Print>
			delay_us(1000000);
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x114>)
 8000644:	f7ff fdd2 	bl	80001ec <delay_us>
		}
		GPIOB->BRR = GPIO_PIN_7;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <main+0xf8>)
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
		if (flag) {
 800064e:	e7c5      	b.n	80005dc <main+0x7c>
 8000650:	40021000 	.word	0x40021000
 8000654:	48000800 	.word	0x48000800
 8000658:	48000400 	.word	0x48000400
 800065c:	20000134 	.word	0x20000134
 8000660:	08001a00 	.word	0x08001a00
 8000664:	20000030 	.word	0x20000030
 8000668:	08001a0c 	.word	0x08001a0c
 800066c:	40008000 	.word	0x40008000
 8000670:	08001a20 	.word	0x08001a20
 8000674:	000f4240 	.word	0x000f4240

08000678 <LPUART1_IRQHandler>:
	}
}

void LPUART1_IRQHandler(void) {
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <LPUART1_IRQHandler+0x84>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0320 	and.w	r3, r3, #32
 8000686:	2b00      	cmp	r3, #0
 8000688:	d031      	beq.n	80006ee <LPUART1_IRQHandler+0x76>
		GPIOB->BSRR = GPIO_PIN_7;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <LPUART1_IRQHandler+0x88>)
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	619a      	str	r2, [r3, #24]

		char charRecv = LPUART1->RDR;  // read the received character
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <LPUART1_IRQHandler+0x84>)
 8000692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000694:	b29b      	uxth	r3, r3
 8000696:	71fb      	strb	r3, [r7, #7]
		buffer[index] = charRecv;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <LPUART1_IRQHandler+0x8c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	491a      	ldr	r1, [pc, #104]	; (8000708 <LPUART1_IRQHandler+0x90>)
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	54ca      	strb	r2, [r1, r3]
		index++;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <LPUART1_IRQHandler+0x8c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4a16      	ldr	r2, [pc, #88]	; (8000704 <LPUART1_IRQHandler+0x8c>)
 80006aa:	6013      	str	r3, [r2, #0]

		if (charRecv == '\n') {
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b0a      	cmp	r3, #10
 80006b0:	d10f      	bne.n	80006d2 <LPUART1_IRQHandler+0x5a>
			flag = 1;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <LPUART1_IRQHandler+0x94>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
			index--;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <LPUART1_IRQHandler+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <LPUART1_IRQHandler+0x8c>)
 80006c0:	6013      	str	r3, [r2, #0]
			buffer[index] = '\0';
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <LPUART1_IRQHandler+0x8c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <LPUART1_IRQHandler+0x90>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	54d1      	strb	r1, [r2, r3]
			index = 0;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <LPUART1_IRQHandler+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
		}
		while (!(LPUART1->ISR & USART_ISR_TXE))
 80006d2:	bf00      	nop
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <LPUART1_IRQHandler+0x84>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f9      	beq.n	80006d4 <LPUART1_IRQHandler+0x5c>
			;  // wait for empty TX buffer
		LPUART1->TDR = charRecv; // send received character
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <LPUART1_IRQHandler+0x84>)
 80006e2:	79fa      	ldrb	r2, [r7, #7]
 80006e4:	b292      	uxth	r2, r2
 80006e6:	851a      	strh	r2, [r3, #40]	; 0x28

		GPIOB->BRR = GPIO_PIN_7;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <LPUART1_IRQHandler+0x88>)
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40008000 	.word	0x40008000
 8000700:	48000400 	.word	0x48000400
 8000704:	20000130 	.word	0x20000130
 8000708:	20000030 	.word	0x20000030
 800070c:	20000134 	.word	0x20000134

08000710 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	; 0x58
 8000714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f95a 	bl	80019d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000732:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000736:	f000 facf 	bl	8000cd8 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000740:	f000 f82c 	bl	800079c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000744:	2310      	movs	r3, #16
 8000746:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fb11 	bl	8000d84 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x5c>
		Error_Handler();
 8000768:	f000 f818 	bl	800079c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000780:	463b      	mov	r3, r7
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f000 ff17 	bl	80015b8 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x84>
		Error_Handler();
 8000790:	f000 f804 	bl	800079c <Error_Handler>
	}
}
 8000794:	bf00      	nop
 8000796:	3758      	adds	r7, #88	; 0x58
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f938 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <LPUART_init>:
 */

#include "main.h"
#include "uart.h"

void LPUART_init() {
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <LPUART_init+0xcc>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a30      	ldr	r2, [pc, #192]	; (8000934 <LPUART_init+0xcc>)
 8000872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000876:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <LPUART_init+0xd0>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087c:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <LPUART_init+0xd0>)
 800087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000882:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <LPUART_init+0xd0>)
 8000886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000888:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <LPUART_init+0xd0>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8000890:	4b2a      	ldr	r3, [pc, #168]	; (800093c <LPUART_init+0xd4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a29      	ldr	r2, [pc, #164]	; (800093c <LPUART_init+0xd4>)
 8000896:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 800089a:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <LPUART_init+0xd4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a26      	ldr	r2, [pc, #152]	; (800093c <LPUART_init+0xd4>)
 80008a2:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 80008a6:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <LPUART_init+0xd4>)
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	4a23      	ldr	r2, [pc, #140]	; (800093c <LPUART_init+0xd4>)
 80008ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008b2:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <LPUART_init+0xd4>)
 80008b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b8:	4a20      	ldr	r2, [pc, #128]	; (800093c <LPUART_init+0xd4>)
 80008ba:	f023 030f 	bic.w	r3, r3, #15
 80008be:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <LPUART_init+0xd4>)
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <LPUART_init+0xd4>)
 80008c6:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80008ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008ce:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <LPUART_init+0xd4>)
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <LPUART_init+0xd4>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <LPUART_init+0xd8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <LPUART_init+0xd8>)
 80008e2:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80008e6:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <LPUART_init+0xd8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <LPUART_init+0xd8>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <LPUART_init+0xd8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <LPUART_init+0xd8>)
 80008fa:	f043 030c 	orr.w	r3, r3, #12
 80008fe:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <LPUART_init+0xd8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <LPUART_init+0xd8>)
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <LPUART_init+0xd8>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LPUART_init+0xd8>)
 8000912:	f023 0320 	bic.w	r3, r3, #32
 8000916:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <LPUART_init+0xd8>)
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LPUART_init+0xdc>)
 800091c:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <LPUART_init+0xe0>)
 8000920:	2240      	movs	r2, #64	; 0x40
 8000922:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000924:	b662      	cpsie	i
}
 8000926:	bf00      	nop
	__enable_irq();                          // enable global interrupts

}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40007000 	.word	0x40007000
 8000938:	40021000 	.word	0x40021000
 800093c:	48001800 	.word	0x48001800
 8000940:	40008000 	.word	0x40008000
 8000944:	0001a0aa 	.word	0x0001a0aa
 8000948:	e000e100 	.word	0xe000e100

0800094c <LPUART_Print_Char>:

void LPUART_Print_Char(char ch) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	while (!(LPUART1->ISR & USART_ISR_TXE))
 8000956:	bf00      	nop
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <LPUART_Print_Char+0x2c>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <LPUART_Print_Char+0xc>
		;   // wait for empty transmit buffer
	LPUART1->TDR = ch;                        // send the character
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <LPUART_Print_Char+0x2c>)
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	b292      	uxth	r2, r2
 800096a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	40008000 	.word	0x40008000

0800097c <LPUART_Print>:

void LPUART_Print(const char *message) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 8000988:	e009      	b.n	800099e <LPUART_Print+0x22>
		LPUART_Print_Char(message[iStrIdx]);
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ffda 	bl	800094c <LPUART_Print_Char>
		iStrIdx++;
 8000998:	89fb      	ldrh	r3, [r7, #14]
 800099a:	3301      	adds	r3, #1
 800099c:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 800099e:	89fb      	ldrh	r3, [r7, #14]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1ef      	bne.n	800098a <LPUART_Print+0xe>
	}
}
 80009aa:	bf00      	nop
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff ff44 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f000 ffd5 	bl	8001990 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fdbb 	bl	8000560 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009f8:	08001a70 	.word	0x08001a70
  ldr r2, =_sbss
 80009fc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a00:	2000013c 	.word	0x2000013c

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>

08000a06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f91f 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 f80e 	bl	8000a38 <HAL_InitTick>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	e001      	b.n	8000a2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a28:	f7ff febe 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_InitTick+0x6c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d023      	beq.n	8000a94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_InitTick+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_InitTick+0x6c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f91d 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10f      	bne.n	8000a8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d809      	bhi.n	8000a88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 f8f5 	bl	8000c6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_InitTick+0x74>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e007      	b.n	8000a98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e004      	b.n	8000a98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e001      	b.n	8000a98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000010 	.word	0x20000010
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	2000000c 	.word	0x2000000c

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000010 	.word	0x20000010
 8000ad4:	20000138 	.word	0x20000138

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000138 	.word	0x20000138

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff47 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff5c 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff8e 	bl	8000ba8 <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffb0 	bl	8000c10 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce6:	d130      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf4:	d038      	beq.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2232      	movs	r2, #50	; 0x32
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1c:	e002      	b.n	8000d24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d30:	d102      	bne.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f2      	bne.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d44:	d110      	bne.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e00f      	b.n	8000d6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d56:	d007      	beq.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40007000 	.word	0x40007000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	431bde83 	.word	0x431bde83

08000d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f000 bc08 	b.w	80015a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d98:	4b96      	ldr	r3, [pc, #600]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000da2:	4b94      	ldr	r3, [pc, #592]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80e4 	beq.w	8000f82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x4c>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2b0c      	cmp	r3, #12
 8000dc4:	f040 808b 	bne.w	8000ede <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	f040 8087 	bne.w	8000ede <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dd0:	4b88      	ldr	r3, [pc, #544]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <HAL_RCC_OscConfig+0x64>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e3df      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1a      	ldr	r2, [r3, #32]
 8000dec:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <HAL_RCC_OscConfig+0x7e>
 8000df8:	4b7e      	ldr	r3, [pc, #504]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e00:	e005      	b.n	8000e0e <HAL_RCC_OscConfig+0x8a>
 8000e02:	4b7c      	ldr	r3, [pc, #496]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d223      	bcs.n	8000e5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fd5a 	bl	80018d0 <RCC_SetFlashLatencyFromMSIRange>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e3c0      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a72      	ldr	r2, [pc, #456]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b70      	ldr	r3, [pc, #448]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	496d      	ldr	r1, [pc, #436]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e44:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	4968      	ldr	r1, [pc, #416]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
 8000e58:	e025      	b.n	8000ea6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e5a:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a65      	ldr	r2, [pc, #404]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4960      	ldr	r1, [pc, #384]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e78:	4b5e      	ldr	r3, [pc, #376]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	495b      	ldr	r1, [pc, #364]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d109      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fd1a 	bl	80018d0 <RCC_SetFlashLatencyFromMSIRange>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e380      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ea6:	f000 fc87 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	4950      	ldr	r1, [pc, #320]	; (8000ff8 <HAL_RCC_OscConfig+0x274>)
 8000eb8:	5ccb      	ldrb	r3, [r1, r3]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec2:	4a4e      	ldr	r2, [pc, #312]	; (8000ffc <HAL_RCC_OscConfig+0x278>)
 8000ec4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ec6:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fdb4 	bl	8000a38 <HAL_InitTick>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d052      	beq.n	8000f80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	e364      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d032      	beq.n	8000f4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a42      	ldr	r2, [pc, #264]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fdf1 	bl	8000ad8 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000efa:	f7ff fded 	bl	8000ad8 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e34d      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f0c:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a35      	ldr	r2, [pc, #212]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	4930      	ldr	r1, [pc, #192]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	492b      	ldr	r1, [pc, #172]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
 8000f4a:	e01a      	b.n	8000f82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a28      	ldr	r2, [pc, #160]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f52:	f023 0301 	bic.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fdbe 	bl	8000ad8 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f60:	f7ff fdba 	bl	8000ad8 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e31a      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x1dc>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d073      	beq.n	8001076 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x21c>
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2b0c      	cmp	r3, #12
 8000f98:	d10e      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d063      	beq.n	8001074 <HAL_RCC_OscConfig+0x2f0>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d15f      	bne.n	8001074 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e2f7      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc0:	d106      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x24c>
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e025      	b.n	800101c <HAL_RCC_OscConfig+0x298>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd8:	d114      	bne.n	8001004 <HAL_RCC_OscConfig+0x280>
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a02      	ldr	r2, [pc, #8]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e013      	b.n	800101c <HAL_RCC_OscConfig+0x298>
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	08001a28 	.word	0x08001a28
 8000ffc:	20000008 	.word	0x20000008
 8001000:	2000000c 	.word	0x2000000c
 8001004:	4ba0      	ldr	r3, [pc, #640]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a9f      	ldr	r2, [pc, #636]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800100a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a9c      	ldr	r2, [pc, #624]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fd58 	bl	8000ad8 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fd54 	bl	8000ad8 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e2b4      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103e:	4b92      	ldr	r3, [pc, #584]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x2a8>
 800104a:	e014      	b.n	8001076 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104c:	f7ff fd44 	bl	8000ad8 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fd40 	bl	8000ad8 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e2a0      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001066:	4b88      	ldr	r3, [pc, #544]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x2d0>
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d060      	beq.n	8001144 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d005      	beq.n	8001094 <HAL_RCC_OscConfig+0x310>
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b0c      	cmp	r3, #12
 800108c:	d119      	bne.n	80010c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d116      	bne.n	80010c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001094:	4b7c      	ldr	r3, [pc, #496]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_OscConfig+0x328>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e27d      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b76      	ldr	r3, [pc, #472]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	4973      	ldr	r1, [pc, #460]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c0:	e040      	b.n	8001144 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d023      	beq.n	8001112 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ca:	4b6f      	ldr	r3, [pc, #444]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6e      	ldr	r2, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fcff 	bl	8000ad8 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fcfb 	bl	8000ad8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e25b      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f0:	4b65      	ldr	r3, [pc, #404]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b62      	ldr	r3, [pc, #392]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	061b      	lsls	r3, r3, #24
 800110a:	495f      	ldr	r1, [pc, #380]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
 8001110:	e018      	b.n	8001144 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001112:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800111c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fcdb 	bl	8000ad8 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fcd7 	bl	8000ad8 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e237      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d03c      	beq.n	80011ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01c      	beq.n	8001192 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800115a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115e:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fcb6 	bl	8000ad8 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fcb2 	bl	8000ad8 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e212      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0ef      	beq.n	8001170 <HAL_RCC_OscConfig+0x3ec>
 8001190:	e01b      	b.n	80011ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001198:	4a3b      	ldr	r2, [pc, #236]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a2:	f7ff fc99 	bl	8000ad8 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc95 	bl	8000ad8 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e1f5      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1ef      	bne.n	80011aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80a6 	beq.w	8001324 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10d      	bne.n	8001204 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001200:	2301      	movs	r3, #1
 8001202:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d118      	bne.n	8001242 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121c:	f7ff fc5c 	bl	8000ad8 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001224:	f7ff fc58 	bl	8000ad8 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e1b8      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d108      	bne.n	800125c <HAL_RCC_OscConfig+0x4d8>
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800124c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800125a:	e029      	b.n	80012b0 <HAL_RCC_OscConfig+0x52c>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b05      	cmp	r3, #5
 8001262:	d115      	bne.n	8001290 <HAL_RCC_OscConfig+0x50c>
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001284:	e014      	b.n	80012b0 <HAL_RCC_OscConfig+0x52c>
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40007000 	.word	0x40007000
 8001290:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	4a9c      	ldr	r2, [pc, #624]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a0:	4b99      	ldr	r3, [pc, #612]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	4a98      	ldr	r2, [pc, #608]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80012a8:	f023 0304 	bic.w	r3, r3, #4
 80012ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d016      	beq.n	80012e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc0e 	bl	8000ad8 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fc0a 	bl	8000ad8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e168      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d6:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80012d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ed      	beq.n	80012c0 <HAL_RCC_OscConfig+0x53c>
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e6:	f7ff fbf7 	bl	8000ad8 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff fbf3 	bl	8000ad8 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e151      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001304:	4b80      	ldr	r3, [pc, #512]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1ed      	bne.n	80012ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001318:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a7a      	ldr	r2, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 800131e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d03c      	beq.n	80013aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01c      	beq.n	8001372 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001338:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 800133a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fbc6 	bl	8000ad8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001350:	f7ff fbc2 	bl	8000ad8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e122      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001362:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0ef      	beq.n	8001350 <HAL_RCC_OscConfig+0x5cc>
 8001370:	e01b      	b.n	80013aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001372:	4b65      	ldr	r3, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001378:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001382:	f7ff fba9 	bl	8000ad8 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800138a:	f7ff fba5 	bl	8000ad8 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e105      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800139c:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 800139e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ef      	bne.n	800138a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80f9 	beq.w	80015a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	f040 80cf 	bne.w	800155c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0203 	and.w	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d12c      	bne.n	800142c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	3b01      	subs	r3, #1
 80013de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d123      	bne.n	800142c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d11b      	bne.n	800142c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d113      	bne.n	800142c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	3b01      	subs	r3, #1
 8001412:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d109      	bne.n	800142c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	3b01      	subs	r3, #1
 8001426:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d071      	beq.n	8001510 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	d068      	beq.n	8001504 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800143e:	4b32      	ldr	r3, [pc, #200]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0ac      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001458:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800145a:	f7ff fb3d 	bl	8000ad8 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fb39 	bl	8000ad8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e099      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x788>)
 8001486:	4013      	ands	r3, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001490:	3a01      	subs	r2, #1
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	4311      	orrs	r1, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800149a:	0212      	lsls	r2, r2, #8
 800149c:	4311      	orrs	r1, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014a2:	0852      	lsrs	r2, r2, #1
 80014a4:	3a01      	subs	r2, #1
 80014a6:	0552      	lsls	r2, r2, #21
 80014a8:	4311      	orrs	r1, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014ae:	0852      	lsrs	r2, r2, #1
 80014b0:	3a01      	subs	r2, #1
 80014b2:	0652      	lsls	r2, r2, #25
 80014b4:	4311      	orrs	r1, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ba:	06d2      	lsls	r2, r2, #27
 80014bc:	430a      	orrs	r2, r1
 80014be:	4912      	ldr	r1, [pc, #72]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80014d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014dc:	f7ff fafc 	bl	8000ad8 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff faf8 	bl	8000ad8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e058      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001502:	e050      	b.n	80015a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e04f      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
 8001508:	40021000 	.word	0x40021000
 800150c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d144      	bne.n	80015a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001526:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001534:	f7ff fad0 	bl	8000ad8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff facc 	bl	8000ad8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e02c      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x7b8>
 800155a:	e024      	b.n	80015a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d01f      	beq.n	80015a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 8001568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800156c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fab3 	bl	8000ad8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff faaf 	bl	8000ad8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e00f      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	4905      	ldr	r1, [pc, #20]	; (80015b0 <HAL_RCC_OscConfig+0x82c>)
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_RCC_OscConfig+0x830>)
 800159c:	4013      	ands	r3, r2
 800159e:	60cb      	str	r3, [r1, #12]
 80015a0:	e001      	b.n	80015a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	feeefffc 	.word	0xfeeefffc

080015b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0e7      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d910      	bls.n	80015fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 0207 	bic.w	r2, r3, #7
 80015e2:	4970      	ldr	r1, [pc, #448]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0cf      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d010      	beq.n	800162a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001614:	429a      	cmp	r2, r3
 8001616:	d908      	bls.n	800162a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4960      	ldr	r1, [pc, #384]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d04c      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d121      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0a6      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001656:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d115      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e09a      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166e:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e08e      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e086      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b46      	ldr	r3, [pc, #280]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4943      	ldr	r1, [pc, #268]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa1a 	bl	8000ad8 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa16 	bl	8000ad8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e06e      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d010      	beq.n	80016fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d208      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	492b      	ldr	r1, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d210      	bcs.n	800172e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 0207 	bic.w	r2, r3, #7
 8001714:	4923      	ldr	r1, [pc, #140]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e036      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	4918      	ldr	r1, [pc, #96]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4910      	ldr	r1, [pc, #64]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800176c:	f000 f824 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	490b      	ldr	r1, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1f4>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1fc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f951 	bl	8000a38 <HAL_InitTick>
 8001796:	4603      	mov	r3, r0
 8001798:	72fb      	strb	r3, [r7, #11]

  return status;
 800179a:	7afb      	ldrb	r3, [r7, #11]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08001a28 	.word	0x08001a28
 80017b0:	20000008 	.word	0x20000008
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d121      	bne.n	800182a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d11e      	bne.n	800182a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017f8:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e005      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001814:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d102      	bne.n	8001836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	e004      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d101      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_RCC_GetSysClockFreq+0x114>)
 800183e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d134      	bne.n	80018b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d003      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0xa6>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d003      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0xac>
 800185c:	e005      	b.n	800186a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001860:	617b      	str	r3, [r7, #20]
      break;
 8001862:	e005      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_GetSysClockFreq+0x114>)
 8001866:	617b      	str	r3, [r7, #20]
      break;
 8001868:	e002      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	617b      	str	r3, [r7, #20]
      break;
 800186e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	3301      	adds	r3, #1
 800187c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	fb03 f202 	mul.w	r2, r3, r2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	0e5b      	lsrs	r3, r3, #25
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	3301      	adds	r3, #1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018b0:	69bb      	ldr	r3, [r7, #24]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08001a38 	.word	0x08001a38
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	007a1200 	.word	0x007a1200

080018d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018e8:	f7ff f9e8 	bl	8000cbc <HAL_PWREx_GetVoltageRange>
 80018ec:	6178      	str	r0, [r7, #20]
 80018ee:	e014      	b.n	800191a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	4a24      	ldr	r2, [pc, #144]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6593      	str	r3, [r2, #88]	; 0x58
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001908:	f7ff f9d8 	bl	8000cbc <HAL_PWREx_GetVoltageRange>
 800190c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001918:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001920:	d10b      	bne.n	800193a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d919      	bls.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2ba0      	cmp	r3, #160	; 0xa0
 800192c:	d902      	bls.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800192e:	2302      	movs	r3, #2
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	e013      	b.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001934:	2301      	movs	r3, #1
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e010      	b.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b80      	cmp	r3, #128	; 0x80
 800193e:	d902      	bls.n	8001946 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001940:	2303      	movs	r3, #3
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	e00a      	b.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b80      	cmp	r3, #128	; 0x80
 800194a:	d102      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800194c:	2302      	movs	r3, #2
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	e004      	b.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b70      	cmp	r3, #112	; 0x70
 8001956:	d101      	bne.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001958:	2301      	movs	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 0207 	bic.w	r2, r3, #7
 8001964:	4909      	ldr	r1, [pc, #36]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	40022000 	.word	0x40022000

08001990 <__libc_init_array>:
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	4d0d      	ldr	r5, [pc, #52]	; (80019c8 <__libc_init_array+0x38>)
 8001994:	4c0d      	ldr	r4, [pc, #52]	; (80019cc <__libc_init_array+0x3c>)
 8001996:	1b64      	subs	r4, r4, r5
 8001998:	10a4      	asrs	r4, r4, #2
 800199a:	2600      	movs	r6, #0
 800199c:	42a6      	cmp	r6, r4
 800199e:	d109      	bne.n	80019b4 <__libc_init_array+0x24>
 80019a0:	4d0b      	ldr	r5, [pc, #44]	; (80019d0 <__libc_init_array+0x40>)
 80019a2:	4c0c      	ldr	r4, [pc, #48]	; (80019d4 <__libc_init_array+0x44>)
 80019a4:	f000 f820 	bl	80019e8 <_init>
 80019a8:	1b64      	subs	r4, r4, r5
 80019aa:	10a4      	asrs	r4, r4, #2
 80019ac:	2600      	movs	r6, #0
 80019ae:	42a6      	cmp	r6, r4
 80019b0:	d105      	bne.n	80019be <__libc_init_array+0x2e>
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
 80019b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019b8:	4798      	blx	r3
 80019ba:	3601      	adds	r6, #1
 80019bc:	e7ee      	b.n	800199c <__libc_init_array+0xc>
 80019be:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c2:	4798      	blx	r3
 80019c4:	3601      	adds	r6, #1
 80019c6:	e7f2      	b.n	80019ae <__libc_init_array+0x1e>
 80019c8:	08001a68 	.word	0x08001a68
 80019cc:	08001a68 	.word	0x08001a68
 80019d0:	08001a68 	.word	0x08001a68
 80019d4:	08001a6c 	.word	0x08001a6c

080019d8 <memset>:
 80019d8:	4402      	add	r2, r0
 80019da:	4603      	mov	r3, r0
 80019dc:	4293      	cmp	r3, r2
 80019de:	d100      	bne.n	80019e2 <memset+0xa>
 80019e0:	4770      	bx	lr
 80019e2:	f803 1b01 	strb.w	r1, [r3], #1
 80019e6:	e7f9      	b.n	80019dc <memset+0x4>

080019e8 <_init>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	bf00      	nop
 80019ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ee:	bc08      	pop	{r3}
 80019f0:	469e      	mov	lr, r3
 80019f2:	4770      	bx	lr

080019f4 <_fini>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	bf00      	nop
 80019f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fa:	bc08      	pop	{r3}
 80019fc:	469e      	mov	lr, r3
 80019fe:	4770      	bx	lr
