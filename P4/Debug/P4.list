
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001a9c  08001a9c  00011a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b0c  08001b0c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001b0c  08001b0c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b0c  08001b0c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b0c  08001b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b10  08001b10  00011b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000014  08001b28  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08001b28  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056f8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012fd  00000000  00000000  0002573c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00026a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  00027060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002730d  00000000  00000000  000275c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075f8  00000000  00000000  0004e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee6f4  00000000  00000000  00055ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001445c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001614  00000000  00000000  00144614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001a84 	.word	0x08001a84

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08001a84 	.word	0x08001a84

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000008 	.word	0x20000008
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <Nybble>:
  delay_us(100);
  command(0x02);
  delay_us(100);
}

void Nybble() {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	2208      	movs	r2, #8
 8000252:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 8000254:	2032      	movs	r0, #50	; 0x32
 8000256:	f7ff ffc9 	bl	80001ec <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 800025a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800025e:	2208      	movs	r2, #8
 8000260:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 8000262:	2032      	movs	r0, #50	; 0x32
 8000264:	f7ff ffc2 	bl	80001ec <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000276:	6153      	str	r3, [r2, #20]
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <command>:

void command(uint8_t command) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	091b      	lsrs	r3, r3, #4
 800028a:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 800028c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000290:	2206      	movs	r2, #6
 8000292:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	e019      	b.n	80002ce <command+0x52>
    if ((command2 >> i) & 0x01) {
 800029a:	7bfa      	ldrb	r2, [r7, #15]
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	fa42 f303 	asr.w	r3, r2, r3
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d007      	beq.n	80002ba <command+0x3e>
      control_pins->BSRR = GPIO_Pin[i];
 80002aa:	4a26      	ldr	r2, [pc, #152]	; (8000344 <command+0xc8>)
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b6:	619a      	str	r2, [r3, #24]
 80002b8:	e006      	b.n	80002c8 <command+0x4c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80002ba:	4a22      	ldr	r2, [pc, #136]	; (8000344 <command+0xc8>)
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	3301      	adds	r3, #1
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	dde2      	ble.n	800029a <command+0x1e>
    }
  }

  delay_us(1000);
 80002d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d8:	f7ff ff88 	bl	80001ec <delay_us>
  Nybble(); // Send pulse
 80002dc:	f7ff ffb4 	bl	8000248 <Nybble>

  for (int i = 0; i < 4; i++) {
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]
 80002e4:	e019      	b.n	800031a <command+0x9e>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	fa42 f303 	asr.w	r3, r2, r3
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d007      	beq.n	8000306 <command+0x8a>
      control_pins->BSRR = GPIO_Pin[i];
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <command+0xc8>)
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000302:	619a      	str	r2, [r3, #24]
 8000304:	e006      	b.n	8000314 <command+0x98>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000306:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <command+0xc8>)
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800030e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000312:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	3301      	adds	r3, #1
 8000318:	613b      	str	r3, [r7, #16]
 800031a:	693b      	ldr	r3, [r7, #16]
 800031c:	2b03      	cmp	r3, #3
 800031e:	dde2      	ble.n	80002e6 <command+0x6a>
    }
  }
  delay_us(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000324:	f7ff ff62 	bl	80001ec <delay_us>
  Nybble();                                    // Send pulse
 8000328:	f7ff ff8e 	bl	8000248 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 800032c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800033a:	6153      	str	r3, [r2, #20]
}
 800033c:	bf00      	nop
 800033e:	3718      	adds	r7, #24
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000000 	.word	0x20000000

08000348 <write>:

void write(char letter) {  //write 1 character on the LCD display
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	091b      	lsrs	r3, r3, #4
 800035a:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 800035c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000360:	2202      	movs	r2, #2
 8000362:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000368:	2204      	movs	r2, #4
 800036a:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	e019      	b.n	80003a6 <write+0x5e>
    if ((c2 >> i) & 0x01) {
 8000372:	7bba      	ldrb	r2, [r7, #14]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	fa42 f303 	asr.w	r3, r2, r3
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d007      	beq.n	8000392 <write+0x4a>
      control_pins->BSRR = GPIO_Pin[i];
 8000382:	4a2a      	ldr	r2, [pc, #168]	; (800042c <write+0xe4>)
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800038a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038e:	619a      	str	r2, [r3, #24]
 8000390:	e006      	b.n	80003a0 <write+0x58>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000392:	4a26      	ldr	r2, [pc, #152]	; (800042c <write+0xe4>)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800039a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	3301      	adds	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	dde2      	ble.n	8000372 <write+0x2a>
    }
  }

  delay_us(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b0:	f7ff ff1c 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 80003b4:	f7ff ff48 	bl	8000248 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
 80003bc:	e019      	b.n	80003f2 <write+0xaa>
    if ((c >> i) & 0x01) {
 80003be:	7bfa      	ldrb	r2, [r7, #15]
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	fa42 f303 	asr.w	r3, r2, r3
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d007      	beq.n	80003de <write+0x96>
      control_pins->BSRR = GPIO_Pin[i];
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <write+0xe4>)
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003da:	619a      	str	r2, [r3, #24]
 80003dc:	e006      	b.n	80003ec <write+0xa4>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <write+0xe4>)
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	3301      	adds	r3, #1
 80003f0:	613b      	str	r3, [r7, #16]
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	dde2      	ble.n	80003be <write+0x76>
    }
  }
  delay_us(1000);
 80003f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fc:	f7ff fef6 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 8000400:	f7ff ff22 	bl	8000248 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 8000404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000408:	2202      	movs	r2, #2
 800040a:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 800040c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800041a:	6153      	str	r3, [r2, #20]
  delay_us(100);
 800041c:	2064      	movs	r0, #100	; 0x64
 800041e:	f7ff fee5 	bl	80001ec <delay_us>
}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000

08000430 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	460a      	mov	r2, r1
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	4613      	mov	r3, r2
 800043e:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d103      	bne.n	800044e <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	3b80      	subs	r3, #128	; 0x80
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e002      	b.n	8000454 <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	3b40      	subs	r3, #64	; 0x40
 8000452:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff10 	bl	800027c <command>
}
 800045c:	bf00      	nop
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	e00c      	b.n	800048c <str_write+0x28>
    write(str[i]);
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	4413      	add	r3, r2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff64 	bl	8000348 <write>
    delay_us(100);
 8000480:	2064      	movs	r0, #100	; 0x64
 8000482:	f7ff feb3 	bl	80001ec <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3301      	adds	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1ec      	bne.n	8000472 <str_write+0xe>
  }
	delay_us(100);
 8000498:	2064      	movs	r0, #100	; 0x64
 800049a:	f7ff fea7 	bl	80001ec <delay_us>
}
 800049e:	bf00      	nop
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <main>:
void SystemClock_Config(void);
#define BUFFER_SIZE 256
static char buffer[BUFFER_SIZE];
static int index = 0;
int flag = 0;
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

	HAL_Init();
 80004ac:	f000 faf9 	bl	8000aa2 <HAL_Init>
	SystemClock_Config();
 80004b0:	f000 f8f2 	bl	8000698 <SystemClock_Config>
	LPUART_init();
 80004b4:	f000 f99c 	bl	80007f0 <LPUART_init>
	//LCD_init();
	//command(0x0C);

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 80004b8:	4b35      	ldr	r3, [pc, #212]	; (8000590 <main+0xe8>)
 80004ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004bc:	4a34      	ldr	r2, [pc, #208]	; (8000590 <main+0xe8>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 80004c4:	4b33      	ldr	r3, [pc, #204]	; (8000594 <main+0xec>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a32      	ldr	r2, [pc, #200]	; (8000594 <main+0xec>)
 80004ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80004ce:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 80004d0:	4b30      	ldr	r3, [pc, #192]	; (8000594 <main+0xec>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <main+0xec>)
 80004d6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80004da:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 80004dc:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <main+0xec>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a2c      	ldr	r2, [pc, #176]	; (8000594 <main+0xec>)
 80004e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004e6:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <main+0xe8>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ec:	4a28      	ldr	r2, [pc, #160]	; (8000590 <main+0xe8>)
 80004ee:	f043 0302 	orr.w	r3, r3, #2
 80004f2:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 80004f4:	4b28      	ldr	r3, [pc, #160]	; (8000598 <main+0xf0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a27      	ldr	r2, [pc, #156]	; (8000598 <main+0xf0>)
 80004fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004fe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 8000500:	4b25      	ldr	r3, [pc, #148]	; (8000598 <main+0xf0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a24      	ldr	r2, [pc, #144]	; (8000598 <main+0xf0>)
 8000506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050a:	6013      	str	r3, [r2, #0]

	delay_us(100);
 800050c:	2064      	movs	r0, #100	; 0x64
 800050e:	f7ff fe6d 	bl	80001ec <delay_us>
	USART_init();
 8000512:	f000 f9df 	bl	80008d4 <USART_init>
	USART_print("Hello\n");
 8000516:	4821      	ldr	r0, [pc, #132]	; (800059c <main+0xf4>)
 8000518:	f000 fa3e 	bl	8000998 <USART_print>
	while (1) {
//		USART_print("Hello");
		if (flag) {
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <main+0xf8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d017      	beq.n	8000554 <main+0xac>
			delay_us(10000);
 8000524:	f242 7010 	movw	r0, #10000	; 0x2710
 8000528:	f7ff fe60 	bl	80001ec <delay_us>
			flag = 0;
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <main+0xf8>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
			str_write("Welcome ");
 8000532:	481c      	ldr	r0, [pc, #112]	; (80005a4 <main+0xfc>)
 8000534:	f7ff ff96 	bl	8000464 <str_write>
			str_write(buffer);  // process the string
 8000538:	481b      	ldr	r0, [pc, #108]	; (80005a8 <main+0x100>)
 800053a:	f7ff ff93 	bl	8000464 <str_write>

			lcd_set_cursor_position(1, 0); // set cursor to second row, first column
 800053e:	2100      	movs	r1, #0
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff ff75 	bl	8000430 <lcd_set_cursor_position>
			str_write("Put fngr on sens");
 8000546:	4819      	ldr	r0, [pc, #100]	; (80005ac <main+0x104>)
 8000548:	f7ff ff8c 	bl	8000464 <str_write>
			lcd_set_cursor_position(0, 0); // set cursor to second row, first column
 800054c:	2100      	movs	r1, #0
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ff6e 	bl	8000430 <lcd_set_cursor_position>
		}
		if (GPIOC->IDR & GPIO_IDR_ID13) { // Check if the button is pressed
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <main+0xec>)
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055c:	2b00      	cmp	r3, #0
 800055e:	d013      	beq.n	8000588 <main+0xe0>
			GPIOB->BSRR = GPIO_PIN_7;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <main+0xf0>)
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	619a      	str	r2, [r3, #24]
			delay_us(10000);
 8000566:	f242 7010 	movw	r0, #10000	; 0x2710
 800056a:	f7ff fe3f 	bl	80001ec <delay_us>
			while (!(LPUART1->ISR & USART_ISR_TXE));
 800056e:	bf00      	nop
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <main+0x108>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f9      	beq.n	8000570 <main+0xc8>
			LPUART_Print("Wilson\n");
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <main+0x10c>)
 800057e:	f000 fa4b 	bl	8000a18 <LPUART_Print>
			delay_us(1000000);
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <main+0x110>)
 8000584:	f7ff fe32 	bl	80001ec <delay_us>
		}
		GPIOB->BRR = GPIO_PIN_7;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <main+0xf0>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	629a      	str	r2, [r3, #40]	; 0x28
		if (flag) {
 800058e:	e7c5      	b.n	800051c <main+0x74>
 8000590:	40021000 	.word	0x40021000
 8000594:	48000800 	.word	0x48000800
 8000598:	48000400 	.word	0x48000400
 800059c:	08001a9c 	.word	0x08001a9c
 80005a0:	20000134 	.word	0x20000134
 80005a4:	08001aa4 	.word	0x08001aa4
 80005a8:	20000030 	.word	0x20000030
 80005ac:	08001ab0 	.word	0x08001ab0
 80005b0:	40008000 	.word	0x40008000
 80005b4:	08001ac4 	.word	0x08001ac4
 80005b8:	000f4240 	.word	0x000f4240

080005bc <LPUART1_IRQHandler>:

	}
}

void LPUART1_IRQHandler(void) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <LPUART1_IRQHandler+0x84>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f003 0320 	and.w	r3, r3, #32
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d031      	beq.n	8000632 <LPUART1_IRQHandler+0x76>
		GPIOB->BSRR = GPIO_PIN_7;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <LPUART1_IRQHandler+0x88>)
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	619a      	str	r2, [r3, #24]

		char charRecv = LPUART1->RDR;  // read the received character
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <LPUART1_IRQHandler+0x84>)
 80005d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005d8:	b29b      	uxth	r3, r3
 80005da:	71fb      	strb	r3, [r7, #7]
		buffer[index] = charRecv;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <LPUART1_IRQHandler+0x8c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	491a      	ldr	r1, [pc, #104]	; (800064c <LPUART1_IRQHandler+0x90>)
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	54ca      	strb	r2, [r1, r3]
		index++;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <LPUART1_IRQHandler+0x8c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a16      	ldr	r2, [pc, #88]	; (8000648 <LPUART1_IRQHandler+0x8c>)
 80005ee:	6013      	str	r3, [r2, #0]

		if (charRecv == '\n') {
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b0a      	cmp	r3, #10
 80005f4:	d10f      	bne.n	8000616 <LPUART1_IRQHandler+0x5a>
			flag = 1;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <LPUART1_IRQHandler+0x94>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
			index--;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <LPUART1_IRQHandler+0x8c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3b01      	subs	r3, #1
 8000602:	4a11      	ldr	r2, [pc, #68]	; (8000648 <LPUART1_IRQHandler+0x8c>)
 8000604:	6013      	str	r3, [r2, #0]
			buffer[index] = '\0';
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <LPUART1_IRQHandler+0x8c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <LPUART1_IRQHandler+0x90>)
 800060c:	2100      	movs	r1, #0
 800060e:	54d1      	strb	r1, [r2, r3]
			index = 0;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <LPUART1_IRQHandler+0x8c>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
		}
		while (!(LPUART1->ISR & USART_ISR_TXE))
 8000616:	bf00      	nop
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <LPUART1_IRQHandler+0x84>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f9      	beq.n	8000618 <LPUART1_IRQHandler+0x5c>
			;  // wait for empty TX buffer
		LPUART1->TDR = charRecv; // send received character
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <LPUART1_IRQHandler+0x84>)
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	b292      	uxth	r2, r2
 800062a:	851a      	strh	r2, [r3, #40]	; 0x28

		GPIOB->BRR = GPIO_PIN_7;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LPUART1_IRQHandler+0x88>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40008000 	.word	0x40008000
 8000644:	48000400 	.word	0x48000400
 8000648:	20000130 	.word	0x20000130
 800064c:	20000030 	.word	0x20000030
 8000650:	20000134 	.word	0x20000134

08000654 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0

  if (USART2->ISR & USART_ISR_RXNE){
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <USART2_IRQHandler+0x40>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00f      	beq.n	8000686 <USART2_IRQHandler+0x32>
    char character = USART2->RDR;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <USART2_IRQHandler+0x40>)
 8000668:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800066a:	b29b      	uxth	r3, r3
 800066c:	71fb      	strb	r3, [r7, #7]
    switch (character){
        default:
            while (!(USART2->ISR & USART_ISR_TXE)){}
 800066e:	bf00      	nop
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <USART2_IRQHandler+0x40>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f9      	beq.n	8000670 <USART2_IRQHandler+0x1c>
            USART2->TDR = character;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <USART2_IRQHandler+0x40>)
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	b292      	uxth	r2, r2
 8000682:	851a      	strh	r2, [r3, #40]	; 0x28
            break;
 8000684:	e000      	b.n	8000688 <USART2_IRQHandler+0x34>
    }
  }
 8000686:	bf00      	nop
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	40004400 	.word	0x40004400

08000698 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	; 0x58
 800069c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f9e4 	bl	8001a74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f000 fb59 	bl	8000d74 <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006c8:	f000 f82c 	bl	8000724 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006cc:	2310      	movs	r3, #16
 80006ce:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d8:	2360      	movs	r3, #96	; 0x60
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fb9b 	bl	8000e20 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x5c>
		Error_Handler();
 80006f0:	f000 f818 	bl	8000724 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000708:	463b      	mov	r3, r7
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f000 ffa1 	bl	8001654 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x84>
		Error_Handler();
 8000718:	f000 f804 	bl	8000724 <Error_Handler>
	}
}
 800071c:	bf00      	nop
 800071e:	3758      	adds	r7, #88	; 0x58
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6613      	str	r3, [r2, #96]	; 0x60
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6593      	str	r3, [r2, #88]	; 0x58
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x44>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f9c2 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <LPUART_init>:

#include "main.h"
#include "uart.h"


void LPUART_init() {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <LPUART_init+0xcc>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	4a30      	ldr	r2, [pc, #192]	; (80008bc <LPUART_init+0xcc>)
 80007fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fe:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <LPUART_init+0xd0>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <LPUART_init+0xd0>)
 8000806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <LPUART_init+0xd0>)
 800080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <LPUART_init+0xd0>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <LPUART_init+0xd4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a29      	ldr	r2, [pc, #164]	; (80008c4 <LPUART_init+0xd4>)
 800081e:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8000822:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <LPUART_init+0xd4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <LPUART_init+0xd4>)
 800082a:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 800082e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <LPUART_init+0xd4>)
 8000832:	6a1b      	ldr	r3, [r3, #32]
 8000834:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <LPUART_init+0xd4>)
 8000836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800083a:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <LPUART_init+0xd4>)
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <LPUART_init+0xd4>)
 8000842:	f023 030f 	bic.w	r3, r3, #15
 8000846:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <LPUART_init+0xd4>)
 800084a:	6a1b      	ldr	r3, [r3, #32]
 800084c:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <LPUART_init+0xd4>)
 800084e:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000856:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <LPUART_init+0xd4>)
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085c:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <LPUART_init+0xd4>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <LPUART_init+0xd8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <LPUART_init+0xd8>)
 800086a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800086e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <LPUART_init+0xd8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <LPUART_init+0xd8>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <LPUART_init+0xd8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <LPUART_init+0xd8>)
 8000882:	f043 030c 	orr.w	r3, r3, #12
 8000886:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <LPUART_init+0xd8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LPUART_init+0xd8>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <LPUART_init+0xd8>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <LPUART_init+0xd8>)
 800089a:	f023 0320 	bic.w	r3, r3, #32
 800089e:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <LPUART_init+0xd8>)
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LPUART_init+0xdc>)
 80008a4:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <LPUART_init+0xe0>)
 80008a8:	2240      	movs	r2, #64	; 0x40
 80008aa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80008ac:	b662      	cpsie	i
}
 80008ae:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40007000 	.word	0x40007000
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48001800 	.word	0x48001800
 80008c8:	40008000 	.word	0x40008000
 80008cc:	0001a0aa 	.word	0x0001a0aa
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <USART_init>:

void USART_init() {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable GPIOA clock
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <USART_init+0xb8>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	4a2b      	ldr	r2, [pc, #172]	; (800098c <USART_init+0xb8>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // enable USART2 clock
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <USART_init+0xb8>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	4a28      	ldr	r2, [pc, #160]	; (800098c <USART_init+0xb8>)
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ee:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOA->MODER &= ~(GPIO_MODER_MODE0 |GPIO_MODER_MODE1 |GPIO_MODER_MODE2 | GPIO_MODER_MODE3); //clear bits
 80008f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80008fe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE0_1 |GPIO_MODER_MODE1_1 |GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800090a:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 800090e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos) |(0x000F << GPIO_AFRL_AFSEL1_Pos) |(0x000F << GPIO_AFRL_AFSEL2_Pos) | (0x000F << GPIO_AFRL_AFSEL3_Pos));
 8000910:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000914:	6a1b      	ldr	r3, [r3, #32]
 8000916:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800091a:	0c1b      	lsrs	r3, r3, #16
 800091c:	041b      	lsls	r3, r3, #16
 800091e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((0x0007 << GPIO_AFRL_AFSEL0_Pos) |(0x0007 << GPIO_AFRL_AFSEL1_Pos) |(0x0007 << GPIO_AFRL_AFSEL2_Pos) | (0x0007 << GPIO_AFRL_AFSEL3_Pos));
 8000920:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800092a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800092e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000932:	6213      	str	r3, [r2, #32]

    USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <USART_init+0xbc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a15      	ldr	r2, [pc, #84]	; (8000990 <USART_init+0xbc>)
 800093a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800093e:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_UE;                   // enable USART2
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <USART_init+0xbc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <USART_init+0xbc>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <USART_init+0xbc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <USART_init+0xbc>)
 8000952:	f043 030c 	orr.w	r3, r3, #12
 8000956:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_RXNEIE;        // enable USART2 recv interrupt
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <USART_init+0xbc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <USART_init+0xbc>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6013      	str	r3, [r2, #0]
    USART2->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <USART_init+0xbc>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <USART_init+0xbc>)
 800096a:	f023 0320 	bic.w	r3, r3, #32
 800096e:	61d3      	str	r3, [r2, #28]
    USART2->BRR = 69;                   // Set the correct baud rate
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <USART_init+0xbc>)
 8000972:	2245      	movs	r2, #69	; 0x45
 8000974:	60da      	str	r2, [r3, #12]
    NVIC->ISER[0] = (1 << (USART2_IRQn & 0x1F));   // enable USART2 ISR
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <USART_init+0xc0>)
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800097c:	b662      	cpsie	i
}
 800097e:	bf00      	nop
    __enable_irq();                          // enable global interrupts
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40004400 	.word	0x40004400
 8000994:	e000e100 	.word	0xe000e100

08000998 <USART_print>:

void USART_print(char *c){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for (i = 0; c[i] != '\0'; i++){
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e010      	b.n	80009c8 <USART_print+0x30>
        while (!(USART2->ISR & USART_ISR_TXE)){}
 80009a6:	bf00      	nop
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <USART_print+0x4c>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f9      	beq.n	80009a8 <USART_print+0x10>
        USART2->TDR = c[i];
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <USART_print+0x4c>)
 80009be:	b292      	uxth	r2, r2
 80009c0:	851a      	strh	r2, [r3, #40]	; 0x28
    for (i = 0; c[i] != '\0'; i++){
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3301      	adds	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e8      	bne.n	80009a6 <USART_print+0xe>
    }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400

080009e8 <LPUART_Print_Char>:


void LPUART_Print_Char(char ch) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	while (!(LPUART1->ISR & USART_ISR_TXE))
 80009f2:	bf00      	nop
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <LPUART_Print_Char+0x2c>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f9      	beq.n	80009f4 <LPUART_Print_Char+0xc>
		;   // wait for empty transmit buffer
	LPUART1->TDR = ch;                        // send the character
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <LPUART_Print_Char+0x2c>)
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	b292      	uxth	r2, r2
 8000a06:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	40008000 	.word	0x40008000

08000a18 <LPUART_Print>:

void LPUART_Print(const char *message) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 8000a24:	e009      	b.n	8000a3a <LPUART_Print+0x22>
		LPUART_Print_Char(message[iStrIdx]);
 8000a26:	89fb      	ldrh	r3, [r7, #14]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffda 	bl	80009e8 <LPUART_Print_Char>
		iStrIdx++;
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	3301      	adds	r3, #1
 8000a38:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 8000a3a:	89fb      	ldrh	r3, [r7, #14]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ef      	bne.n	8000a26 <LPUART_Print+0xe>
	}
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff feba 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f000 ffd5 	bl	8001a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a82:	f7ff fd11 	bl	80004a8 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a94:	08001b14 	.word	0x08001b14
  ldr r2, =_sbss
 8000a98:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a9c:	2000013c 	.word	0x2000013c

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>

08000aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f91f 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f80e 	bl	8000ad4 <HAL_InitTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	e001      	b.n	8000ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac4:	f7ff fe34 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_InitTick+0x6c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d023      	beq.n	8000b30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_InitTick+0x70>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x6c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f91d 	bl	8000d3e <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10f      	bne.n	8000b2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d809      	bhi.n	8000b24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f8f5 	bl	8000d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_InitTick+0x74>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e007      	b.n	8000b34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e004      	b.n	8000b34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e001      	b.n	8000b34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000010 	.word	0x20000010
 8000b44:	20000008 	.word	0x20000008
 8000b48:	2000000c 	.word	0x2000000c

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	20000138 	.word	0x20000138

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000138 	.word	0x20000138

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff47 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5c 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb0 	bl	8000cac <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40007000 	.word	0x40007000

08000d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d82:	d130      	bne.n	8000de6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d90:	d038      	beq.n	8000e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2232      	movs	r2, #50	; 0x32
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	0c9b      	lsrs	r3, r3, #18
 8000db4:	3301      	adds	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000db8:	e002      	b.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dcc:	d102      	bne.n	8000dd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f2      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de0:	d110      	bne.n	8000e04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e00f      	b.n	8000e06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df2:	d007      	beq.n	8000e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40007000 	.word	0x40007000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	431bde83 	.word	0x431bde83

08000e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f000 bc08 	b.w	8001644 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e34:	4b96      	ldr	r3, [pc, #600]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e3e:	4b94      	ldr	r3, [pc, #592]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80e4 	beq.w	800101e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <HAL_RCC_OscConfig+0x4c>
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	2b0c      	cmp	r3, #12
 8000e60:	f040 808b 	bne.w	8000f7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	f040 8087 	bne.w	8000f7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e6c:	4b88      	ldr	r3, [pc, #544]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <HAL_RCC_OscConfig+0x64>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e3df      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1a      	ldr	r2, [r3, #32]
 8000e88:	4b81      	ldr	r3, [pc, #516]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <HAL_RCC_OscConfig+0x7e>
 8000e94:	4b7e      	ldr	r3, [pc, #504]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e9c:	e005      	b.n	8000eaa <HAL_RCC_OscConfig+0x8a>
 8000e9e:	4b7c      	ldr	r3, [pc, #496]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d223      	bcs.n	8000ef6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fd5a 	bl	800196c <RCC_SetFlashLatencyFromMSIRange>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e3c0      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec2:	4b73      	ldr	r3, [pc, #460]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a72      	ldr	r2, [pc, #456]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	4b70      	ldr	r3, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	496d      	ldr	r1, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee0:	4b6b      	ldr	r3, [pc, #428]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	4968      	ldr	r1, [pc, #416]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
 8000ef4:	e025      	b.n	8000f42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef6:	4b66      	ldr	r3, [pc, #408]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a65      	ldr	r2, [pc, #404]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b63      	ldr	r3, [pc, #396]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4960      	ldr	r1, [pc, #384]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f14:	4b5e      	ldr	r3, [pc, #376]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	495b      	ldr	r1, [pc, #364]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fd1a 	bl	800196c <RCC_SetFlashLatencyFromMSIRange>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e380      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f42:	f000 fc87 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8000f46:	4602      	mov	r2, r0
 8000f48:	4b51      	ldr	r3, [pc, #324]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	091b      	lsrs	r3, r3, #4
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	4950      	ldr	r1, [pc, #320]	; (8001094 <HAL_RCC_OscConfig+0x274>)
 8000f54:	5ccb      	ldrb	r3, [r1, r3]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5e:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_RCC_OscConfig+0x278>)
 8000f60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f62:	4b4e      	ldr	r3, [pc, #312]	; (800109c <HAL_RCC_OscConfig+0x27c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fdb4 	bl	8000ad4 <HAL_InitTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d052      	beq.n	800101c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	e364      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d032      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f82:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fdf1 	bl	8000b74 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f96:	f7ff fded 	bl	8000b74 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e34d      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a35      	ldr	r2, [pc, #212]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4930      	ldr	r1, [pc, #192]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	492b      	ldr	r1, [pc, #172]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	604b      	str	r3, [r1, #4]
 8000fe6:	e01a      	b.n	800101e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fdbe 	bl	8000b74 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fdba 	bl	8000b74 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e31a      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x1dc>
 800101a:	e000      	b.n	800101e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800101c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d073      	beq.n	8001112 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b08      	cmp	r3, #8
 800102e:	d005      	beq.n	800103c <HAL_RCC_OscConfig+0x21c>
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b0c      	cmp	r3, #12
 8001034:	d10e      	bne.n	8001054 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d10b      	bne.n	8001054 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d063      	beq.n	8001110 <HAL_RCC_OscConfig+0x2f0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d15f      	bne.n	8001110 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e2f7      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x24c>
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e025      	b.n	80010b8 <HAL_RCC_OscConfig+0x298>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001074:	d114      	bne.n	80010a0 <HAL_RCC_OscConfig+0x280>
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a02      	ldr	r2, [pc, #8]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e013      	b.n	80010b8 <HAL_RCC_OscConfig+0x298>
 8001090:	40021000 	.word	0x40021000
 8001094:	08001acc 	.word	0x08001acc
 8001098:	20000008 	.word	0x20000008
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	4ba0      	ldr	r3, [pc, #640]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a9f      	ldr	r2, [pc, #636]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b9d      	ldr	r3, [pc, #628]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a9c      	ldr	r2, [pc, #624]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fd58 	bl	8000b74 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fd54 	bl	8000b74 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e2b4      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010da:	4b92      	ldr	r3, [pc, #584]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x2a8>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e8:	f7ff fd44 	bl	8000b74 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fd40 	bl	8000b74 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e2a0      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001102:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x2d0>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d060      	beq.n	80011e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d005      	beq.n	8001130 <HAL_RCC_OscConfig+0x310>
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b0c      	cmp	r3, #12
 8001128:	d119      	bne.n	800115e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d116      	bne.n	800115e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001130:	4b7c      	ldr	r3, [pc, #496]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_OscConfig+0x328>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e27d      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b76      	ldr	r3, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	061b      	lsls	r3, r3, #24
 8001156:	4973      	ldr	r1, [pc, #460]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800115c:	e040      	b.n	80011e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d023      	beq.n	80011ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001166:	4b6f      	ldr	r3, [pc, #444]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6e      	ldr	r2, [pc, #440]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001172:	f7ff fcff 	bl	8000b74 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff fcfb 	bl	8000b74 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e25b      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800118c:	4b65      	ldr	r3, [pc, #404]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	4b62      	ldr	r3, [pc, #392]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	061b      	lsls	r3, r3, #24
 80011a6:	495f      	ldr	r1, [pc, #380]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
 80011ac:	e018      	b.n	80011e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ae:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a5c      	ldr	r2, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80011b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fcdb 	bl	8000b74 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fcd7 	bl	8000b74 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e237      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011d4:	4b53      	ldr	r3, [pc, #332]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f0      	bne.n	80011c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d03c      	beq.n	8001266 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01c      	beq.n	800122e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80011f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fa:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001204:	f7ff fcb6 	bl	8000b74 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120c:	f7ff fcb2 	bl	8000b74 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e212      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ef      	beq.n	800120c <HAL_RCC_OscConfig+0x3ec>
 800122c:	e01b      	b.n	8001266 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001234:	4a3b      	ldr	r2, [pc, #236]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123e:	f7ff fc99 	bl	8000b74 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff fc95 	bl	8000b74 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e1f5      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ef      	bne.n	8001246 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80a6 	beq.w	80013c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10d      	bne.n	80012a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128e:	6593      	str	r3, [r2, #88]	; 0x58
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129c:	2301      	movs	r3, #1
 800129e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_RCC_OscConfig+0x508>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d118      	bne.n	80012de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_RCC_OscConfig+0x508>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_RCC_OscConfig+0x508>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc5c 	bl	8000b74 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c0:	f7ff fc58 	bl	8000b74 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1b8      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_RCC_OscConfig+0x508>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d108      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4d8>
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80012e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f6:	e029      	b.n	800134c <HAL_RCC_OscConfig+0x52c>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d115      	bne.n	800132c <HAL_RCC_OscConfig+0x50c>
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_RCC_OscConfig+0x504>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001320:	e014      	b.n	800134c <HAL_RCC_OscConfig+0x52c>
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	40007000 	.word	0x40007000
 800132c:	4b9d      	ldr	r3, [pc, #628]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a9c      	ldr	r2, [pc, #624]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133c:	4b99      	ldr	r3, [pc, #612]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001342:	4a98      	ldr	r2, [pc, #608]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001344:	f023 0304 	bic.w	r3, r3, #4
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d016      	beq.n	8001382 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001354:	f7ff fc0e 	bl	8000b74 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800135a:	e00a      	b.n	8001372 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135c:	f7ff fc0a 	bl	8000b74 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e168      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001372:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0ed      	beq.n	800135c <HAL_RCC_OscConfig+0x53c>
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001382:	f7ff fbf7 	bl	8000b74 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fbf3 	bl	8000b74 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e151      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a0:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ed      	bne.n	800138a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4b7b      	ldr	r3, [pc, #492]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	4a7a      	ldr	r2, [pc, #488]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80013ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d03c      	beq.n	8001446 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01c      	beq.n	800140e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013d4:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80013d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013da:	4a72      	ldr	r2, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e4:	f7ff fbc6 	bl	8000b74 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013ec:	f7ff fbc2 	bl	8000b74 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e122      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013fe:	4b69      	ldr	r3, [pc, #420]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0ef      	beq.n	80013ec <HAL_RCC_OscConfig+0x5cc>
 800140c:	e01b      	b.n	8001446 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800140e:	4b65      	ldr	r3, [pc, #404]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001414:	4a63      	ldr	r2, [pc, #396]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141e:	f7ff fba9 	bl	8000b74 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001426:	f7ff fba5 	bl	8000b74 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e105      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001438:	4b5a      	ldr	r3, [pc, #360]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 800143a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ef      	bne.n	8001426 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80f9 	beq.w	8001642 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b02      	cmp	r3, #2
 8001456:	f040 80cf 	bne.w	80015f8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800145a:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0203 	and.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	429a      	cmp	r2, r3
 800146c:	d12c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	3b01      	subs	r3, #1
 800147a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d123      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d11b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d113      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	3b01      	subs	r3, #1
 80014ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d109      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	3b01      	subs	r3, #1
 80014c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d071      	beq.n	80015ac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d068      	beq.n	80015a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d105      	bne.n	80014e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0ac      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 80014f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014f6:	f7ff fb3d 	bl	8000b74 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb39 	bl	8000b74 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e099      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x788>)
 8001522:	4013      	ands	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800152c:	3a01      	subs	r2, #1
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	4311      	orrs	r1, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001536:	0212      	lsls	r2, r2, #8
 8001538:	4311      	orrs	r1, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800153e:	0852      	lsrs	r2, r2, #1
 8001540:	3a01      	subs	r2, #1
 8001542:	0552      	lsls	r2, r2, #21
 8001544:	4311      	orrs	r1, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800154a:	0852      	lsrs	r2, r2, #1
 800154c:	3a01      	subs	r2, #1
 800154e:	0652      	lsls	r2, r2, #25
 8001550:	4311      	orrs	r1, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001556:	06d2      	lsls	r2, r2, #27
 8001558:	430a      	orrs	r2, r1
 800155a:	4912      	ldr	r1, [pc, #72]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 800155c:	4313      	orrs	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001578:	f7ff fafc 	bl	8000b74 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff faf8 	bl	8000b74 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e058      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <HAL_RCC_OscConfig+0x784>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800159e:	e050      	b.n	8001642 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e04f      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
 80015a4:	40021000 	.word	0x40021000
 80015a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d144      	bne.n	8001642 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a23      	ldr	r2, [pc, #140]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 80015be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4a20      	ldr	r2, [pc, #128]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 80015ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015d0:	f7ff fad0 	bl	8000b74 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff facc 	bl	8000b74 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e02c      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x7b8>
 80015f6:	e024      	b.n	8001642 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	d01f      	beq.n	800163e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 8001604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fab3 	bl	8000b74 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff faaf 	bl	8000b74 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e00f      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	4905      	ldr	r1, [pc, #20]	; (800164c <HAL_RCC_OscConfig+0x82c>)
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_RCC_OscConfig+0x830>)
 8001638:	4013      	ands	r3, r2
 800163a:	60cb      	str	r3, [r1, #12]
 800163c:	e001      	b.n	8001642 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	feeefffc 	.word	0xfeeefffc

08001654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0e7      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001668:	4b75      	ldr	r3, [pc, #468]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d910      	bls.n	8001698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0207 	bic.w	r2, r3, #7
 800167e:	4970      	ldr	r1, [pc, #448]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0cf      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d010      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	4b66      	ldr	r3, [pc, #408]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d908      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b4:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4960      	ldr	r1, [pc, #384]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d04c      	beq.n	800176c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d121      	bne.n	800172a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0a6      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f2:	4b54      	ldr	r3, [pc, #336]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e09a      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800170a:	4b4e      	ldr	r3, [pc, #312]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e08e      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171a:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e086      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800172a:	4b46      	ldr	r3, [pc, #280]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f023 0203 	bic.w	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4943      	ldr	r1, [pc, #268]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800173c:	f7ff fa1a 	bl	8000b74 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff fa16 	bl	8000b74 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e06e      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 020c 	and.w	r2, r3, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d1eb      	bne.n	8001744 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001784:	429a      	cmp	r2, r3
 8001786:	d208      	bcs.n	800179a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	492b      	ldr	r1, [pc, #172]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d210      	bcs.n	80017ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 0207 	bic.w	r2, r3, #7
 80017b0:	4923      	ldr	r1, [pc, #140]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_RCC_ClockConfig+0x1ec>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e036      	b.n	8001838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4918      	ldr	r1, [pc, #96]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4910      	ldr	r1, [pc, #64]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001808:	f000 f824 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 800180c:	4602      	mov	r2, r0
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	490b      	ldr	r1, [pc, #44]	; (8001848 <HAL_RCC_ClockConfig+0x1f4>)
 800181a:	5ccb      	ldrb	r3, [r1, r3]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
 8001824:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1fc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f951 	bl	8000ad4 <HAL_InitTick>
 8001832:	4603      	mov	r3, r0
 8001834:	72fb      	strb	r3, [r7, #11]

  return status;
 8001836:	7afb      	ldrb	r3, [r7, #11]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40022000 	.word	0x40022000
 8001844:	40021000 	.word	0x40021000
 8001848:	08001acc 	.word	0x08001acc
 800184c:	20000008 	.word	0x20000008
 8001850:	2000000c 	.word	0x2000000c

08001854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001862:	4b3e      	ldr	r3, [pc, #248]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186c:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x34>
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d121      	bne.n	80018c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d11e      	bne.n	80018c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001888:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e005      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10d      	bne.n	80018dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d102      	bne.n	80018d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_GetSysClockFreq+0x110>)
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	e004      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_RCC_GetSysClockFreq+0x114>)
 80018da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d134      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0xa6>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d003      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0xac>
 80018f8:	e005      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_RCC_GetSysClockFreq+0x110>)
 80018fc:	617b      	str	r3, [r7, #20]
      break;
 80018fe:	e005      	b.n	800190c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_GetSysClockFreq+0x114>)
 8001902:	617b      	str	r3, [r7, #20]
      break;
 8001904:	e002      	b.n	800190c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	617b      	str	r3, [r7, #20]
      break;
 800190a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	3301      	adds	r3, #1
 8001918:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	fb03 f202 	mul.w	r2, r3, r2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_RCC_GetSysClockFreq+0x108>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	0e5b      	lsrs	r3, r3, #25
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	3301      	adds	r3, #1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800194c:	69bb      	ldr	r3, [r7, #24]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	08001adc 	.word	0x08001adc
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200

0800196c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001984:	f7ff f9e8 	bl	8000d58 <HAL_PWREx_GetVoltageRange>
 8001988:	6178      	str	r0, [r7, #20]
 800198a:	e014      	b.n	80019b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	; 0x58
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019a4:	f7ff f9d8 	bl	8000d58 <HAL_PWREx_GetVoltageRange>
 80019a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019bc:	d10b      	bne.n	80019d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b80      	cmp	r3, #128	; 0x80
 80019c2:	d919      	bls.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2ba0      	cmp	r3, #160	; 0xa0
 80019c8:	d902      	bls.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019ca:	2302      	movs	r3, #2
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e013      	b.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019d0:	2301      	movs	r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e010      	b.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b80      	cmp	r3, #128	; 0x80
 80019da:	d902      	bls.n	80019e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019dc:	2303      	movs	r3, #3
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	e00a      	b.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b80      	cmp	r3, #128	; 0x80
 80019e6:	d102      	bne.n	80019ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019e8:	2302      	movs	r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	e004      	b.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b70      	cmp	r3, #112	; 0x70
 80019f2:	d101      	bne.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 0207 	bic.w	r2, r3, #7
 8001a00:	4909      	ldr	r1, [pc, #36]	; (8001a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40022000 	.word	0x40022000

08001a2c <__libc_init_array>:
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	4d0d      	ldr	r5, [pc, #52]	; (8001a64 <__libc_init_array+0x38>)
 8001a30:	4c0d      	ldr	r4, [pc, #52]	; (8001a68 <__libc_init_array+0x3c>)
 8001a32:	1b64      	subs	r4, r4, r5
 8001a34:	10a4      	asrs	r4, r4, #2
 8001a36:	2600      	movs	r6, #0
 8001a38:	42a6      	cmp	r6, r4
 8001a3a:	d109      	bne.n	8001a50 <__libc_init_array+0x24>
 8001a3c:	4d0b      	ldr	r5, [pc, #44]	; (8001a6c <__libc_init_array+0x40>)
 8001a3e:	4c0c      	ldr	r4, [pc, #48]	; (8001a70 <__libc_init_array+0x44>)
 8001a40:	f000 f820 	bl	8001a84 <_init>
 8001a44:	1b64      	subs	r4, r4, r5
 8001a46:	10a4      	asrs	r4, r4, #2
 8001a48:	2600      	movs	r6, #0
 8001a4a:	42a6      	cmp	r6, r4
 8001a4c:	d105      	bne.n	8001a5a <__libc_init_array+0x2e>
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}
 8001a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a54:	4798      	blx	r3
 8001a56:	3601      	adds	r6, #1
 8001a58:	e7ee      	b.n	8001a38 <__libc_init_array+0xc>
 8001a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a5e:	4798      	blx	r3
 8001a60:	3601      	adds	r6, #1
 8001a62:	e7f2      	b.n	8001a4a <__libc_init_array+0x1e>
 8001a64:	08001b0c 	.word	0x08001b0c
 8001a68:	08001b0c 	.word	0x08001b0c
 8001a6c:	08001b0c 	.word	0x08001b0c
 8001a70:	08001b10 	.word	0x08001b10

08001a74 <memset>:
 8001a74:	4402      	add	r2, r0
 8001a76:	4603      	mov	r3, r0
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <memset+0xa>
 8001a7c:	4770      	bx	lr
 8001a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a82:	e7f9      	b.n	8001a78 <memset+0x4>

08001a84 <_init>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	bf00      	nop
 8001a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8a:	bc08      	pop	{r3}
 8001a8c:	469e      	mov	lr, r3
 8001a8e:	4770      	bx	lr

08001a90 <_fini>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	bf00      	nop
 8001a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a96:	bc08      	pop	{r3}
 8001a98:	469e      	mov	lr, r3
 8001a9a:	4770      	bx	lr
