
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002818  08002818  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002818  08002818  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002818  08002818  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000018  08002838  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08002838  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006565  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016aa  00000000  00000000  000265ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  00027c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00028348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002773f  00000000  00000000  00028960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008db0  00000000  00000000  0005009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee937  00000000  00000000  00058e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001900  00000000  00000000  001477d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002574 	.word	0x08002574

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08002574 	.word	0x08002574

080001ec <FP_check>:
uint16_t FP_ID = 1234; //FOUND FP ID# LOCATION IN FLASH MEMORY
char USER_INPUT_NAME[MAX_FP][16]; //MAX_FP = max # of users; username 16 char max

//checks if FP is connected and communicating properly
//does not properly find it will need to look at bytes when it is not being sent proper
void FP_check(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	lcd_set_cursor_position(0, 0);
 80001f0:	2100      	movs	r1, #0
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fe18 	bl	8000e28 <lcd_set_cursor_position>
	str_write("Booting Fngrprnt");
 80001f8:	4829      	ldr	r0, [pc, #164]	; (80002a0 <FP_check+0xb4>)
 80001fa:	f000 fe2f 	bl	8000e5c <str_write>
	delay_us(100000);
 80001fe:	4829      	ldr	r0, [pc, #164]	; (80002a4 <FP_check+0xb8>)
 8000200:	f000 fa50 	bl	80006a4 <delay_us>
	lcd_set_cursor_position(1, 0);
 8000204:	2100      	movs	r1, #0
 8000206:	2001      	movs	r0, #1
 8000208:	f000 fe0e 	bl	8000e28 <lcd_set_cursor_position>
	str_write("Scanner         ");
 800020c:	4826      	ldr	r0, [pc, #152]	; (80002a8 <FP_check+0xbc>)
 800020e:	f000 fe25 	bl	8000e5c <str_write>
	delay_us(1000000);		//1 second delay to read the message
 8000212:	4826      	ldr	r0, [pc, #152]	; (80002ac <FP_check+0xc0>)
 8000214:	f000 fa46 	bl	80006a4 <delay_us>
//		for (int j = 0; j < 16; j++) {
//			USER_INPUT_NAME[i][j] = ' ';
//		}
//	}

	handshake();
 8000218:	f000 fa72 	bl	8000700 <handshake>
	while (ConfirmationCode != 0x00) {
 800021c:	e00f      	b.n	800023e <FP_check+0x52>
		handshake();
 800021e:	f000 fa6f 	bl	8000700 <handshake>
		lcd_set_cursor_position(0, 0);
 8000222:	2100      	movs	r1, #0
 8000224:	2000      	movs	r0, #0
 8000226:	f000 fdff 	bl	8000e28 <lcd_set_cursor_position>
		str_write("FP Scanner not  ");
 800022a:	4821      	ldr	r0, [pc, #132]	; (80002b0 <FP_check+0xc4>)
 800022c:	f000 fe16 	bl	8000e5c <str_write>
		lcd_set_cursor_position(1, 0);
 8000230:	2100      	movs	r1, #0
 8000232:	2001      	movs	r0, #1
 8000234:	f000 fdf8 	bl	8000e28 <lcd_set_cursor_position>
		str_write("found reconnect ");
 8000238:	481e      	ldr	r0, [pc, #120]	; (80002b4 <FP_check+0xc8>)
 800023a:	f000 fe0f 	bl	8000e5c <str_write>
	while (ConfirmationCode != 0x00) {
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <FP_check+0xcc>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d1eb      	bne.n	800021e <FP_check+0x32>
	}
	//sets other parameters: 2nd argument changes settings
	SetSysPara(4, 6);	//baud rate: 6* 9600 = 57600
 8000246:	2106      	movs	r1, #6
 8000248:	2004      	movs	r0, #4
 800024a:	f000 fa8b 	bl	8000764 <SetSysPara>
	SetSysPara(5, 1);   //security level: 1 - 5 lowest to highest
 800024e:	2101      	movs	r1, #1
 8000250:	2005      	movs	r0, #5
 8000252:	f000 fa87 	bl	8000764 <SetSysPara>
	SetSysPara(6, 3);	//package length: 0 - 3 lowest to highest
 8000256:	2103      	movs	r1, #3
 8000258:	2006      	movs	r0, #6
 800025a:	f000 fa83 	bl	8000764 <SetSysPara>
	lcd_set_cursor_position(0, 0);
 800025e:	2100      	movs	r1, #0
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fde1 	bl	8000e28 <lcd_set_cursor_position>
	str_write("FP Scanner      ");
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <FP_check+0xd0>)
 8000268:	f000 fdf8 	bl	8000e5c <str_write>
	lcd_set_cursor_position(1, 0);
 800026c:	2100      	movs	r1, #0
 800026e:	2001      	movs	r0, #1
 8000270:	f000 fdda 	bl	8000e28 <lcd_set_cursor_position>
	str_write("Found           ");
 8000274:	4812      	ldr	r0, [pc, #72]	; (80002c0 <FP_check+0xd4>)
 8000276:	f000 fdf1 	bl	8000e5c <str_write>
	delay_us(1000000); 		//1 second delay to read the message
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <FP_check+0xc0>)
 800027c:	f000 fa12 	bl	80006a4 <delay_us>
	lcd_set_cursor_position(0, 0);
 8000280:	2100      	movs	r1, #0
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fdd0 	bl	8000e28 <lcd_set_cursor_position>
	str_write("                ");
 8000288:	480e      	ldr	r0, [pc, #56]	; (80002c4 <FP_check+0xd8>)
 800028a:	f000 fde7 	bl	8000e5c <str_write>
	lcd_set_cursor_position(1, 0);
 800028e:	2100      	movs	r1, #0
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fdc9 	bl	8000e28 <lcd_set_cursor_position>
	str_write("                ");
 8000296:	480b      	ldr	r0, [pc, #44]	; (80002c4 <FP_check+0xd8>)
 8000298:	f000 fde0 	bl	8000e5c <str_write>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	0800258c 	.word	0x0800258c
 80002a4:	000186a0 	.word	0x000186a0
 80002a8:	080025a0 	.word	0x080025a0
 80002ac:	000f4240 	.word	0x000f4240
 80002b0:	080025b4 	.word	0x080025b4
 80002b4:	080025c8 	.word	0x080025c8
 80002b8:	2000037c 	.word	0x2000037c
 80002bc:	080025dc 	.word	0x080025dc
 80002c0:	080025f0 	.word	0x080025f0
 80002c4:	08002604 	.word	0x08002604

080002c8 <FP_enroll>:

void FP_enroll(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
	/* Order of Operations
	 * 1. Get user to type name associated with FP
	 * 2. Get User Input twice
	 */
	FP_enroll_start: genImg();	//to get ready to take an input
 80002ce:	f000 faa3 	bl	8000818 <genImg>
//	uint8_t mem_local = 0;	//initializes mem local
	//update mem_local to equal global ID variable

//	while (number_of_fp_per_section < MAX_FP_PER_SECTION) {	//takes 10 user inputs: 0-9

	for (int buff_local = 1; buff_local <= 2; buff_local++) {
 80002d2:	2301      	movs	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	e045      	b.n	8000364 <FP_enroll+0x9c>
		while (ConfirmationCode == 0x02) {	//No finger detected get finger
			if (buff_local == 1) {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d10e      	bne.n	80002fc <FP_enroll+0x34>
				lcd_set_cursor_position(0, 0);
 80002de:	2100      	movs	r1, #0
 80002e0:	2000      	movs	r0, #0
 80002e2:	f000 fda1 	bl	8000e28 <lcd_set_cursor_position>
				str_write("Place finger    ");
 80002e6:	4846      	ldr	r0, [pc, #280]	; (8000400 <FP_enroll+0x138>)
 80002e8:	f000 fdb8 	bl	8000e5c <str_write>
				lcd_set_cursor_position(1, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 fd9a 	bl	8000e28 <lcd_set_cursor_position>
				str_write("                ");
 80002f4:	4843      	ldr	r0, [pc, #268]	; (8000404 <FP_enroll+0x13c>)
 80002f6:	f000 fdb1 	bl	8000e5c <str_write>
 80002fa:	e010      	b.n	800031e <FP_enroll+0x56>
			} else if (buff_local == 2) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d10d      	bne.n	800031e <FP_enroll+0x56>
				lcd_set_cursor_position(0, 0);
 8000302:	2100      	movs	r1, #0
 8000304:	2000      	movs	r0, #0
 8000306:	f000 fd8f 	bl	8000e28 <lcd_set_cursor_position>
				str_write("Place finger ");
 800030a:	483f      	ldr	r0, [pc, #252]	; (8000408 <FP_enroll+0x140>)
 800030c:	f000 fda6 	bl	8000e5c <str_write>
				lcd_set_cursor_position(1, 0);
 8000310:	2100      	movs	r1, #0
 8000312:	2001      	movs	r0, #1
 8000314:	f000 fd88 	bl	8000e28 <lcd_set_cursor_position>
				str_write("again         ");
 8000318:	483c      	ldr	r0, [pc, #240]	; (800040c <FP_enroll+0x144>)
 800031a:	f000 fd9f 	bl	8000e5c <str_write>
			}
			genImg();	//checks fingerprint
 800031e:	f000 fa7b 	bl	8000818 <genImg>
		while (ConfirmationCode == 0x02) {	//No finger detected get finger
 8000322:	4b3b      	ldr	r3, [pc, #236]	; (8000410 <FP_enroll+0x148>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d0d6      	beq.n	80002d8 <FP_enroll+0x10>
		}
		Img2Tz(buff_local);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	4618      	mov	r0, r3
 8000330:	f000 faa4 	bl	800087c <Img2Tz>

		while (ConfirmationCode == 0x00) { //to wait til user removes finger
 8000334:	e00f      	b.n	8000356 <FP_enroll+0x8e>
			lcd_set_cursor_position(0, 0);
 8000336:	2100      	movs	r1, #0
 8000338:	2000      	movs	r0, #0
 800033a:	f000 fd75 	bl	8000e28 <lcd_set_cursor_position>
			str_write("Got Finger!     ");
 800033e:	4835      	ldr	r0, [pc, #212]	; (8000414 <FP_enroll+0x14c>)
 8000340:	f000 fd8c 	bl	8000e5c <str_write>
			lcd_set_cursor_position(1, 0);
 8000344:	2100      	movs	r1, #0
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fd6e 	bl	8000e28 <lcd_set_cursor_position>
			str_write("Remove Finger   ");
 800034c:	4832      	ldr	r0, [pc, #200]	; (8000418 <FP_enroll+0x150>)
 800034e:	f000 fd85 	bl	8000e5c <str_write>
			genImg(); //checks fingerprint
 8000352:	f000 fa61 	bl	8000818 <genImg>
		while (ConfirmationCode == 0x00) { //to wait til user removes finger
 8000356:	4b2e      	ldr	r3, [pc, #184]	; (8000410 <FP_enroll+0x148>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0eb      	beq.n	8000336 <FP_enroll+0x6e>
	for (int buff_local = 1; buff_local <= 2; buff_local++) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3301      	adds	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b02      	cmp	r3, #2
 8000368:	dddb      	ble.n	8000322 <FP_enroll+0x5a>
		}

	}
	regMode(); //generates FP template to store to memory checks if they match as well
 800036a:	f000 fad9 	bl	8000920 <regMode>

	if (ConfirmationCode == 0x00) { //Fingerprint matches!
 800036e:	4b28      	ldr	r3, [pc, #160]	; (8000410 <FP_enroll+0x148>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d12c      	bne.n	80003d0 <FP_enroll+0x108>
		lcd_set_cursor_position(0, 0);
 8000376:	2100      	movs	r1, #0
 8000378:	2000      	movs	r0, #0
 800037a:	f000 fd55 	bl	8000e28 <lcd_set_cursor_position>
		str_write("FP Match Welcome");
 800037e:	4827      	ldr	r0, [pc, #156]	; (800041c <FP_enroll+0x154>)
 8000380:	f000 fd6c 	bl	8000e5c <str_write>
//		//want to add MEM_GLOBAL 2 digit functionality?
//		write(MEM_GLOBAL + '0');	//ONLY FOR DEBUGGING

		store(1, MEM_GLOBAL); //stores ID to memory, updates ID for each user enrolled
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <FP_enroll+0x158>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b29b      	uxth	r3, r3
 800038a:	4619      	mov	r1, r3
 800038c:	2001      	movs	r0, #1
 800038e:	f000 faf9 	bl	8000984 <store>
		lcd_set_cursor_position(1, 0);
 8000392:	2100      	movs	r1, #0
 8000394:	2001      	movs	r0, #1
 8000396:	f000 fd47 	bl	8000e28 <lcd_set_cursor_position>

//		prints username onto LCD	//
		for (int i = 0; i < 16; i++) {
 800039a:	2300      	movs	r3, #0
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	e00d      	b.n	80003bc <FP_enroll+0xf4>
			write(USER_INPUT_NAME[MEM_GLOBAL][i]); //NEED TO VERIFY IF IT WORKS
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <FP_enroll+0x158>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4a1f      	ldr	r2, [pc, #124]	; (8000424 <FP_enroll+0x15c>)
 80003a6:	011b      	lsls	r3, r3, #4
 80003a8:	441a      	add	r2, r3
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	4413      	add	r3, r2
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fcc9 	bl	8000d48 <write>
		for (int i = 0; i < 16; i++) {
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	2b0f      	cmp	r3, #15
 80003c0:	ddee      	ble.n	80003a0 <FP_enroll+0xd8>
		}

		MEM_GLOBAL++;	//updates global array
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <FP_enroll+0x158>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <FP_enroll+0x158>)
 80003cc:	701a      	strb	r2, [r3, #0]
//	str_write("Reached Max Reg ");
//	lcd_set_cursor_position(1, 0);
//	str_write(" For Section = ");
//	write(section_num + '0');

}
 80003ce:	e014      	b.n	80003fa <FP_enroll+0x132>
		lcd_set_cursor_position(0, 0);
 80003d0:	2100      	movs	r1, #0
 80003d2:	2000      	movs	r0, #0
 80003d4:	f000 fd28 	bl	8000e28 <lcd_set_cursor_position>
		str_write("FP mismatch :(  ");
 80003d8:	4813      	ldr	r0, [pc, #76]	; (8000428 <FP_enroll+0x160>)
 80003da:	f000 fd3f 	bl	8000e5c <str_write>
		lcd_set_cursor_position(1, 0);
 80003de:	2100      	movs	r1, #0
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 fd21 	bl	8000e28 <lcd_set_cursor_position>
		str_write("Redo Input      ");
 80003e6:	4811      	ldr	r0, [pc, #68]	; (800042c <FP_enroll+0x164>)
 80003e8:	f000 fd38 	bl	8000e5c <str_write>
			genImg();	//checks fingerprint
 80003ec:	f000 fa14 	bl	8000818 <genImg>
			if (ConfirmationCode == 0x00)
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <FP_enroll+0x148>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1f9      	bne.n	80003ec <FP_enroll+0x124>
				goto FP_enroll_start;
 80003f8:	e769      	b.n	80002ce <FP_enroll+0x6>
}
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	08002618 	.word	0x08002618
 8000404:	08002604 	.word	0x08002604
 8000408:	0800262c 	.word	0x0800262c
 800040c:	0800263c 	.word	0x0800263c
 8000410:	2000037c 	.word	0x2000037c
 8000414:	0800264c 	.word	0x0800264c
 8000418:	08002660 	.word	0x08002660
 800041c:	08002674 	.word	0x08002674
 8000420:	20000034 	.word	0x20000034
 8000424:	20000038 	.word	0x20000038
 8000428:	08002688 	.word	0x08002688
 800042c:	0800269c 	.word	0x0800269c

08000430 <itoa>:
void itoa(uint16_t num, char* str)
{
 8000430:	b480      	push	{r7}
 8000432:	b087      	sub	sp, #28
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
    while(num != 0)
 8000440:	e01a      	b.n	8000478 <itoa+0x48>
    {
        str[i++] = '0' + (num % 10);
 8000442:	88fa      	ldrh	r2, [r7, #6]
 8000444:	4b25      	ldr	r3, [pc, #148]	; (80004dc <itoa+0xac>)
 8000446:	fba3 1302 	umull	r1, r3, r3, r2
 800044a:	08d9      	lsrs	r1, r3, #3
 800044c:	460b      	mov	r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	b29b      	uxth	r3, r3
 8000458:	b2da      	uxtb	r2, r3
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	1c59      	adds	r1, r3, #1
 800045e:	6179      	str	r1, [r7, #20]
 8000460:	4619      	mov	r1, r3
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	440b      	add	r3, r1
 8000466:	3230      	adds	r2, #48	; 0x30
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	701a      	strb	r2, [r3, #0]
        num /= 10;
 800046c:	88fb      	ldrh	r3, [r7, #6]
 800046e:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <itoa+0xac>)
 8000470:	fba2 2303 	umull	r2, r3, r2, r3
 8000474:	08db      	lsrs	r3, r3, #3
 8000476:	80fb      	strh	r3, [r7, #6]
    while(num != 0)
 8000478:	88fb      	ldrh	r3, [r7, #6]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1e1      	bne.n	8000442 <itoa+0x12>
    }
    str[i] = '\0';
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	4413      	add	r3, r2
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

    // Reverse the string
    for(int j = 0, k = i - 1; j < k; j++, k--)
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	3b01      	subs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e017      	b.n	80004c4 <itoa+0x94>
    {
        char temp = str[j];
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	4413      	add	r3, r2
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	72fb      	strb	r3, [r7, #11]
        str[j] = str[k];
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	441a      	add	r2, r3
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	440b      	add	r3, r1
 80004aa:	7812      	ldrb	r2, [r2, #0]
 80004ac:	701a      	strb	r2, [r3, #0]
        str[k] = temp;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	683a      	ldr	r2, [r7, #0]
 80004b2:	4413      	add	r3, r2
 80004b4:	7afa      	ldrb	r2, [r7, #11]
 80004b6:	701a      	strb	r2, [r3, #0]
    for(int j = 0, k = i - 1; j < k; j++, k--)
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	3301      	adds	r3, #1
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dbe3      	blt.n	8000494 <itoa+0x64>
    }
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	371c      	adds	r7, #28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	cccccccd 	.word	0xcccccccd

080004e0 <FP_search>:

//Searches through data base by asking for user input.
//Returns address found or -1 if error
void FP_search(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
	//FPIDrdy = 0;
	lcd_set_cursor_position(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fc9d 	bl	8000e28 <lcd_set_cursor_position>
	str_write("Place Finger    ");
 80004ee:	485c      	ldr	r0, [pc, #368]	; (8000660 <FP_search+0x180>)
 80004f0:	f000 fcb4 	bl	8000e5c <str_write>
	lcd_set_cursor_position(1, 0);
 80004f4:	2100      	movs	r1, #0
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 fc96 	bl	8000e28 <lcd_set_cursor_position>
	str_write("to find it      ");
 80004fc:	4859      	ldr	r0, [pc, #356]	; (8000664 <FP_search+0x184>)
 80004fe:	f000 fcad 	bl	8000e5c <str_write>
	genImg();
 8000502:	f000 f989 	bl	8000818 <genImg>

	while (1) {	//No finger detected get finger
		genImg();	//checks fingerprint
 8000506:	f000 f987 	bl	8000818 <genImg>
		if (ConfirmationCode == 0x00)
 800050a:	4b57      	ldr	r3, [pc, #348]	; (8000668 <FP_search+0x188>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d020      	beq.n	8000554 <FP_search+0x74>
			break;
		//for error handling
		else if ((ConfirmationCode == 0x01) | (ConfirmationCode == 0x03)) {
 8000512:	4b55      	ldr	r3, [pc, #340]	; (8000668 <FP_search+0x188>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	bf0c      	ite	eq
 800051a:	2301      	moveq	r3, #1
 800051c:	2300      	movne	r3, #0
 800051e:	b2da      	uxtb	r2, r3
 8000520:	4b51      	ldr	r3, [pc, #324]	; (8000668 <FP_search+0x188>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b03      	cmp	r3, #3
 8000526:	bf0c      	ite	eq
 8000528:	2301      	moveq	r3, #1
 800052a:	2300      	movne	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4313      	orrs	r3, r2
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0e7      	beq.n	8000506 <FP_search+0x26>
			lcd_set_cursor_position(0, 0);
 8000536:	2100      	movs	r1, #0
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fc75 	bl	8000e28 <lcd_set_cursor_position>
			str_write("Place fngr again");
 800053e:	484b      	ldr	r0, [pc, #300]	; (800066c <FP_search+0x18c>)
 8000540:	f000 fc8c 	bl	8000e5c <str_write>
			lcd_set_cursor_position(1, 0);
 8000544:	2100      	movs	r1, #0
 8000546:	2001      	movs	r0, #1
 8000548:	f000 fc6e 	bl	8000e28 <lcd_set_cursor_position>
			str_write("Error clean fngr");
 800054c:	4848      	ldr	r0, [pc, #288]	; (8000670 <FP_search+0x190>)
 800054e:	f000 fc85 	bl	8000e5c <str_write>
		genImg();	//checks fingerprint
 8000552:	e7d8      	b.n	8000506 <FP_search+0x26>
			break;
 8000554:	bf00      	nop
		}
	}
	Img2Tz(1);	//stores in buffer 1
 8000556:	2001      	movs	r0, #1
 8000558:	f000 f990 	bl	800087c <Img2Tz>

	lcd_set_cursor_position(0, 0);
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fc62 	bl	8000e28 <lcd_set_cursor_position>
	str_write("Searching       ");
 8000564:	4843      	ldr	r0, [pc, #268]	; (8000674 <FP_search+0x194>)
 8000566:	f000 fc79 	bl	8000e5c <str_write>
	lcd_set_cursor_position(1, 0);
 800056a:	2100      	movs	r1, #0
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fc5b 	bl	8000e28 <lcd_set_cursor_position>
	str_write("Database        ");
 8000572:	4841      	ldr	r0, [pc, #260]	; (8000678 <FP_search+0x198>)
 8000574:	f000 fc72 	bl	8000e5c <str_write>
//	write(MAX_FP + '0');	//for debugging
	search(1, 0, MAX_FP);	//searches through entire database
 8000578:	2232      	movs	r2, #50	; 0x32
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f000 fa95 	bl	8000aac <search>
	if (ConfirmationCode == 0x00) {	//successfully found ID
 8000582:	4b39      	ldr	r3, [pc, #228]	; (8000668 <FP_search+0x188>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d145      	bne.n	8000616 <FP_search+0x136>
		FP_ID = errorbuffer[10] + errorbuffer[11]; //gets pageID = location of FP stored in FLASH
 800058a:	4b3c      	ldr	r3, [pc, #240]	; (800067c <FP_search+0x19c>)
 800058c:	7a9b      	ldrb	r3, [r3, #10]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <FP_search+0x19c>)
 8000592:	7adb      	ldrb	r3, [r3, #11]
 8000594:	b29b      	uxth	r3, r3
 8000596:	4413      	add	r3, r2
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b39      	ldr	r3, [pc, #228]	; (8000680 <FP_search+0x1a0>)
 800059c:	801a      	strh	r2, [r3, #0]
		LPUART_Print("Send");	  //header instruction
 800059e:	4839      	ldr	r0, [pc, #228]	; (8000684 <FP_search+0x1a4>)
 80005a0:	f000 ffb2 	bl	8001508 <LPUART_Print>
		delay_us(10000);
 80005a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a8:	f000 f87c 	bl	80006a4 <delay_us>
		LPUART1->TDR = errorbuffer[10];
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <FP_search+0x19c>)
 80005ae:	7a9a      	ldrb	r2, [r3, #10]
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <FP_search+0x1a8>)
 80005b2:	b292      	uxth	r2, r2
 80005b4:	851a      	strh	r2, [r3, #40]	; 0x28
		delay_us(10000);
 80005b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ba:	f000 f873 	bl	80006a4 <delay_us>
		LPUART1->TDR = errorbuffer[11];
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <FP_search+0x19c>)
 80005c0:	7ada      	ldrb	r2, [r3, #11]
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <FP_search+0x1a8>)
 80005c4:	b292      	uxth	r2, r2
 80005c6:	851a      	strh	r2, [r3, #40]	; 0x28
		delay_us(10000);
 80005c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80005cc:	f000 f86a 	bl	80006a4 <delay_us>
		LPUART_Print_Char('\n');
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 ff81 	bl	80014d8 <LPUART_Print_Char>
		lcd_set_cursor_position(0, 0);
 80005d6:	2100      	movs	r1, #0
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fc25 	bl	8000e28 <lcd_set_cursor_position>
		str_write("Welcome Back!   ");
 80005de:	482b      	ldr	r0, [pc, #172]	; (800068c <FP_search+0x1ac>)
 80005e0:	f000 fc3c 	bl	8000e5c <str_write>
		lcd_set_cursor_position(1, 0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fc1e 	bl	8000e28 <lcd_set_cursor_position>

		//prints username onto LCD	//
		for (int i = 0; i < 16; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	e00d      	b.n	800060e <FP_search+0x12e>
			write(USER_INPUT_NAME[FP_ID][i]); //NEED TO VERIFY IF IT WORKS
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <FP_search+0x1a0>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4a26      	ldr	r2, [pc, #152]	; (8000690 <FP_search+0x1b0>)
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	441a      	add	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fba0 	bl	8000d48 <write>
		for (int i = 0; i < 16; i++) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3301      	adds	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	ddee      	ble.n	80005f2 <FP_search+0x112>
		str_write("FP Not Found    ");
		lcd_set_cursor_position(1, 0);
		str_write("Please Enroll   ");
		//return -1;
	}
}
 8000614:	e020      	b.n	8000658 <FP_search+0x178>
	} else if (ConfirmationCode == 0x01) {
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <FP_search+0x188>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10e      	bne.n	800063c <FP_search+0x15c>
		lcd_set_cursor_position(0, 0);
 800061e:	2100      	movs	r1, #0
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fc01 	bl	8000e28 <lcd_set_cursor_position>
		str_write("Error During    ");
 8000626:	481b      	ldr	r0, [pc, #108]	; (8000694 <FP_search+0x1b4>)
 8000628:	f000 fc18 	bl	8000e5c <str_write>
		lcd_set_cursor_position(1, 0);
 800062c:	2100      	movs	r1, #0
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fbfa 	bl	8000e28 <lcd_set_cursor_position>
		str_write("                ");
 8000634:	4818      	ldr	r0, [pc, #96]	; (8000698 <FP_search+0x1b8>)
 8000636:	f000 fc11 	bl	8000e5c <str_write>
}
 800063a:	e00d      	b.n	8000658 <FP_search+0x178>
		lcd_set_cursor_position(0, 0);
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fbf2 	bl	8000e28 <lcd_set_cursor_position>
		str_write("FP Not Found    ");
 8000644:	4815      	ldr	r0, [pc, #84]	; (800069c <FP_search+0x1bc>)
 8000646:	f000 fc09 	bl	8000e5c <str_write>
		lcd_set_cursor_position(1, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fbeb 	bl	8000e28 <lcd_set_cursor_position>
		str_write("Please Enroll   ");
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <FP_search+0x1c0>)
 8000654:	f000 fc02 	bl	8000e5c <str_write>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	080026b0 	.word	0x080026b0
 8000664:	080026c4 	.word	0x080026c4
 8000668:	2000037c 	.word	0x2000037c
 800066c:	080026d8 	.word	0x080026d8
 8000670:	080026ec 	.word	0x080026ec
 8000674:	08002700 	.word	0x08002700
 8000678:	08002714 	.word	0x08002714
 800067c:	2000035c 	.word	0x2000035c
 8000680:	20000000 	.word	0x20000000
 8000684:	08002728 	.word	0x08002728
 8000688:	40008000 	.word	0x40008000
 800068c:	08002730 	.word	0x08002730
 8000690:	20000038 	.word	0x20000038
 8000694:	08002744 	.word	0x08002744
 8000698:	08002604 	.word	0x08002604
 800069c:	08002758 	.word	0x08002758
 80006a0:	0800276c 	.word	0x0800276c

080006a4 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <delay_us+0x50>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <delay_us+0x54>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	0c9b      	lsrs	r3, r3, #18
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <delay_us+0x58>)
 80006c0:	3b01      	subs	r3, #1
 80006c2:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <delay_us+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <delay_us+0x58>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <delay_us+0x58>)
 80006d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d4:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 80006d6:	bf00      	nop
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <delay_us+0x58>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0f9      	beq.n	80006d8 <delay_us+0x34>
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000000c 	.word	0x2000000c
 80006f8:	431bde83 	.word	0x431bde83
 80006fc:	e000e010 	.word	0xe000e010

08000700 <handshake>:
uint32_t ACK_LENGTH = 0; //global variable
#define CMD_DELAY 800000 //delay length to call for each command length

//--------------------Instructions to transmit
//Command to confirm if fingerprint is connected to upper computer
void handshake(void) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
	char handshake[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,	//instruction
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <handshake+0x54>)
 8000708:	463c      	mov	r4, r7
 800070a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070c:	c407      	stmia	r4!, {r0, r1, r2}
 800070e:	7023      	strb	r3, [r4, #0]
			0x01, 0x00, 0x04, 0x17, 0x00, 0x00, 0x1C }; //a 0x00 after 0x01 before 0x04
	uint8_t i = 0;		//iteration counter
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 8000714:	e011      	b.n	800073a <handshake+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000716:	bf00      	nop
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <handshake+0x58>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <handshake+0x18>
			; //waits for empty transmit
		USART2->TDR = handshake[i];
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	3310      	adds	r3, #16
 8000728:	443b      	add	r3, r7
 800072a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <handshake+0x58>)
 8000730:	b292      	uxth	r2, r2
 8000732:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	3301      	adds	r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b0c      	cmp	r3, #12
 800073e:	d9ea      	bls.n	8000716 <handshake+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <handshake+0x5c>)
 8000742:	220c      	movs	r2, #12
 8000744:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <handshake+0x60>)
 8000748:	f7ff ffac 	bl	80006a4 <delay_us>
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bd90      	pop	{r4, r7, pc}
 8000754:	08002780 	.word	0x08002780
 8000758:	40004400 	.word	0x40004400
 800075c:	20000358 	.word	0x20000358
 8000760:	000c3500 	.word	0x000c3500

08000764 <SetSysPara>:
 * (4) Baud Rate: setting = [1,12] | setting value * 9600bps
 * (5) Security Level: setting = [1,5]
 * 					   1 FAR (false acceptance rate) highest - 5 FAR lowest
 * (6) Data Package Length : setting = [0,3] | 32 bytes, 64 bytes, 128 bytes, 256 bytes
 */
void SetSysPara(char param, char setting) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0005 + 0x0E + setting + param;//0x0007 package length, 0x01 package identifer
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	b29a      	uxth	r2, r3
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	b29b      	uxth	r3, r3
 800077c:	4413      	add	r3, r2
 800077e:	b29b      	uxth	r3, r3
 8000780:	3314      	adds	r3, #20
 8000782:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 8000784:	8bbb      	ldrh	r3, [r7, #28]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 800078c:	8bbb      	ldrh	r3, [r7, #28]
 800078e:	76bb      	strb	r3, [r7, #26]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sys[14] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x05, 0x0E, //instruction
 8000790:	23ef      	movs	r3, #239	; 0xef
 8000792:	733b      	strb	r3, [r7, #12]
 8000794:	2301      	movs	r3, #1
 8000796:	737b      	strb	r3, [r7, #13]
 8000798:	23ff      	movs	r3, #255	; 0xff
 800079a:	73bb      	strb	r3, [r7, #14]
 800079c:	23ff      	movs	r3, #255	; 0xff
 800079e:	73fb      	strb	r3, [r7, #15]
 80007a0:	23ff      	movs	r3, #255	; 0xff
 80007a2:	743b      	strb	r3, [r7, #16]
 80007a4:	23ff      	movs	r3, #255	; 0xff
 80007a6:	747b      	strb	r3, [r7, #17]
 80007a8:	2301      	movs	r3, #1
 80007aa:	74bb      	strb	r3, [r7, #18]
 80007ac:	2300      	movs	r3, #0
 80007ae:	74fb      	strb	r3, [r7, #19]
 80007b0:	2305      	movs	r3, #5
 80007b2:	753b      	strb	r3, [r7, #20]
 80007b4:	230e      	movs	r3, #14
 80007b6:	757b      	strb	r3, [r7, #21]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	75bb      	strb	r3, [r7, #22]
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	75fb      	strb	r3, [r7, #23]
 80007c0:	7efb      	ldrb	r3, [r7, #27]
 80007c2:	763b      	strb	r3, [r7, #24]
 80007c4:	7ebb      	ldrb	r3, [r7, #26]
 80007c6:	767b      	strb	r3, [r7, #25]
			param, setting, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80007c8:	2300      	movs	r3, #0
 80007ca:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 80007cc:	e011      	b.n	80007f2 <SetSysPara+0x8e>
		while (!(USART2->ISR & USART_ISR_TXE))
 80007ce:	bf00      	nop
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <SetSysPara+0xa8>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0f9      	beq.n	80007d0 <SetSysPara+0x6c>
			; //waits for empty transmit
		USART2->TDR = sys[i];
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
 80007de:	3320      	adds	r3, #32
 80007e0:	443b      	add	r3, r7
 80007e2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <SetSysPara+0xa8>)
 80007e8:	b292      	uxth	r2, r2
 80007ea:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 80007ec:	7ffb      	ldrb	r3, [r7, #31]
 80007ee:	3301      	adds	r3, #1
 80007f0:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 80007f2:	7ffb      	ldrb	r3, [r7, #31]
 80007f4:	2b0d      	cmp	r3, #13
 80007f6:	d9ea      	bls.n	80007ce <SetSysPara+0x6a>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SetSysPara+0xac>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <SetSysPara+0xb0>)
 8000800:	f7ff ff50 	bl	80006a4 <delay_us>
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004400 	.word	0x40004400
 8000810:	20000358 	.word	0x20000358
 8000814:	000c3500 	.word	0x000c3500

08000818 <genImg>:
	ACK_LENGTH = 14; //Acknowledge packet 14 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}


void genImg(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char gen[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01,
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <genImg+0x54>)
 8000820:	463b      	mov	r3, r7
 8000822:	ca07      	ldmia	r2, {r0, r1, r2}
 8000824:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x05 };

	uint8_t i = 0;		//iteration counter
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 800082c:	e011      	b.n	8000852 <genImg+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 800082e:	bf00      	nop
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <genImg+0x58>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <genImg+0x18>
			; //waits for empty transmit
		USART2->TDR = gen[i];
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	3310      	adds	r3, #16
 8000840:	443b      	add	r3, r7
 8000842:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <genImg+0x58>)
 8000848:	b292      	uxth	r2, r2
 800084a:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	3301      	adds	r3, #1
 8000850:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b0b      	cmp	r3, #11
 8000856:	d9ea      	bls.n	800082e <genImg+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <genImg+0x5c>)
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <genImg+0x60>)
 8000860:	f7ff ff20 	bl	80006a4 <delay_us>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	0800279c 	.word	0x0800279c
 8000870:	40004400 	.word	0x40004400
 8000874:	20000358 	.word	0x20000358
 8000878:	000c3500 	.word	0x000c3500

0800087c <Img2Tz>:
//--------------
//--------------ALL CHECKSUM BELOW IS CORRECT:
//Need to add all package identifier, package length, and pakacage contents
//--------------
//generates character file and stores in charbuffer1/charbuffer2 (buffID)
void Img2Tz(char buffID){
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0004 + 0x02 + buffID;//0x0007 package length, 0x01 package identifer
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	b29b      	uxth	r3, r3
 800088a:	3307      	adds	r3, #7
 800088c:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 800088e:	8bbb      	ldrh	r3, [r7, #28]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 8000896:	8bbb      	ldrh	r3, [r7, #28]
 8000898:	76bb      	strb	r3, [r7, #26]
	buffID = 0x00 + buffID;

	//instruction to send
	char img[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x02, //instruction
 800089a:	23ef      	movs	r3, #239	; 0xef
 800089c:	733b      	strb	r3, [r7, #12]
 800089e:	2301      	movs	r3, #1
 80008a0:	737b      	strb	r3, [r7, #13]
 80008a2:	23ff      	movs	r3, #255	; 0xff
 80008a4:	73bb      	strb	r3, [r7, #14]
 80008a6:	23ff      	movs	r3, #255	; 0xff
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	23ff      	movs	r3, #255	; 0xff
 80008ac:	743b      	strb	r3, [r7, #16]
 80008ae:	23ff      	movs	r3, #255	; 0xff
 80008b0:	747b      	strb	r3, [r7, #17]
 80008b2:	2301      	movs	r3, #1
 80008b4:	74bb      	strb	r3, [r7, #18]
 80008b6:	2300      	movs	r3, #0
 80008b8:	74fb      	strb	r3, [r7, #19]
 80008ba:	2304      	movs	r3, #4
 80008bc:	753b      	strb	r3, [r7, #20]
 80008be:	2302      	movs	r3, #2
 80008c0:	757b      	strb	r3, [r7, #21]
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	75bb      	strb	r3, [r7, #22]
 80008c6:	7efb      	ldrb	r3, [r7, #27]
 80008c8:	75fb      	strb	r3, [r7, #23]
 80008ca:	7ebb      	ldrb	r3, [r7, #26]
 80008cc:	763b      	strb	r3, [r7, #24]
			buffID, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80008ce:	2300      	movs	r3, #0
 80008d0:	77fb      	strb	r3, [r7, #31]
	while (i < 13) { //sends data from lowest byte to highest byte
 80008d2:	e011      	b.n	80008f8 <Img2Tz+0x7c>
		while (!(USART2->ISR & USART_ISR_TXE))
 80008d4:	bf00      	nop
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <Img2Tz+0x98>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <Img2Tz+0x5a>
			; //waits for empty transmit
		USART2->TDR = img[i];
 80008e2:	7ffb      	ldrb	r3, [r7, #31]
 80008e4:	3320      	adds	r3, #32
 80008e6:	443b      	add	r3, r7
 80008e8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <Img2Tz+0x98>)
 80008ee:	b292      	uxth	r2, r2
 80008f0:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 80008f2:	7ffb      	ldrb	r3, [r7, #31]
 80008f4:	3301      	adds	r3, #1
 80008f6:	77fb      	strb	r3, [r7, #31]
	while (i < 13) { //sends data from lowest byte to highest byte
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	2b0c      	cmp	r3, #12
 80008fc:	d9ea      	bls.n	80008d4 <Img2Tz+0x58>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <Img2Tz+0x9c>)
 8000900:	220c      	movs	r2, #12
 8000902:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <Img2Tz+0xa0>)
 8000906:	f7ff fecd 	bl	80006a4 <delay_us>
}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40004400 	.word	0x40004400
 8000918:	20000358 	.word	0x20000358
 800091c:	000c3500 	.word	0x000c3500

08000920 <regMode>:


//----------PROBLEM: not writing 0x09 final byte
//combines template from both inputs and generates a template
void regMode(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char reg[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x05,//instruction
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <regMode+0x54>)
 8000928:	463b      	mov	r3, r7
 800092a:	ca07      	ldmia	r2, {r0, r1, r2}
 800092c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x09 };

	uint8_t i = 0;		//iteration counter
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000934:	e011      	b.n	800095a <regMode+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000936:	bf00      	nop
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <regMode+0x58>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f9      	beq.n	8000938 <regMode+0x18>
			; //waits for empty transmit
		USART2->TDR = reg[i];
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	3310      	adds	r3, #16
 8000948:	443b      	add	r3, r7
 800094a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <regMode+0x58>)
 8000950:	b292      	uxth	r2, r2
 8000952:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	3301      	adds	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b0b      	cmp	r3, #11
 800095e:	d9ea      	bls.n	8000936 <regMode+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <regMode+0x5c>)
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <regMode+0x60>)
 8000968:	f7ff fe9c 	bl	80006a4 <delay_us>
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	080027a8 	.word	0x080027a8
 8000978:	40004400 	.word	0x40004400
 800097c:	20000358 	.word	0x20000358
 8000980:	000c3500 	.word	0x000c3500

08000984 <store>:

//stores template at specified buffer (buff1/buff2) at specified location (pageID)
void store(char buffID, uint16_t pageID) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	80bb      	strh	r3, [r7, #4]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0006 + 0x06 + buffID + pageID;//0x0007 package length, 0x01 package identifer
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	b29a      	uxth	r2, r3
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	330d      	adds	r3, #13
 80009a0:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 80009a2:	8bbb      	ldrh	r3, [r7, #28]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 80009aa:	8bbb      	ldrh	r3, [r7, #28]
 80009ac:	76bb      	strb	r3, [r7, #26]

	//separates pageID
	char pageIDH = (pageID >> 8) & 0xFF;
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	767b      	strb	r3, [r7, #25]
	char pageIDL = pageID & 0xFF;
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	763b      	strb	r3, [r7, #24]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sto[15] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06,//instructions
 80009ba:	23ef      	movs	r3, #239	; 0xef
 80009bc:	723b      	strb	r3, [r7, #8]
 80009be:	2301      	movs	r3, #1
 80009c0:	727b      	strb	r3, [r7, #9]
 80009c2:	23ff      	movs	r3, #255	; 0xff
 80009c4:	72bb      	strb	r3, [r7, #10]
 80009c6:	23ff      	movs	r3, #255	; 0xff
 80009c8:	72fb      	strb	r3, [r7, #11]
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	733b      	strb	r3, [r7, #12]
 80009ce:	23ff      	movs	r3, #255	; 0xff
 80009d0:	737b      	strb	r3, [r7, #13]
 80009d2:	2301      	movs	r3, #1
 80009d4:	73bb      	strb	r3, [r7, #14]
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	2306      	movs	r3, #6
 80009dc:	743b      	strb	r3, [r7, #16]
 80009de:	2306      	movs	r3, #6
 80009e0:	747b      	strb	r3, [r7, #17]
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	74bb      	strb	r3, [r7, #18]
 80009e6:	7e7b      	ldrb	r3, [r7, #25]
 80009e8:	74fb      	strb	r3, [r7, #19]
 80009ea:	7e3b      	ldrb	r3, [r7, #24]
 80009ec:	753b      	strb	r3, [r7, #20]
 80009ee:	7efb      	ldrb	r3, [r7, #27]
 80009f0:	757b      	strb	r3, [r7, #21]
 80009f2:	7ebb      	ldrb	r3, [r7, #26]
 80009f4:	75bb      	strb	r3, [r7, #22]
			0x06, buffID, pageIDH, pageIDL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80009f6:	2300      	movs	r3, #0
 80009f8:	77fb      	strb	r3, [r7, #31]
	while (i < 15) { //sends data from lowest byte to highest byte
 80009fa:	e011      	b.n	8000a20 <store+0x9c>
		while (!(USART2->ISR & USART_ISR_TXE))
 80009fc:	bf00      	nop
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <store+0xb8>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f9      	beq.n	80009fe <store+0x7a>
			; //waits for empty transmit
		USART2->TDR = sto[i];
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	3320      	adds	r3, #32
 8000a0e:	443b      	add	r3, r7
 8000a10:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <store+0xb8>)
 8000a16:	b292      	uxth	r2, r2
 8000a18:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000a1a:	7ffb      	ldrb	r3, [r7, #31]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	77fb      	strb	r3, [r7, #31]
	while (i < 15) { //sends data from lowest byte to highest byte
 8000a20:	7ffb      	ldrb	r3, [r7, #31]
 8000a22:	2b0e      	cmp	r3, #14
 8000a24:	d9ea      	bls.n	80009fc <store+0x78>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <store+0xbc>)
 8000a28:	220c      	movs	r2, #12
 8000a2a:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <store+0xc0>)
 8000a2e:	f7ff fe39 	bl	80006a4 <delay_us>
}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	20000358 	.word	0x20000358
 8000a44:	000c3500 	.word	0x000c3500

08000a48 <empty>:
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//empties entire data base
void empty(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char emp[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03,//instructions
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <empty+0x54>)
 8000a50:	463b      	mov	r3, r7
 8000a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x0D, 0x00, 0x11 };

	uint8_t i = 0;		//iteration counter
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
	while (i < 11) { //sends data from lowest byte to highest byte
 8000a5c:	e011      	b.n	8000a82 <empty+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000a5e:	bf00      	nop
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <empty+0x58>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f9      	beq.n	8000a60 <empty+0x18>
			; //waits for empty transmit
		USART2->TDR = emp[i];
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	3310      	adds	r3, #16
 8000a70:	443b      	add	r3, r7
 8000a72:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <empty+0x58>)
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
	while (i < 11) { //sends data from lowest byte to highest byte
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	2b0a      	cmp	r3, #10
 8000a86:	d9ea      	bls.n	8000a5e <empty+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <empty+0x5c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <empty+0x60>)
 8000a90:	f7ff fe08 	bl	80006a4 <delay_us>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	080027b4 	.word	0x080027b4
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	20000358 	.word	0x20000358
 8000aa8:	000c3500 	.word	0x000c3500

08000aac <search>:
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//search whole library to find what matches
//INPUT: BufferID (charbuff1/charbuff2), startPage(searching start), pageNum(searching numbers)
void search(char buffID, uint16_t startPage, uint16_t pageNum) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	80bb      	strh	r3, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	807b      	strh	r3, [r7, #2]
	//checksum
	int16_t sum = 0x01 + 0x0008 + 0x04 + buffID + startPage + pageNum;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	4413      	add	r3, r2
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	330d      	adds	r3, #13
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	84bb      	strh	r3, [r7, #36]	; 0x24
	char sum1 = (sum >> 8) & 0xFF;
 8000ad4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000ad8:	121b      	asrs	r3, r3, #8
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char sum2 = sum & 0xFF;
 8000ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ae2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	//separates startPage and pageNum
	char sPH = (startPage >> 8) & 0xFF;
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	char sPL = startPage & 0xFF;
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	f887 3020 	strb.w	r3, [r7, #32]
	char pNH = (pageNum >> 8) & 0xFF;
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	77fb      	strb	r3, [r7, #31]
	char pNL = pageNum & 0xFF;
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	77bb      	strb	r3, [r7, #30]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char ser[17] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08,//instructions
 8000b02:	23ef      	movs	r3, #239	; 0xef
 8000b04:	733b      	strb	r3, [r7, #12]
 8000b06:	2301      	movs	r3, #1
 8000b08:	737b      	strb	r3, [r7, #13]
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	73bb      	strb	r3, [r7, #14]
 8000b0e:	23ff      	movs	r3, #255	; 0xff
 8000b10:	73fb      	strb	r3, [r7, #15]
 8000b12:	23ff      	movs	r3, #255	; 0xff
 8000b14:	743b      	strb	r3, [r7, #16]
 8000b16:	23ff      	movs	r3, #255	; 0xff
 8000b18:	747b      	strb	r3, [r7, #17]
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	74bb      	strb	r3, [r7, #18]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	74fb      	strb	r3, [r7, #19]
 8000b22:	2308      	movs	r3, #8
 8000b24:	753b      	strb	r3, [r7, #20]
 8000b26:	2304      	movs	r3, #4
 8000b28:	757b      	strb	r3, [r7, #21]
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	75bb      	strb	r3, [r7, #22]
 8000b2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b32:	75fb      	strb	r3, [r7, #23]
 8000b34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b38:	763b      	strb	r3, [r7, #24]
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
 8000b3c:	767b      	strb	r3, [r7, #25]
 8000b3e:	7fbb      	ldrb	r3, [r7, #30]
 8000b40:	76bb      	strb	r3, [r7, #26]
 8000b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b46:	76fb      	strb	r3, [r7, #27]
 8000b48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b4c:	773b      	strb	r3, [r7, #28]
			0x04, buffID, sPH, sPL, pNH, pNL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (i < 17) { //sends data from lowest byte to highest byte
 8000b54:	e014      	b.n	8000b80 <search+0xd4>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000b56:	bf00      	nop
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <search+0xf0>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f9      	beq.n	8000b58 <search+0xac>
			; //waits for empty transmit
		USART2->TDR = ser[i];
 8000b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b68:	3328      	adds	r3, #40	; 0x28
 8000b6a:	443b      	add	r3, r7
 8000b6c:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <search+0xf0>)
 8000b72:	b292      	uxth	r2, r2
 8000b74:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (i < 17) { //sends data from lowest byte to highest byte
 8000b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b84:	2b10      	cmp	r3, #16
 8000b86:	d9e6      	bls.n	8000b56 <search+0xaa>
	}
	ACK_LENGTH = 16; //Acknowledge packet 12 bytes long
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <search+0xf4>)
 8000b8a:	2210      	movs	r2, #16
 8000b8c:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <search+0xf8>)
 8000b90:	f7ff fd88 	bl	80006a4 <delay_us>
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	20000358 	.word	0x20000358
 8000ba4:	000c3500 	.word	0x000c3500

08000ba8 <LCD_init>:
//void clear_LCD(void);

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  delay_us(100000);
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <LCD_init+0x9c>)
 8000bae:	f7ff fd79 	bl	80006a4 <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOEEN); // enable GPIOA clock on bus
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <LCD_init+0xa0>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <LCD_init+0xa0>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <LCD_init+0xa4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <LCD_init+0xa4>)
 8000bc4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000bc8:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 |
        GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 |
        GPIO_MODER_MODE15); // clear bits for PA
  control_pins->MODER |=
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <LCD_init+0xa4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <LCD_init+0xa4>)
 8000bd0:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000bd4:	f443 03a8 	orr.w	r3, r3, #5505024	; 0x540000
 8000bd8:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0 |
       GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0 |
       GPIO_MODER_MODE15_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <LCD_init+0xa4>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <LCD_init+0xa4>)
 8000be0:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8000be4:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11 | GPIO_OTYPER_OT12 |
        GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15);
  control_pins->OSPEEDR |=
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <LCD_init+0xa4>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <LCD_init+0xa4>)
 8000bec:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000bf0:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000bf4:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED9_Pos) | (3 << GPIO_OSPEEDR_OSPEED10_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED11_Pos) | (3 << GPIO_OSPEEDR_OSPEED12_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED13_Pos) | (3 << GPIO_OSPEEDR_OSPEED14_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED15_Pos));
  control_pins->BRR =
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <LCD_init+0xa4>)
 8000bf8:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 8000bfe:	4811      	ldr	r0, [pc, #68]	; (8000c44 <LCD_init+0x9c>)
 8000c00:	f7ff fd50 	bl	80006a4 <delay_us>
  command(0x30);
 8000c04:	2030      	movs	r0, #48	; 0x30
 8000c06:	f000 f83d 	bl	8000c84 <command>
  delay_us(100);
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	f7ff fd4a 	bl	80006a4 <delay_us>
  command(0x30);
 8000c10:	2030      	movs	r0, #48	; 0x30
 8000c12:	f000 f837 	bl	8000c84 <command>
  delay_us(100);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f7ff fd44 	bl	80006a4 <delay_us>
  command(0x30);
 8000c1c:	2030      	movs	r0, #48	; 0x30
 8000c1e:	f000 f831 	bl	8000c84 <command>
  delay_us(100);
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f7ff fd3e 	bl	80006a4 <delay_us>
  command(0x20);
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f000 f82b 	bl	8000c84 <command>
  delay_us(100);
 8000c2e:	2064      	movs	r0, #100	; 0x64
 8000c30:	f7ff fd38 	bl	80006a4 <delay_us>
  command(0x02);
 8000c34:	2002      	movs	r0, #2
 8000c36:	f000 f825 	bl	8000c84 <command>
  delay_us(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f7ff fd32 	bl	80006a4 <delay_us>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	000186a0 	.word	0x000186a0
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48001000 	.word	0x48001000

08000c50 <Nybble>:

void Nybble() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <Nybble+0x30>)
 8000c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c5a:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 8000c5c:	2032      	movs	r0, #50	; 0x32
 8000c5e:	f7ff fd21 	bl	80006a4 <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <Nybble+0x30>)
 8000c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 8000c6a:	2032      	movs	r0, #50	; 0x32
 8000c6c:	f7ff fd1a 	bl	80006a4 <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <Nybble+0x30>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	4a02      	ldr	r2, [pc, #8]	; (8000c80 <Nybble+0x30>)
 8000c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000c7a:	6153      	str	r3, [r2, #20]
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	48001000 	.word	0x48001000

08000c84 <command>:

void command(uint8_t command) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <command+0xbc>)
 8000c96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e017      	b.n	8000cd2 <command+0x4e>
    if ((command2 >> i) & 0x01) {
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa42 f303 	asr.w	r3, r2, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <command+0x3c>
      control_pins->BSRR = GPIO_Pin[i];
 8000cb2:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <command+0xc0>)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <command+0xbc>)
 8000cbc:	619a      	str	r2, [r3, #24]
 8000cbe:	e005      	b.n	8000ccc <command+0x48>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <command+0xc0>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <command+0xbc>)
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	dde4      	ble.n	8000ca2 <command+0x1e>
    }
  }

  delay_us(1000);
 8000cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cdc:	f7ff fce2 	bl	80006a4 <delay_us>
  Nybble(); // Send pulse
 8000ce0:	f7ff ffb6 	bl	8000c50 <Nybble>

  for (int i = 0; i < 4; i++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	e017      	b.n	8000d1a <command+0x96>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 8000cea:	79fa      	ldrb	r2, [r7, #7]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	fa42 f303 	asr.w	r3, r2, r3
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <command+0x84>
      control_pins->BSRR = GPIO_Pin[i];
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <command+0xc0>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <command+0xbc>)
 8000d04:	619a      	str	r2, [r3, #24]
 8000d06:	e005      	b.n	8000d14 <command+0x90>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <command+0xc0>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <command+0xbc>)
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	3301      	adds	r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	dde4      	ble.n	8000cea <command+0x66>
    }
  }
  delay_us(1000);
 8000d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d24:	f7ff fcbe 	bl	80006a4 <delay_us>
  Nybble();                                    // Send pulse
 8000d28:	f7ff ff92 	bl	8000c50 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <command+0xbc>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <command+0xbc>)
 8000d32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000d36:	6153      	str	r3, [r2, #20]
}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	48001000 	.word	0x48001000
 8000d44:	20000004 	.word	0x20000004

08000d48 <write>:

void write(char letter) {  //write 1 character on the LCD display
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <write+0xd8>)
 8000d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d62:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <write+0xd8>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e017      	b.n	8000da2 <write+0x5a>
    if ((c2 >> i) & 0x01) {
 8000d72:	7bba      	ldrb	r2, [r7, #14]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa42 f303 	asr.w	r3, r2, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <write+0x48>
      control_pins->BSRR = GPIO_Pin[i];
 8000d82:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <write+0xdc>)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <write+0xd8>)
 8000d8c:	619a      	str	r2, [r3, #24]
 8000d8e:	e005      	b.n	8000d9c <write+0x54>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <write+0xdc>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <write+0xd8>)
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	dde4      	ble.n	8000d72 <write+0x2a>
    }
  }

  delay_us(1000);
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f7ff fc7a 	bl	80006a4 <delay_us>
  Nybble(); //send pulse
 8000db0:	f7ff ff4e 	bl	8000c50 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	e017      	b.n	8000dea <write+0xa2>
    if ((c >> i) & 0x01) {
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	fa42 f303 	asr.w	r3, r2, r3
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <write+0x90>
      control_pins->BSRR = GPIO_Pin[i];
 8000dca:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <write+0xdc>)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <write+0xd8>)
 8000dd4:	619a      	str	r2, [r3, #24]
 8000dd6:	e005      	b.n	8000de4 <write+0x9c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <write+0xdc>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <write+0xd8>)
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	3301      	adds	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	dde4      	ble.n	8000dba <write+0x72>
    }
  }
  delay_us(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df4:	f7ff fc56 	bl	80006a4 <delay_us>
  Nybble(); //send pulse
 8000df8:	f7ff ff2a 	bl	8000c50 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <write+0xd8>)
 8000dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <write+0xd8>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <write+0xd8>)
 8000e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e0e:	6153      	str	r3, [r2, #20]
  delay_us(100);
 8000e10:	2064      	movs	r0, #100	; 0x64
 8000e12:	f7ff fc47 	bl	80006a4 <delay_us>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	48001000 	.word	0x48001000
 8000e24:	20000004 	.word	0x20000004

08000e28 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	3b80      	subs	r3, #128	; 0x80
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e002      	b.n	8000e4c <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	3b40      	subs	r3, #64	; 0x40
 8000e4a:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff18 	bl	8000c84 <command>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e00c      	b.n	8000e84 <str_write+0x28>
    write(str[i]);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff68 	bl	8000d48 <write>
    delay_us(100);
 8000e78:	2064      	movs	r0, #100	; 0x64
 8000e7a:	f7ff fc13 	bl	80006a4 <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1ec      	bne.n	8000e6a <str_write+0xe>
  }
	delay_us(100);
 8000e90:	2064      	movs	r0, #100	; 0x64
 8000e92:	f7ff fc07 	bl	80006a4 <delay_us>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <main>:
int EN_Flag = 0;
int FPIDrdy = 0;	//
int AT_Flag = 0;	//flag for attendance
int EX_Flag = 0;	//flag for exporting data

int main(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

	HAL_Init();
 8000ea6:	f000 fb74 	bl	8001592 <HAL_Init>
	SystemClock_Config();
 8000eaa:	f000 f995 	bl	80011d8 <SystemClock_Config>
	LPUART_init();
 8000eae:	f000 fa3f 	bl	8001330 <LPUART_init>
	LCD_init();
 8000eb2:	f7ff fe79 	bl	8000ba8 <LCD_init>
	command(0x0C);
 8000eb6:	200c      	movs	r0, #12
 8000eb8:	f7ff fee4 	bl	8000c84 <command>

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 8000ebc:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <main+0x12c>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <main+0x12c>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 8000ec8:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <main+0x130>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a40      	ldr	r2, [pc, #256]	; (8000fd0 <main+0x130>)
 8000ece:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000ed2:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 8000ed4:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <main+0x130>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <main+0x130>)
 8000eda:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000ede:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 8000ee0:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <main+0x130>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a3a      	ldr	r2, [pc, #232]	; (8000fd0 <main+0x130>)
 8000ee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eea:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 8000eec:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <main+0x12c>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a36      	ldr	r2, [pc, #216]	; (8000fcc <main+0x12c>)
 8000ef2:	f043 0302 	orr.w	r3, r3, #2
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <main+0x134>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <main+0x134>)
 8000efe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f02:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <main+0x134>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <main+0x134>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0e:	6013      	str	r3, [r2, #0]

	delay_us(100);
 8000f10:	2064      	movs	r0, #100	; 0x64
 8000f12:	f7ff fbc7 	bl	80006a4 <delay_us>
	USART_init();
 8000f16:	f000 fa7d 	bl	8001414 <USART_init>
	delay_us(10000);
 8000f1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f1e:	f7ff fbc1 	bl	80006a4 <delay_us>

	//Fingerprint initialization
	FP_check();
 8000f22:	f7ff f963 	bl	80001ec <FP_check>

	//FOR DEBUGGING
	empty(); //empties entire database of FP
 8000f26:	f7ff fd8f 	bl	8000a48 <empty>
	MEM_GLOBAL = 0; //resets pointer
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <main+0x138>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]

	while (1) {
		if (EN_Flag) {
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <main+0x13c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <main+0xa8>
//			GPIOB->BSRR = GPIO_PIN_7;
			FP_enroll();	//section 0: only have 10 fingerprints
 8000f38:	f7ff f9c6 	bl	80002c8 <FP_enroll>
			EN_Flag = 0;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <main+0x13c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		}

		//need to make 2 other parameters; start and tardy time
		while (AT_Flag) { //keep asking for user inputs until time is reached change to while so i can debug
 8000f42:	e001      	b.n	8000f48 <main+0xa8>
			FP_search();
 8000f44:	f7ff facc 	bl	80004e0 <FP_search>
		while (AT_Flag) { //keep asking for user inputs until time is reached change to while so i can debug
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <main+0x140>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f9      	bne.n	8000f44 <main+0xa4>
		}

		if (EX_Flag) {
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <main+0x144>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0eb      	beq.n	8000f30 <main+0x90>
			GPIOB->BSRR = GPIO_PIN_7;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <main+0x134>)
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	619a      	str	r2, [r3, #24]
			uint32_t exportIndex = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
			while (exportIndex < MEM_GLOBAL) { //sends data from lowest byte to highest byte
 8000f62:	e028      	b.n	8000fb6 <main+0x116>
				LPUART_FPID(); //transmits ID to LPUART
 8000f64:	f000 f8d8 	bl	8001118 <LPUART_FPID>
				for (int z = 0; z < 16; z ++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	e013      	b.n	8000f96 <main+0xf6>
					while (!(LPUART1->ISR & USART_ISR_TXE));
 8000f6e:	bf00      	nop
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <main+0x148>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f9      	beq.n	8000f70 <main+0xd0>
					LPUART1->TDR = USER_INPUT_NAME[exportIndex][z];
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <main+0x14c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	441a      	add	r2, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <main+0x148>)
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	851a      	strh	r2, [r3, #40]	; 0x28
				for (int z = 0; z < 16; z ++){
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	dde8      	ble.n	8000f6e <main+0xce>
				}
				exportIndex++;	//increments array
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
				while (!(LPUART1->ISR & USART_ISR_TXE));
 8000fa2:	bf00      	nop
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <main+0x148>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f9      	beq.n	8000fa4 <main+0x104>
				LPUART1->TDR = '\n';
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <main+0x148>)
 8000fb2:	220a      	movs	r2, #10
 8000fb4:	851a      	strh	r2, [r3, #40]	; 0x28
			while (exportIndex < MEM_GLOBAL) { //sends data from lowest byte to highest byte
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <main+0x138>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d3d0      	bcc.n	8000f64 <main+0xc4>
			}
			EX_Flag = 0;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <main+0x144>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
		if (EN_Flag) {
 8000fc8:	e7b2      	b.n	8000f30 <main+0x90>
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000800 	.word	0x48000800
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	20000034 	.word	0x20000034
 8000fdc:	20000488 	.word	0x20000488
 8000fe0:	20000490 	.word	0x20000490
 8000fe4:	20000494 	.word	0x20000494
 8000fe8:	40008000 	.word	0x40008000
 8000fec:	20000038 	.word	0x20000038

08000ff0 <LPUART1_IRQHandler>:

		}
	}

//Donna Updated need to test
	void LPUART1_IRQHandler(void) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
		if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <LPUART1_IRQHandler+0x104>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d071      	beq.n	80010e6 <LPUART1_IRQHandler+0xf6>
			uint8_t charRecv = LPUART1->RDR;      // read the received character
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <LPUART1_IRQHandler+0x104>)
 8001004:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001006:	b29b      	uxth	r3, r3
 8001008:	70fb      	strb	r3, [r7, #3]
			discordbuffer[index] = charRecv;    //buffer must be global variable
 800100a:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	493b      	ldr	r1, [pc, #236]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 8001010:	78fa      	ldrb	r2, [r7, #3]
 8001012:	54ca      	strb	r2, [r1, r3]
//		USER_INPUT_NAME[MAX_FP][index] = charRecv;
			index++;                             //index must be global variable
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 800101c:	6013      	str	r3, [r2, #0]

			if (index == 2) {
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d135      	bne.n	8001092 <LPUART1_IRQHandler+0xa2>
				if (discordbuffer[0] == 0xEF && discordbuffer[1] == 0x02) { //wilson send 0xEF02 to indicate beginning of enrollment
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2bef      	cmp	r3, #239	; 0xef
 800102c:	d10c      	bne.n	8001048 <LPUART1_IRQHandler+0x58>
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d108      	bne.n	8001048 <LPUART1_IRQHandler+0x58>
				//for each username (16 characters long max for LCD) load it into this variable -> USER_INPUT_NAME[MAX_FP][16];
					EN_Flag = 1;
 8001036:	4b32      	ldr	r3, [pc, #200]	; (8001100 <LPUART1_IRQHandler+0x110>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
					AT_Flag = 0;
 800103c:	4b31      	ldr	r3, [pc, #196]	; (8001104 <LPUART1_IRQHandler+0x114>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
					index = 0;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

				}
				if (discordbuffer[0] == 0xEF && discordbuffer[1] == 0x03) { //wilson send 0xEF03 to indicate beginning of attendance?
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2bef      	cmp	r3, #239	; 0xef
 800104e:	d10c      	bne.n	800106a <LPUART1_IRQHandler+0x7a>
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d108      	bne.n	800106a <LPUART1_IRQHandler+0x7a>
					EN_Flag = 0;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <LPUART1_IRQHandler+0x110>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
					AT_Flag = 1;
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <LPUART1_IRQHandler+0x114>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
					index = 0;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
				}
				if (discordbuffer[0] == 0xEF && discordbuffer[1] == 0x04) { //wilson send 0xEF04 to indicate beginning of attendance?
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2bef      	cmp	r3, #239	; 0xef
 8001070:	d10f      	bne.n	8001092 <LPUART1_IRQHandler+0xa2>
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d10b      	bne.n	8001092 <LPUART1_IRQHandler+0xa2>
					EN_Flag = 0;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <LPUART1_IRQHandler+0x110>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
					AT_Flag = 0;
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <LPUART1_IRQHandler+0x114>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
					EX_Flag = 1;
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <LPUART1_IRQHandler+0x118>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
					index = 0;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
				}

			}
			if (charRecv == '\n') { //replace python null terminator with C null terminator
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b0a      	cmp	r3, #10
 8001096:	d126      	bne.n	80010e6 <LPUART1_IRQHandler+0xf6>
//				GPIOB->BSRR = GPIO_PIN_7;
				flag = 1;
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <LPUART1_IRQHandler+0x11c>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
				index--;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 80010a6:	6013      	str	r3, [r2, #0]
				discordbuffer[index] = '\0'; //place user name string into buffer to be written to LCD
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	54d1      	strb	r1, [r2, r3]
//			USER_INPUT_NAME[MAX_FP][index] = '\0';
				for (int i = 0; i < 16; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	e010      	b.n	80010da <LPUART1_IRQHandler+0xea>
					USER_INPUT_NAME[MEM_GLOBAL][i] = discordbuffer[i];
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <LPUART1_IRQHandler+0x120>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <LPUART1_IRQHandler+0x10c>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	7819      	ldrb	r1, [r3, #0]
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <LPUART1_IRQHandler+0x124>)
 80010c8:	0103      	lsls	r3, r0, #4
 80010ca:	441a      	add	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 16; i++) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3301      	adds	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	ddeb      	ble.n	80010b8 <LPUART1_IRQHandler+0xc8>
				}
				index = 0;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <LPUART1_IRQHandler+0x108>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
//		LPUART1->TDR = charRecv; // send received character
//		while (!(LPUART1->ISR & USART_ISR_TXE))
//			;  // wait for empty TX buffer
//		LPUART1->TDR = index; // send received character
		}
	}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40008000 	.word	0x40008000
 80010f8:	20000380 	.word	0x20000380
 80010fc:	20000384 	.word	0x20000384
 8001100:	20000488 	.word	0x20000488
 8001104:	20000490 	.word	0x20000490
 8001108:	20000494 	.word	0x20000494
 800110c:	20000484 	.word	0x20000484
 8001110:	20000034 	.word	0x20000034
 8001114:	20000038 	.word	0x20000038

08001118 <LPUART_FPID>:

//file IO shit to export data
	void LPUART_FPID() {		//send fingerprint ID to discord for processing
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
		if (FPIDrdy == 1) {
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <LPUART_FPID+0x40>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d113      	bne.n	800114e <LPUART_FPID+0x36>
			char FP_ID_string[16]; // 15 digits + null character
			itoa(FP_ID, FP_ID_string); // Convert the uint16_t to a string
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <LPUART_FPID+0x44>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	463a      	mov	r2, r7
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f97e 	bl	8000430 <itoa>

			LPUART_Print("Send");	  //header instruction
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <LPUART_FPID+0x48>)
 8001136:	f000 f9e7 	bl	8001508 <LPUART_Print>
			LPUART1->TDR = FP_ID_string; // Send the FP_ID as a string
 800113a:	463a      	mov	r2, r7
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <LPUART_FPID+0x4c>)
 800113e:	b292      	uxth	r2, r2
 8001140:	851a      	strh	r2, [r3, #40]	; 0x28
			LPUART_Print("\n");
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <LPUART_FPID+0x50>)
 8001144:	f000 f9e0 	bl	8001508 <LPUART_Print>
			FPIDrdy = 0;	//resets flag
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <LPUART_FPID+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
		}
	}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000048c 	.word	0x2000048c
 800115c:	20000000 	.word	0x20000000
 8001160:	080027cc 	.word	0x080027cc
 8001164:	40008000 	.word	0x40008000
 8001168:	080027d4 	.word	0x080027d4

0800116c <USART2_IRQHandler>:
//
//		GPIOB->BRR = GPIO_PIN_7;
//	}
//}

	void USART2_IRQHandler(void) { //[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
//	GPIOB->BSRR = GPIO_PIN_7;
		if (USART2->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <USART2_IRQHandler+0x58>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01b      	beq.n	80011b6 <USART2_IRQHandler+0x4a>
			uint8_t charRecv = USART2->RDR;    // read the received character
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <USART2_IRQHandler+0x58>)
 8001180:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001182:	b29b      	uxth	r3, r3
 8001184:	71fb      	strb	r3, [r7, #7]
			errorbuffer[index0] = charRecv; //buffer must be global variable
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <USART2_IRQHandler+0x5c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4910      	ldr	r1, [pc, #64]	; (80011cc <USART2_IRQHandler+0x60>)
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	54ca      	strb	r2, [r1, r3]
			index0++;                  //index must be global variable
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <USART2_IRQHandler+0x5c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <USART2_IRQHandler+0x5c>)
 8001198:	6013      	str	r3, [r2, #0]
			if (index0 >= ACK_LENGTH) {
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <USART2_IRQHandler+0x5c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <USART2_IRQHandler+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d306      	bcc.n	80011b6 <USART2_IRQHandler+0x4a>
				ConfirmationCode = errorbuffer[9];    //must be global variable
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <USART2_IRQHandler+0x60>)
 80011aa:	7a5a      	ldrb	r2, [r3, #9]
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <USART2_IRQHandler+0x68>)
 80011ae:	701a      	strb	r2, [r3, #0]
//			FingerprintErrorHandler();
//			errorbuffer[1+index0] = '\n';
				index0 = 0;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <USART2_IRQHandler+0x5c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
			}
		}
	}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40004400 	.word	0x40004400
 80011c8:	20000378 	.word	0x20000378
 80011cc:	2000035c 	.word	0x2000035c
 80011d0:	20000358 	.word	0x20000358
 80011d4:	2000037c 	.word	0x2000037c

080011d8 <SystemClock_Config>:
//		lcd_set_cursor_position(1, 0);
//		str_write("library");
//	}
//}

	void SystemClock_Config(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2244      	movs	r2, #68	; 0x44
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 f9bc 	bl	8002564 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011fe:	f000 fb31 	bl	8001864 <HAL_PWREx_ControlVoltageScaling>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x34>
				!= HAL_OK) {
			Error_Handler();
 8001208:	f000 f82c 	bl	8001264 <Error_Handler>
		}

		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800120c:	2310      	movs	r3, #16
 800120e:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC_OscInitStruct.MSICalibrationValue = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
		RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fb73 	bl	8001910 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x5c>
			Error_Handler();
 8001230:	f000 f818 	bl	8001264 <Error_Handler>
		}

		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	603b      	str	r3, [r7, #0]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0)
 8001248:	463b      	mov	r3, r7
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f000 ff79 	bl	8002144 <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x84>
				!= HAL_OK) {
			Error_Handler();
 8001258:	f000 f804 	bl	8001264 <Error_Handler>
		}
	}
 800125c:	bf00      	nop
 800125e:	3758      	adds	r7, #88	; 0x58
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <Error_Handler>:

	void Error_Handler(void) {
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop

		__disable_irq();
		while (1) {
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_MspInit+0x44>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_MspInit+0x44>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_MspInit+0x44>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x44>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x44>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6593      	str	r3, [r2, #88]	; 0x58
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x44>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f99a 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <LPUART_init>:
 */

#include "main.h"
#include "uart.h"

void LPUART_init() {
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <LPUART_init+0xcc>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a30      	ldr	r2, [pc, #192]	; (80013fc <LPUART_init+0xcc>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <LPUART_init+0xd0>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <LPUART_init+0xd0>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <LPUART_init+0xd0>)
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <LPUART_init+0xd0>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <LPUART_init+0xd4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a29      	ldr	r2, [pc, #164]	; (8001404 <LPUART_init+0xd4>)
 800135e:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8001362:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <LPUART_init+0xd4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a26      	ldr	r2, [pc, #152]	; (8001404 <LPUART_init+0xd4>)
 800136a:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 800136e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <LPUART_init+0xd4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a23      	ldr	r2, [pc, #140]	; (8001404 <LPUART_init+0xd4>)
 8001376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800137a:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <LPUART_init+0xd4>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <LPUART_init+0xd4>)
 8001382:	f023 030f 	bic.w	r3, r3, #15
 8001386:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <LPUART_init+0xd4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <LPUART_init+0xd4>)
 800138e:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8001392:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001396:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <LPUART_init+0xd4>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <LPUART_init+0xd4>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <LPUART_init+0xd8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a17      	ldr	r2, [pc, #92]	; (8001408 <LPUART_init+0xd8>)
 80013aa:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80013ae:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <LPUART_init+0xd8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <LPUART_init+0xd8>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <LPUART_init+0xd8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <LPUART_init+0xd8>)
 80013c2:	f043 030c 	orr.w	r3, r3, #12
 80013c6:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <LPUART_init+0xd8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <LPUART_init+0xd8>)
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <LPUART_init+0xd8>)
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <LPUART_init+0xd8>)
 80013da:	f023 0320 	bic.w	r3, r3, #32
 80013de:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <LPUART_init+0xd8>)
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <LPUART_init+0xdc>)
 80013e4:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <LPUART_init+0xe0>)
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80013ec:	b662      	cpsie	i
}
 80013ee:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40007000 	.word	0x40007000
 8001400:	40021000 	.word	0x40021000
 8001404:	48001800 	.word	0x48001800
 8001408:	40008000 	.word	0x40008000
 800140c:	0001a0aa 	.word	0x0001a0aa
 8001410:	e000e100 	.word	0xe000e100

08001414 <USART_init>:

void USART_init() {
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable GPIOA clock
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <USART_init+0xb8>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <USART_init+0xb8>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // enable USART2 clock
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <USART_init+0xb8>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	4a28      	ldr	r2, [pc, #160]	; (80014cc <USART_init+0xb8>)
 800142a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142e:	6593      	str	r3, [r2, #88]	; 0x58

	GPIOA->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2
 8001430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800143a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800143e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE3); //clear bits
	GPIOA->MODER |= (GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1
 8001440:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800144a:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 800144e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos)
 8001450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	041b      	lsls	r3, r3, #16
 800145e:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL1_Pos)
			| (0x000F << GPIO_AFRL_AFSEL2_Pos)
			| (0x000F << GPIO_AFRL_AFSEL3_Pos));
	GPIOA->AFR[0] |= ((0x0007 << GPIO_AFRL_AFSEL0_Pos)
 8001460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800146a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800146e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001472:	6213      	str	r3, [r2, #32]
			| (0x0007 << GPIO_AFRL_AFSEL1_Pos)
			| (0x0007 << GPIO_AFRL_AFSEL2_Pos)
			| (0x0007 << GPIO_AFRL_AFSEL3_Pos));

	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <USART_init+0xbc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <USART_init+0xbc>)
 800147a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800147e:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= USART_CR1_UE;                   // enable USART2
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <USART_init+0xbc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <USART_init+0xbc>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <USART_init+0xbc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <USART_init+0xbc>)
 8001492:	f043 030c 	orr.w	r3, r3, #12
 8001496:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= USART_CR1_RXNEIE;        // enable USART2 recv interrupt
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <USART_init+0xbc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <USART_init+0xbc>)
 800149e:	f043 0320 	orr.w	r3, r3, #32
 80014a2:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <USART_init+0xbc>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <USART_init+0xbc>)
 80014aa:	f023 0320 	bic.w	r3, r3, #32
 80014ae:	61d3      	str	r3, [r2, #28]
	USART2->BRR = 69;                   // Set the correct baud rate
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <USART_init+0xbc>)
 80014b2:	2245      	movs	r2, #69	; 0x45
 80014b4:	60da      	str	r2, [r3, #12]
	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));   // enable USART2 ISR
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <USART_init+0xc0>)
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80014bc:	b662      	cpsie	i
}
 80014be:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40004400 	.word	0x40004400
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <LPUART_Print_Char>:
		}
		USART2->TDR = c[i];
	}
}

void LPUART_Print_Char(char ch) {
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	while (!(LPUART1->ISR & USART_ISR_TXE))
 80014e2:	bf00      	nop
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <LPUART_Print_Char+0x2c>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f9      	beq.n	80014e4 <LPUART_Print_Char+0xc>
		;   // wait for empty transmit buffer
	LPUART1->TDR = ch;                        // send the character
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <LPUART_Print_Char+0x2c>)
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	b292      	uxth	r2, r2
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40008000 	.word	0x40008000

08001508 <LPUART_Print>:

void LPUART_Print(const char *message) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 8001514:	e009      	b.n	800152a <LPUART_Print+0x22>
		LPUART_Print_Char(message[iStrIdx]);
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffda 	bl	80014d8 <LPUART_Print_Char>
		iStrIdx++;
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	3301      	adds	r3, #1
 8001528:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ef      	bne.n	8001516 <LPUART_Print+0xe>
	}
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001544:	f7ff fee2 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <LoopForever+0x6>)
  ldr r1, =_edata
 800154a:	490d      	ldr	r1, [pc, #52]	; (8001580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <LoopForever+0xe>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001560:	4c0a      	ldr	r4, [pc, #40]	; (800158c <LoopForever+0x16>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f000 ffd5 	bl	800251c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001572:	f7ff fc95 	bl	8000ea0 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001578:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001584:	08002820 	.word	0x08002820
  ldr r2, =_sbss
 8001588:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800158c:	2000049c 	.word	0x2000049c

08001590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_2_IRQHandler>

08001592 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f91f 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a2:	200f      	movs	r0, #15
 80015a4:	f000 f80e 	bl	80015c4 <HAL_InitTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	e001      	b.n	80015b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b4:	f7ff fe5c 	bl	8001270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_InitTick+0x6c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d023      	beq.n	8001620 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_InitTick+0x70>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_InitTick+0x6c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f91d 	bl	800182e <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10f      	bne.n	800161a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d809      	bhi.n	8001614 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f8f5 	bl	80017f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_InitTick+0x74>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e007      	b.n	8001624 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e004      	b.n	8001624 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e001      	b.n	8001624 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000014 	.word	0x20000014
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000010 	.word	0x20000010

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000014 	.word	0x20000014
 8001660:	20000498 	.word	0x20000498

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000498 	.word	0x20000498

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff8e 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff47 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff5c 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ff8e 	bl	8001734 <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff5d 	bl	80016e0 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffb0 	bl	800179c <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_PWREx_GetVoltageRange+0x18>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40007000 	.word	0x40007000

08001864 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001872:	d130      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800187c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001880:	d038      	beq.n	80018f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800188a:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2232      	movs	r2, #50	; 0x32
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9b      	lsrs	r3, r3, #18
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a8:	e002      	b.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018bc:	d102      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f2      	bne.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d0:	d110      	bne.n	80018f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e00f      	b.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e2:	d007      	beq.n	80018f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ec:	4a05      	ldr	r2, [pc, #20]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40007000 	.word	0x40007000
 8001908:	2000000c 	.word	0x2000000c
 800190c:	431bde83 	.word	0x431bde83

08001910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f000 bc08 	b.w	8002134 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001924:	4b96      	ldr	r3, [pc, #600]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192e:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80e4 	beq.w	8001b0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_RCC_OscConfig+0x4c>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	f040 808b 	bne.w	8001a6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 8087 	bne.w	8001a6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195c:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x64>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e3df      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_RCC_OscConfig+0x7e>
 8001984:	4b7e      	ldr	r3, [pc, #504]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198c:	e005      	b.n	800199a <HAL_RCC_OscConfig+0x8a>
 800198e:	4b7c      	ldr	r3, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	4293      	cmp	r3, r2
 800199c:	d223      	bcs.n	80019e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd5a 	bl	800245c <RCC_SetFlashLatencyFromMSIRange>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e3c0      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b2:	4b73      	ldr	r3, [pc, #460]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a72      	ldr	r2, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019b8:	f043 0308 	orr.w	r3, r3, #8
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	496d      	ldr	r1, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d0:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	4968      	ldr	r1, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e025      	b.n	8001a32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e6:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4960      	ldr	r1, [pc, #384]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a04:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	495b      	ldr	r1, [pc, #364]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fd1a 	bl	800245c <RCC_SetFlashLatencyFromMSIRange>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e380      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a32:	f000 fc87 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	4950      	ldr	r1, [pc, #320]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	4a4e      	ldr	r2, [pc, #312]	; (8001b88 <HAL_RCC_OscConfig+0x278>)
 8001a50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a52:	4b4e      	ldr	r3, [pc, #312]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fdb4 	bl	80015c4 <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d052      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	e364      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d032      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a42      	ldr	r2, [pc, #264]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fdf1 	bl	8001664 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a86:	f7ff fded 	bl	8001664 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e34d      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a98:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a35      	ldr	r2, [pc, #212]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4930      	ldr	r1, [pc, #192]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	492b      	ldr	r1, [pc, #172]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
 8001ad6:	e01a      	b.n	8001b0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fdbe 	bl	8001664 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aec:	f7ff fdba 	bl	8001664 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e31a      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x1dc>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d073      	beq.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_OscConfig+0x21c>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d10b      	bne.n	8001b44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d063      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d15f      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e2f7      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d106      	bne.n	8001b5c <HAL_RCC_OscConfig+0x24c>
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e025      	b.n	8001ba8 <HAL_RCC_OscConfig+0x298>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d114      	bne.n	8001b90 <HAL_RCC_OscConfig+0x280>
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a02      	ldr	r2, [pc, #8]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e013      	b.n	8001ba8 <HAL_RCC_OscConfig+0x298>
 8001b80:	40021000 	.word	0x40021000
 8001b84:	080027d8 	.word	0x080027d8
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	20000010 	.word	0x20000010
 8001b90:	4ba0      	ldr	r3, [pc, #640]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a9f      	ldr	r2, [pc, #636]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b9d      	ldr	r3, [pc, #628]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a9c      	ldr	r2, [pc, #624]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fd58 	bl	8001664 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fd54 	bl	8001664 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e2b4      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bca:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2a8>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fd44 	bl	8001664 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fd40 	bl	8001664 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e2a0      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf2:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x2d0>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d060      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x310>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d119      	bne.n	8001c4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d116      	bne.n	8001c4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x328>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e27d      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	4973      	ldr	r1, [pc, #460]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4c:	e040      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d023      	beq.n	8001c9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c56:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6e      	ldr	r2, [pc, #440]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fcff 	bl	8001664 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fcfb 	bl	8001664 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e25b      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	495f      	ldr	r1, [pc, #380]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e018      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff fcdb 	bl	8001664 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fcd7 	bl	8001664 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e237      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d03c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cea:	4a4a      	ldr	r2, [pc, #296]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fcb6 	bl	8001664 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fcb2 	bl	8001664 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e212      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ef      	beq.n	8001cfc <HAL_RCC_OscConfig+0x3ec>
 8001d1c:	e01b      	b.n	8001d56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d24:	4a3b      	ldr	r2, [pc, #236]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fc99 	bl	8001664 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff fc95 	bl	8001664 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1f5      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ef      	bne.n	8001d36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80a6 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10d      	bne.n	8001d90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_RCC_OscConfig+0x508>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d118      	bne.n	8001dce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCC_OscConfig+0x508>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_RCC_OscConfig+0x508>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fc5c 	bl	8001664 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db0:	f7ff fc58 	bl	8001664 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1b8      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_RCC_OscConfig+0x508>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4d8>
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de6:	e029      	b.n	8001e3c <HAL_RCC_OscConfig+0x52c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d115      	bne.n	8001e1c <HAL_RCC_OscConfig+0x50c>
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	e014      	b.n	8001e3c <HAL_RCC_OscConfig+0x52c>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	4b9d      	ldr	r3, [pc, #628]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	4a9c      	ldr	r2, [pc, #624]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2c:	4b99      	ldr	r3, [pc, #612]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a98      	ldr	r2, [pc, #608]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d016      	beq.n	8001e72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e44:	f7ff fc0e 	bl	8001664 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fc0a 	bl	8001664 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e168      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e62:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ed      	beq.n	8001e4c <HAL_RCC_OscConfig+0x53c>
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7ff fbf7 	bl	8001664 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff fbf3 	bl	8001664 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e151      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e90:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ed      	bne.n	8001e7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	4a7a      	ldr	r2, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01c      	beq.n	8001efe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec4:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eca:	4a72      	ldr	r2, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fbc6 	bl	8001664 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001edc:	f7ff fbc2 	bl	8001664 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e122      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eee:	4b69      	ldr	r3, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ef      	beq.n	8001edc <HAL_RCC_OscConfig+0x5cc>
 8001efc:	e01b      	b.n	8001f36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001efe:	4b65      	ldr	r3, [pc, #404]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f04:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fba9 	bl	8001664 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f16:	f7ff fba5 	bl	8001664 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e105      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f28:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ef      	bne.n	8001f16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80f9 	beq.w	8002132 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	f040 80cf 	bne.w	80020e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f4a:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d12c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d123      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d113      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d071      	beq.n	800209c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d068      	beq.n	8002090 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fca:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0ac      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2d      	ldr	r2, [pc, #180]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe6:	f7ff fb3d 	bl	8001664 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff fb39 	bl	8001664 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e099      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x788>)
 8002012:	4013      	ands	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800201c:	3a01      	subs	r2, #1
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	4311      	orrs	r1, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002026:	0212      	lsls	r2, r2, #8
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800202e:	0852      	lsrs	r2, r2, #1
 8002030:	3a01      	subs	r2, #1
 8002032:	0552      	lsls	r2, r2, #21
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800203a:	0852      	lsrs	r2, r2, #1
 800203c:	3a01      	subs	r2, #1
 800203e:	0652      	lsls	r2, r2, #25
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002046:	06d2      	lsls	r2, r2, #27
 8002048:	430a      	orrs	r2, r1
 800204a:	4912      	ldr	r1, [pc, #72]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002068:	f7ff fafc 	bl	8001664 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff faf8 	bl	8001664 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e058      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_OscConfig+0x784>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208e:	e050      	b.n	8002132 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e04f      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
 8002094:	40021000 	.word	0x40021000
 8002098:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d144      	bne.n	8002132 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a23      	ldr	r2, [pc, #140]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 80020ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b4:	4b21      	ldr	r3, [pc, #132]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a20      	ldr	r2, [pc, #128]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 80020ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c0:	f7ff fad0 	bl	8001664 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff facc 	bl	8001664 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e02c      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x7b8>
 80020e6:	e024      	b.n	8002132 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d01f      	beq.n	800212e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 80020f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff fab3 	bl	8001664 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff faaf 	bl	8001664 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e00f      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4905      	ldr	r1, [pc, #20]	; (800213c <HAL_RCC_OscConfig+0x82c>)
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002128:	4013      	ands	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
 800212c:	e001      	b.n	8002132 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	feeefffc 	.word	0xfeeefffc

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0e7      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b75      	ldr	r3, [pc, #468]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d910      	bls.n	8002188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b72      	ldr	r3, [pc, #456]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4970      	ldr	r1, [pc, #448]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cf      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d010      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d908      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4960      	ldr	r1, [pc, #384]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d04c      	beq.n	800225c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d121      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0a6      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	4b54      	ldr	r3, [pc, #336]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d115      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e09a      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fa:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e08e      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e086      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4943      	ldr	r1, [pc, #268]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7ff fa1a 	bl	8001664 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff fa16 	bl	8001664 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e06e      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002274:	429a      	cmp	r2, r3
 8002276:	d208      	bcs.n	800228a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	492b      	ldr	r1, [pc, #172]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d210      	bcs.n	80022ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 0207 	bic.w	r2, r3, #7
 80022a0:	4923      	ldr	r1, [pc, #140]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e036      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4918      	ldr	r1, [pc, #96]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4910      	ldr	r1, [pc, #64]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022f8:	f000 f824 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	490b      	ldr	r1, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x1f4>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1fc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff f951 	bl	80015c4 <HAL_InitTick>
 8002322:	4603      	mov	r3, r0
 8002324:	72fb      	strb	r3, [r7, #11]

  return status;
 8002326:	7afb      	ldrb	r3, [r7, #11]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	080027d8 	.word	0x080027d8
 800233c:	2000000c 	.word	0x2000000c
 8002340:	20000010 	.word	0x20000010

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800235c:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x34>
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d121      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d11e      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e005      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023a0:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_RCC_GetSysClockFreq+0x110>)
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e004      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d134      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0xa6>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d003      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0xac>
 80023e8:	e005      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ec:	617b      	str	r3, [r7, #20]
      break;
 80023ee:	e005      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f2:	617b      	str	r3, [r7, #20]
      break;
 80023f4:	e002      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	617b      	str	r3, [r7, #20]
      break;
 80023fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	3301      	adds	r3, #1
 8002408:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	0e5b      	lsrs	r3, r3, #25
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	3301      	adds	r3, #1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800243c:	69bb      	ldr	r3, [r7, #24]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	080027e8 	.word	0x080027e8
 8002454:	00f42400 	.word	0x00f42400
 8002458:	007a1200 	.word	0x007a1200

0800245c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002474:	f7ff f9e8 	bl	8001848 <HAL_PWREx_GetVoltageRange>
 8002478:	6178      	str	r0, [r7, #20]
 800247a:	e014      	b.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	4a24      	ldr	r2, [pc, #144]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	6593      	str	r3, [r2, #88]	; 0x58
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002494:	f7ff f9d8 	bl	8001848 <HAL_PWREx_GetVoltageRange>
 8002498:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ac:	d10b      	bne.n	80024c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d919      	bls.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2ba0      	cmp	r3, #160	; 0xa0
 80024b8:	d902      	bls.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ba:	2302      	movs	r3, #2
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	e013      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c0:	2301      	movs	r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	e010      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d902      	bls.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024cc:	2303      	movs	r3, #3
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e00a      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d102      	bne.n	80024de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024d8:	2302      	movs	r3, #2
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	e004      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b70      	cmp	r3, #112	; 0x70
 80024e2:	d101      	bne.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e4:	2301      	movs	r3, #1
 80024e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	4909      	ldr	r1, [pc, #36]	; (8002518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	40022000 	.word	0x40022000

0800251c <__libc_init_array>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	4d0d      	ldr	r5, [pc, #52]	; (8002554 <__libc_init_array+0x38>)
 8002520:	4c0d      	ldr	r4, [pc, #52]	; (8002558 <__libc_init_array+0x3c>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	2600      	movs	r6, #0
 8002528:	42a6      	cmp	r6, r4
 800252a:	d109      	bne.n	8002540 <__libc_init_array+0x24>
 800252c:	4d0b      	ldr	r5, [pc, #44]	; (800255c <__libc_init_array+0x40>)
 800252e:	4c0c      	ldr	r4, [pc, #48]	; (8002560 <__libc_init_array+0x44>)
 8002530:	f000 f820 	bl	8002574 <_init>
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	2600      	movs	r6, #0
 800253a:	42a6      	cmp	r6, r4
 800253c:	d105      	bne.n	800254a <__libc_init_array+0x2e>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	f855 3b04 	ldr.w	r3, [r5], #4
 8002544:	4798      	blx	r3
 8002546:	3601      	adds	r6, #1
 8002548:	e7ee      	b.n	8002528 <__libc_init_array+0xc>
 800254a:	f855 3b04 	ldr.w	r3, [r5], #4
 800254e:	4798      	blx	r3
 8002550:	3601      	adds	r6, #1
 8002552:	e7f2      	b.n	800253a <__libc_init_array+0x1e>
 8002554:	08002818 	.word	0x08002818
 8002558:	08002818 	.word	0x08002818
 800255c:	08002818 	.word	0x08002818
 8002560:	0800281c 	.word	0x0800281c

08002564 <memset>:
 8002564:	4402      	add	r2, r0
 8002566:	4603      	mov	r3, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	d100      	bne.n	800256e <memset+0xa>
 800256c:	4770      	bx	lr
 800256e:	f803 1b01 	strb.w	r1, [r3], #1
 8002572:	e7f9      	b.n	8002568 <memset+0x4>

08002574 <_init>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr

08002580 <_fini>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr
