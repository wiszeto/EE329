
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000159c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001790  08001790  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001790  08001790  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001790  08001790  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001790  08001790  00011790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001794  08001794  00011794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  080017a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080017a4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f82  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001106  00000000  00000000  00024fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  000260c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000500  00000000  00000000  00026670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027118  00000000  00000000  00026b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b41  00000000  00000000  0004dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee516  00000000  00000000  000547c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142cdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000146c  00000000  00000000  00142d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001730 	.word	0x08001730

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001730 	.word	0x08001730

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000000 	.word	0x20000000
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <main>:
void SystemClock_Config(void);
#define BUFFER_SIZE 256
static char buffer[BUFFER_SIZE];
static int index = 0;
int flag = 0;
int main(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

	HAL_Init();
 800024c:	f000 fa7f 	bl	800074e <HAL_Init>
	SystemClock_Config();
 8000250:	f000 f8ac 	bl	80003ac <SystemClock_Config>
	LPUART_init();
 8000254:	f000 f956 	bl	8000504 <LPUART_init>
	//LCD_init();
	//command(0x0C);

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <main+0x78>)
 800025a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025c:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <main+0x78>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <main+0x7c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <main+0x7c>)
 800026a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800026e:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <main+0x7c>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <main+0x7c>)
 8000276:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800027a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <main+0x7c>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <main+0x7c>)
 8000282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000286:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <main+0x78>)
 800028a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028c:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <main+0x78>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <main+0x80>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <main+0x80>)
 800029a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800029e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <main+0x80>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <main+0x80>)
 80002a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002aa:	6013      	str	r3, [r2, #0]

	delay_us(100);
 80002ac:	2064      	movs	r0, #100	; 0x64
 80002ae:	f7ff ff9d 	bl	80001ec <delay_us>
	USART_init();
 80002b2:	f000 f999 	bl	80005e8 <USART_init>
	USART_print("Hello");
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <main+0x84>)
 80002b8:	f000 f9f8 	bl	80006ac <USART_print>
	while (1) {
 80002bc:	e7fe      	b.n	80002bc <main+0x74>
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	48000800 	.word	0x48000800
 80002c8:	48000400 	.word	0x48000400
 80002cc:	08001748 	.word	0x08001748

080002d0 <LPUART1_IRQHandler>:
//		GPIOB->BRR = GPIO_PIN_7;

	}
}

void LPUART1_IRQHandler(void) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 80002d6:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <LPUART1_IRQHandler+0x84>)
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d031      	beq.n	8000346 <LPUART1_IRQHandler+0x76>
		GPIOB->BSRR = GPIO_PIN_7;
 80002e2:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <LPUART1_IRQHandler+0x88>)
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	619a      	str	r2, [r3, #24]

		char charRecv = LPUART1->RDR;  // read the received character
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <LPUART1_IRQHandler+0x84>)
 80002ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	71fb      	strb	r3, [r7, #7]
		buffer[index] = charRecv;
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <LPUART1_IRQHandler+0x8c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	491a      	ldr	r1, [pc, #104]	; (8000360 <LPUART1_IRQHandler+0x90>)
 80002f6:	79fa      	ldrb	r2, [r7, #7]
 80002f8:	54ca      	strb	r2, [r1, r3]
		index++;
 80002fa:	4b18      	ldr	r3, [pc, #96]	; (800035c <LPUART1_IRQHandler+0x8c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3301      	adds	r3, #1
 8000300:	4a16      	ldr	r2, [pc, #88]	; (800035c <LPUART1_IRQHandler+0x8c>)
 8000302:	6013      	str	r3, [r2, #0]

		if (charRecv == '\n') {
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b0a      	cmp	r3, #10
 8000308:	d10f      	bne.n	800032a <LPUART1_IRQHandler+0x5a>
			flag = 1;
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <LPUART1_IRQHandler+0x94>)
 800030c:	2201      	movs	r2, #1
 800030e:	601a      	str	r2, [r3, #0]
			index--;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <LPUART1_IRQHandler+0x8c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3b01      	subs	r3, #1
 8000316:	4a11      	ldr	r2, [pc, #68]	; (800035c <LPUART1_IRQHandler+0x8c>)
 8000318:	6013      	str	r3, [r2, #0]
			buffer[index] = '\0';
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <LPUART1_IRQHandler+0x8c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a10      	ldr	r2, [pc, #64]	; (8000360 <LPUART1_IRQHandler+0x90>)
 8000320:	2100      	movs	r1, #0
 8000322:	54d1      	strb	r1, [r2, r3]
			index = 0;
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <LPUART1_IRQHandler+0x8c>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
		}
		while (!(LPUART1->ISR & USART_ISR_TXE))
 800032a:	bf00      	nop
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <LPUART1_IRQHandler+0x84>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <LPUART1_IRQHandler+0x5c>
			;  // wait for empty TX buffer
		LPUART1->TDR = charRecv; // send received character
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <LPUART1_IRQHandler+0x84>)
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	b292      	uxth	r2, r2
 800033e:	851a      	strh	r2, [r3, #40]	; 0x28

		GPIOB->BRR = GPIO_PIN_7;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <LPUART1_IRQHandler+0x88>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40008000 	.word	0x40008000
 8000358:	48000400 	.word	0x48000400
 800035c:	20000128 	.word	0x20000128
 8000360:	20000028 	.word	0x20000028
 8000364:	2000012c 	.word	0x2000012c

08000368 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0

  if (USART2->ISR & USART_ISR_RXNE){
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <USART2_IRQHandler+0x40>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	f003 0320 	and.w	r3, r3, #32
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00f      	beq.n	800039a <USART2_IRQHandler+0x32>
    char character = USART2->RDR;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <USART2_IRQHandler+0x40>)
 800037c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800037e:	b29b      	uxth	r3, r3
 8000380:	71fb      	strb	r3, [r7, #7]
    switch (character){
        default:
            while (!(USART2->ISR & USART_ISR_TXE)){}
 8000382:	bf00      	nop
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <USART2_IRQHandler+0x40>)
 8000386:	69db      	ldr	r3, [r3, #28]
 8000388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0f9      	beq.n	8000384 <USART2_IRQHandler+0x1c>
            USART2->TDR = character;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <USART2_IRQHandler+0x40>)
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	b292      	uxth	r2, r2
 8000396:	851a      	strh	r2, [r3, #40]	; 0x28
            break;
 8000398:	e000      	b.n	800039c <USART2_IRQHandler+0x34>
    }
  }
 800039a:	bf00      	nop
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40004400 	.word	0x40004400

080003ac <SystemClock_Config>:

void SystemClock_Config(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b096      	sub	sp, #88	; 0x58
 80003b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2244      	movs	r2, #68	; 0x44
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 f9b0 	bl	8001720 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003c0:	463b      	mov	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80003ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003d2:	f000 fb25 	bl	8000a20 <HAL_PWREx_ControlVoltageScaling>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80003dc:	f000 f82c 	bl	8000438 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003e0:	2310      	movs	r3, #16
 80003e2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003e4:	2301      	movs	r3, #1
 80003e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003ec:	2360      	movs	r3, #96	; 0x60
 80003ee:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fb67 	bl	8000acc <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x5c>
		Error_Handler();
 8000404:	f000 f818 	bl	8000438 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000408:	230f      	movs	r3, #15
 800040a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800041c:	463b      	mov	r3, r7
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f000 ff6d 	bl	8001300 <HAL_RCC_ClockConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x84>
		Error_Handler();
 800042c:	f000 f804 	bl	8000438 <Error_Handler>
	}
}
 8000430:	bf00      	nop
 8000432:	3758      	adds	r7, #88	; 0x58
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x44>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6613      	str	r3, [r2, #96]	; 0x60
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <HAL_MspInit+0x44>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	6593      	str	r3, [r2, #88]	; 0x58
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d8:	f000 f98e 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <SystemInit+0x20>)
 80004e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ea:	4a05      	ldr	r2, [pc, #20]	; (8000500 <SystemInit+0x20>)
 80004ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <LPUART_init>:

#include "main.h"
#include "uart.h"


void LPUART_init() {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 8000508:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <LPUART_init+0xcc>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a30      	ldr	r2, [pc, #192]	; (80005d0 <LPUART_init+0xcc>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000514:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <LPUART_init+0xd0>)
 8000516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000518:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <LPUART_init+0xd0>)
 800051a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800051e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000520:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <LPUART_init+0xd0>)
 8000522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000524:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <LPUART_init+0xd0>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 800052c:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <LPUART_init+0xd4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <LPUART_init+0xd4>)
 8000532:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8000536:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <LPUART_init+0xd4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a26      	ldr	r2, [pc, #152]	; (80005d8 <LPUART_init+0xd4>)
 800053e:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 8000542:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <LPUART_init+0xd4>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <LPUART_init+0xd4>)
 800054a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800054e:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <LPUART_init+0xd4>)
 8000552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <LPUART_init+0xd4>)
 8000556:	f023 030f 	bic.w	r3, r3, #15
 800055a:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <LPUART_init+0xd4>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <LPUART_init+0xd4>)
 8000562:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800056a:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <LPUART_init+0xd4>)
 800056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <LPUART_init+0xd4>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <LPUART_init+0xd8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a17      	ldr	r2, [pc, #92]	; (80005dc <LPUART_init+0xd8>)
 800057e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000582:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <LPUART_init+0xd8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <LPUART_init+0xd8>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <LPUART_init+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a11      	ldr	r2, [pc, #68]	; (80005dc <LPUART_init+0xd8>)
 8000596:	f043 030c 	orr.w	r3, r3, #12
 800059a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <LPUART_init+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <LPUART_init+0xd8>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <LPUART_init+0xd8>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <LPUART_init+0xd8>)
 80005ae:	f023 0320 	bic.w	r3, r3, #32
 80005b2:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <LPUART_init+0xd8>)
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LPUART_init+0xdc>)
 80005b8:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <LPUART_init+0xe0>)
 80005bc:	2240      	movs	r2, #64	; 0x40
 80005be:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80005c0:	b662      	cpsie	i
}
 80005c2:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40007000 	.word	0x40007000
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48001800 	.word	0x48001800
 80005dc:	40008000 	.word	0x40008000
 80005e0:	0001a0aa 	.word	0x0001a0aa
 80005e4:	e000e100 	.word	0xe000e100

080005e8 <USART_init>:

void USART_init() {
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable GPIOA clock
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <USART_init+0xb8>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f0:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <USART_init+0xb8>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // enable USART2 clock
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <USART_init+0xb8>)
 80005fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <USART_init+0xb8>)
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000602:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOA->MODER &= ~(GPIO_MODER_MODE0 |GPIO_MODER_MODE1 |GPIO_MODER_MODE2 | GPIO_MODER_MODE3); //clear bits
 8000604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000612:	6013      	str	r3, [r2, #0]
    	GPIOA->MODER |= (GPIO_MODER_MODE0_1 |GPIO_MODER_MODE1_1 |GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061e:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000622:	6013      	str	r3, [r2, #0]
    	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos) |(0x000F << GPIO_AFRL_AFSEL1_Pos) |(0x000F << GPIO_AFRL_AFSEL2_Pos) | (0x000F << GPIO_AFRL_AFSEL3_Pos));
 8000624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000628:	6a1b      	ldr	r3, [r3, #32]
 800062a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800062e:	0c1b      	lsrs	r3, r3, #16
 8000630:	041b      	lsls	r3, r3, #16
 8000632:	6213      	str	r3, [r2, #32]
    	GPIOA->AFR[0] |= ((0x0007 << GPIO_AFRL_AFSEL0_Pos) |(0x0007 << GPIO_AFRL_AFSEL1_Pos) |(0x0007 << GPIO_AFRL_AFSEL2_Pos) | (0x0007 << GPIO_AFRL_AFSEL3_Pos));
 8000634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000638:	6a1b      	ldr	r3, [r3, #32]
 800063a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000642:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000646:	6213      	str	r3, [r2, #32]


    USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <USART_init+0xbc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <USART_init+0xbc>)
 800064e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000652:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_UE;                   // enable USART2
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <USART_init+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <USART_init+0xbc>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <USART_init+0xbc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <USART_init+0xbc>)
 8000666:	f043 030c 	orr.w	r3, r3, #12
 800066a:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_RXNEIE;        // enable USART2 recv interrupt
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <USART_init+0xbc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <USART_init+0xbc>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	6013      	str	r3, [r2, #0]
    USART2->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <USART_init+0xbc>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <USART_init+0xbc>)
 800067e:	f023 0320 	bic.w	r3, r3, #32
 8000682:	61d3      	str	r3, [r2, #28]
    USART2->BRR = 34;                   // Set the correct baud rate
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <USART_init+0xbc>)
 8000686:	2222      	movs	r2, #34	; 0x22
 8000688:	60da      	str	r2, [r3, #12]
    NVIC->ISER[0] = (1 << (USART2_IRQn & 0x1F));   // enable USART2 ISR
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <USART_init+0xc0>)
 800068c:	2240      	movs	r2, #64	; 0x40
 800068e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000690:	b662      	cpsie	i
}
 8000692:	bf00      	nop
    __enable_irq();                          // enable global interrupts
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40004400 	.word	0x40004400
 80006a8:	e000e100 	.word	0xe000e100

080006ac <USART_print>:

void USART_print(char *c){
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for (i = 0; c[i] != '\0'; i++){
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e010      	b.n	80006dc <USART_print+0x30>
        while (!(USART2->ISR & USART_ISR_TXE)){}
 80006ba:	bf00      	nop
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <USART_print+0x4c>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <USART_print+0x10>
        USART2->TDR = c[i];
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <USART_print+0x4c>)
 80006d2:	b292      	uxth	r2, r2
 80006d4:	851a      	strh	r2, [r3, #40]	; 0x28
    for (i = 0; c[i] != '\0'; i++){
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	3301      	adds	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <USART_print+0xe>
    }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40004400 	.word	0x40004400

080006fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000700:	f7ff feee 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	; (800073c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072a:	f000 ffd5 	bl	80016d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072e:	f7ff fd8b 	bl	8000248 <main>

08000732 <LoopForever>:

LoopForever:
    b LoopForever
 8000732:	e7fe      	b.n	8000732 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000734:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000740:	08001798 	.word	0x08001798
  ldr r2, =_sbss
 8000744:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000748:	20000134 	.word	0x20000134

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>

0800074e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000754:	2300      	movs	r3, #0
 8000756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f91f 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800075e:	200f      	movs	r0, #15
 8000760:	f000 f80e 	bl	8000780 <HAL_InitTick>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e001      	b.n	8000774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000770:	f7ff fe68 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000774:	79fb      	ldrb	r3, [r7, #7]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_InitTick+0x6c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d023      	beq.n	80007dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_InitTick+0x70>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_InitTick+0x6c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f91d 	bl	80009ea <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10f      	bne.n	80007d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d809      	bhi.n	80007d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f8f5 	bl	80009b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_InitTick+0x74>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	e007      	b.n	80007e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	e004      	b.n	80007e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e001      	b.n	80007e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000130 	.word	0x20000130

08000820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000130 	.word	0x20000130

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ff8e 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff47 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff5c 	bl	8000880 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff8e 	bl	80008f0 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5d 	bl	800089c <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ffb0 	bl	8000958 <SysTick_Config>
 80009f8:	4603      	mov	r3, r0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40007000 	.word	0x40007000

08000a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a2e:	d130      	bne.n	8000a92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a3c:	d038      	beq.n	8000ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2232      	movs	r2, #50	; 0x32
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	0c9b      	lsrs	r3, r3, #18
 8000a60:	3301      	adds	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a64:	e002      	b.n	8000a6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a78:	d102      	bne.n	8000a80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f2      	bne.n	8000a66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a8c:	d110      	bne.n	8000ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e00f      	b.n	8000ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a9e:	d007      	beq.n	8000ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aa8:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40007000 	.word	0x40007000
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	431bde83 	.word	0x431bde83

08000acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	f000 bc08 	b.w	80012f0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ae0:	4b96      	ldr	r3, [pc, #600]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000aea:	4b94      	ldr	r3, [pc, #592]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f000 80e4 	beq.w	8000cca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d007      	beq.n	8000b18 <HAL_RCC_OscConfig+0x4c>
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2b0c      	cmp	r3, #12
 8000b0c:	f040 808b 	bne.w	8000c26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	f040 8087 	bne.w	8000c26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b18:	4b88      	ldr	r3, [pc, #544]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d005      	beq.n	8000b30 <HAL_RCC_OscConfig+0x64>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e3df      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a1a      	ldr	r2, [r3, #32]
 8000b34:	4b81      	ldr	r3, [pc, #516]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <HAL_RCC_OscConfig+0x7e>
 8000b40:	4b7e      	ldr	r3, [pc, #504]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b48:	e005      	b.n	8000b56 <HAL_RCC_OscConfig+0x8a>
 8000b4a:	4b7c      	ldr	r3, [pc, #496]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d223      	bcs.n	8000ba2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fd5a 	bl	8001618 <RCC_SetFlashLatencyFromMSIRange>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e3c0      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b6e:	4b73      	ldr	r3, [pc, #460]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a72      	ldr	r2, [pc, #456]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	4b70      	ldr	r3, [pc, #448]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	496d      	ldr	r1, [pc, #436]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b8c:	4b6b      	ldr	r3, [pc, #428]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	4968      	ldr	r1, [pc, #416]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
 8000ba0:	e025      	b.n	8000bee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ba2:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a65      	ldr	r2, [pc, #404]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b63      	ldr	r3, [pc, #396]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	4960      	ldr	r1, [pc, #384]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	495b      	ldr	r1, [pc, #364]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d109      	bne.n	8000bee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fd1a 	bl	8001618 <RCC_SetFlashLatencyFromMSIRange>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e380      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000bee:	f000 fc87 	bl	8001500 <HAL_RCC_GetSysClockFreq>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	4b51      	ldr	r3, [pc, #324]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	091b      	lsrs	r3, r3, #4
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	4950      	ldr	r1, [pc, #320]	; (8000d40 <HAL_RCC_OscConfig+0x274>)
 8000c00:	5ccb      	ldrb	r3, [r1, r3]
 8000c02:	f003 031f 	and.w	r3, r3, #31
 8000c06:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0a:	4a4e      	ldr	r2, [pc, #312]	; (8000d44 <HAL_RCC_OscConfig+0x278>)
 8000c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c0e:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fdb4 	bl	8000780 <HAL_InitTick>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d052      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	e364      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d032      	beq.n	8000c94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c2e:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a42      	ldr	r2, [pc, #264]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fdf1 	bl	8000820 <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c40:	e008      	b.n	8000c54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c42:	f7ff fded 	bl	8000820 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e34d      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c54:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f0      	beq.n	8000c42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c60:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a35      	ldr	r2, [pc, #212]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	4930      	ldr	r1, [pc, #192]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	492b      	ldr	r1, [pc, #172]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	604b      	str	r3, [r1, #4]
 8000c92:	e01a      	b.n	8000cca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000c9a:	f023 0301 	bic.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fdbe 	bl	8000820 <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ca8:	f7ff fdba 	bl	8000820 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e31a      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f0      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x1dc>
 8000cc6:	e000      	b.n	8000cca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d073      	beq.n	8000dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	d005      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x21c>
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2b0c      	cmp	r3, #12
 8000ce0:	d10e      	bne.n	8000d00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d10b      	bne.n	8000d00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d063      	beq.n	8000dbc <HAL_RCC_OscConfig+0x2f0>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d15f      	bne.n	8000dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e2f7      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d08:	d106      	bne.n	8000d18 <HAL_RCC_OscConfig+0x24c>
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e025      	b.n	8000d64 <HAL_RCC_OscConfig+0x298>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d20:	d114      	bne.n	8000d4c <HAL_RCC_OscConfig+0x280>
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a02      	ldr	r2, [pc, #8]	; (8000d3c <HAL_RCC_OscConfig+0x270>)
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e013      	b.n	8000d64 <HAL_RCC_OscConfig+0x298>
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	08001750 	.word	0x08001750
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	4ba0      	ldr	r3, [pc, #640]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a9f      	ldr	r2, [pc, #636]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b9d      	ldr	r3, [pc, #628]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a9c      	ldr	r2, [pc, #624]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d013      	beq.n	8000d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fd58 	bl	8000820 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d74:	f7ff fd54 	bl	8000820 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b64      	cmp	r3, #100	; 0x64
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e2b4      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d86:	4b92      	ldr	r3, [pc, #584]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f0      	beq.n	8000d74 <HAL_RCC_OscConfig+0x2a8>
 8000d92:	e014      	b.n	8000dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d94:	f7ff fd44 	bl	8000820 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fd40 	bl	8000820 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e2a0      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dae:	4b88      	ldr	r3, [pc, #544]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x2d0>
 8000dba:	e000      	b.n	8000dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d060      	beq.n	8000e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d005      	beq.n	8000ddc <HAL_RCC_OscConfig+0x310>
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2b0c      	cmp	r3, #12
 8000dd4:	d119      	bne.n	8000e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d116      	bne.n	8000e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ddc:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_RCC_OscConfig+0x328>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e27d      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	4b76      	ldr	r3, [pc, #472]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	061b      	lsls	r3, r3, #24
 8000e02:	4973      	ldr	r1, [pc, #460]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e08:	e040      	b.n	8000e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d023      	beq.n	8000e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e12:	4b6f      	ldr	r3, [pc, #444]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a6e      	ldr	r2, [pc, #440]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fcff 	bl	8000820 <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e26:	f7ff fcfb 	bl	8000820 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e25b      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e38:	4b65      	ldr	r3, [pc, #404]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f0      	beq.n	8000e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e44:	4b62      	ldr	r3, [pc, #392]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	061b      	lsls	r3, r3, #24
 8000e52:	495f      	ldr	r1, [pc, #380]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
 8000e58:	e018      	b.n	8000e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a5c      	ldr	r2, [pc, #368]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e66:	f7ff fcdb 	bl	8000820 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fcd7 	bl	8000820 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e237      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e80:	4b53      	ldr	r3, [pc, #332]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f0      	bne.n	8000e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d03c      	beq.n	8000f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01c      	beq.n	8000eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ea0:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea6:	4a4a      	ldr	r2, [pc, #296]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fcb6 	bl	8000820 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fcb2 	bl	8000820 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e212      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000eca:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0ef      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x3ec>
 8000ed8:	e01b      	b.n	8000f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ee0:	4a3b      	ldr	r2, [pc, #236]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eea:	f7ff fc99 	bl	8000820 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fc95 	bl	8000820 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e1f5      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f04:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1ef      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 80a6 	beq.w	800106c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10d      	bne.n	8000f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f34:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <HAL_RCC_OscConfig+0x508>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d118      	bne.n	8000f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <HAL_RCC_OscConfig+0x508>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <HAL_RCC_OscConfig+0x508>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f64:	f7ff fc5c 	bl	8000820 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6c:	f7ff fc58 	bl	8000820 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e1b8      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_RCC_OscConfig+0x508>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d108      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x4d8>
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fa2:	e029      	b.n	8000ff8 <HAL_RCC_OscConfig+0x52c>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d115      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x50c>
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_RCC_OscConfig+0x504>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x52c>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40007000 	.word	0x40007000
 8000fd8:	4b9d      	ldr	r3, [pc, #628]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8000fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fde:	4a9c      	ldr	r2, [pc, #624]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fe8:	4b99      	ldr	r3, [pc, #612]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8000fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fee:	4a98      	ldr	r2, [pc, #608]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d016      	beq.n	800102e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001000:	f7ff fc0e 	bl	8000820 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001006:	e00a      	b.n	800101e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001008:	f7ff fc0a 	bl	8000820 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	f241 3288 	movw	r2, #5000	; 0x1388
 8001016:	4293      	cmp	r3, r2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e168      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800101e:	4b8c      	ldr	r3, [pc, #560]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0ed      	beq.n	8001008 <HAL_RCC_OscConfig+0x53c>
 800102c:	e015      	b.n	800105a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102e:	f7ff fbf7 	bl	8000820 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001034:	e00a      	b.n	800104c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001036:	f7ff fbf3 	bl	8000820 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	f241 3288 	movw	r2, #5000	; 0x1388
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e151      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800104c:	4b80      	ldr	r3, [pc, #512]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 800104e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1ed      	bne.n	8001036 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800105a:	7ffb      	ldrb	r3, [r7, #31]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d105      	bne.n	800106c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001060:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	4a7a      	ldr	r2, [pc, #488]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800106a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d03c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	2b00      	cmp	r3, #0
 800107e:	d01c      	beq.n	80010ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001080:	4b73      	ldr	r3, [pc, #460]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001086:	4a72      	ldr	r2, [pc, #456]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001090:	f7ff fbc6 	bl	8000820 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001098:	f7ff fbc2 	bl	8000820 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e122      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80010aa:	4b69      	ldr	r3, [pc, #420]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 80010ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ef      	beq.n	8001098 <HAL_RCC_OscConfig+0x5cc>
 80010b8:	e01b      	b.n	80010f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010ba:	4b65      	ldr	r3, [pc, #404]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 80010bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010c0:	4a63      	ldr	r2, [pc, #396]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ca:	f7ff fba9 	bl	8000820 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010d2:	f7ff fba5 	bl	8000820 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e105      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80010e4:	4b5a      	ldr	r3, [pc, #360]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 80010e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1ef      	bne.n	80010d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80f9 	beq.w	80012ee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	2b02      	cmp	r3, #2
 8001102:	f040 80cf 	bne.w	80012a4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001106:	4b52      	ldr	r3, [pc, #328]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0203 	and.w	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	429a      	cmp	r2, r3
 8001118:	d12c      	bne.n	8001174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	3b01      	subs	r3, #1
 8001126:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001128:	429a      	cmp	r2, r3
 800112a:	d123      	bne.n	8001174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001136:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001138:	429a      	cmp	r2, r3
 800113a:	d11b      	bne.n	8001174 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001148:	429a      	cmp	r2, r3
 800114a:	d113      	bne.n	8001174 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
 800115a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d109      	bne.n	8001174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	085b      	lsrs	r3, r3, #1
 800116c:	3b01      	subs	r3, #1
 800116e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001170:	429a      	cmp	r2, r3
 8001172:	d071      	beq.n	8001258 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b0c      	cmp	r3, #12
 8001178:	d068      	beq.n	800124c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001186:	4b32      	ldr	r3, [pc, #200]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0ac      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 800119c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011a2:	f7ff fb3d 	bl	8000820 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff fb39 	bl	8000820 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e099      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x788>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011d8:	3a01      	subs	r2, #1
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	4311      	orrs	r1, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011e2:	0212      	lsls	r2, r2, #8
 80011e4:	4311      	orrs	r1, r2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011ea:	0852      	lsrs	r2, r2, #1
 80011ec:	3a01      	subs	r2, #1
 80011ee:	0552      	lsls	r2, r2, #21
 80011f0:	4311      	orrs	r1, r2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011f6:	0852      	lsrs	r2, r2, #1
 80011f8:	3a01      	subs	r2, #1
 80011fa:	0652      	lsls	r2, r2, #25
 80011fc:	4311      	orrs	r1, r2
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001202:	06d2      	lsls	r2, r2, #27
 8001204:	430a      	orrs	r2, r1
 8001206:	4912      	ldr	r1, [pc, #72]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001208:	4313      	orrs	r3, r2
 800120a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001216:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 800121e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001222:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001224:	f7ff fafc 	bl	8000820 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff faf8 	bl	8000820 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e058      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_RCC_OscConfig+0x784>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800124a:	e050      	b.n	80012ee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e04f      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
 8001250:	40021000 	.word	0x40021000
 8001254:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d144      	bne.n	80012ee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 800126a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 8001276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800127a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800127c:	f7ff fad0 	bl	8000820 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff facc 	bl	8000820 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e02c      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x7b8>
 80012a2:	e024      	b.n	80012ee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d01f      	beq.n	80012ea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 80012b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fab3 	bl	8000820 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff faaf 	bl	8000820 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e00f      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	4905      	ldr	r1, [pc, #20]	; (80012f8 <HAL_RCC_OscConfig+0x82c>)
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_RCC_OscConfig+0x830>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
 80012e8:	e001      	b.n	80012ee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	feeefffc 	.word	0xfeeefffc

08001300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e0e7      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001314:	4b75      	ldr	r3, [pc, #468]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d910      	bls.n	8001344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001322:	4b72      	ldr	r3, [pc, #456]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 0207 	bic.w	r2, r3, #7
 800132a:	4970      	ldr	r1, [pc, #448]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001332:	4b6e      	ldr	r3, [pc, #440]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d001      	beq.n	8001344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0cf      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d010      	beq.n	8001372 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	4b66      	ldr	r3, [pc, #408]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800135c:	429a      	cmp	r2, r3
 800135e:	d908      	bls.n	8001372 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001360:	4b63      	ldr	r3, [pc, #396]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4960      	ldr	r1, [pc, #384]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 800136e:	4313      	orrs	r3, r2
 8001370:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d04c      	beq.n	8001418 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d107      	bne.n	8001396 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	4b5a      	ldr	r3, [pc, #360]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d121      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0a6      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d107      	bne.n	80013ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139e:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d115      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e09a      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b6:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e08e      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e086      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f023 0203 	bic.w	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4943      	ldr	r1, [pc, #268]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013e8:	f7ff fa1a 	bl	8000820 <HAL_GetTick>
 80013ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f0:	f7ff fa16 	bl	8000820 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	4293      	cmp	r3, r2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e06e      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001406:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 020c 	and.w	r2, r3, #12
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	429a      	cmp	r2, r3
 8001416:	d1eb      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d010      	beq.n	8001446 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001430:	429a      	cmp	r2, r3
 8001432:	d208      	bcs.n	8001446 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	492b      	ldr	r1, [pc, #172]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d210      	bcs.n	8001476 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 0207 	bic.w	r2, r3, #7
 800145c:	4923      	ldr	r1, [pc, #140]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_RCC_ClockConfig+0x1ec>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d001      	beq.n	8001476 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e036      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	4918      	ldr	r1, [pc, #96]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4910      	ldr	r1, [pc, #64]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014b4:	f000 f824 	bl	8001500 <HAL_RCC_GetSysClockFreq>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	490b      	ldr	r1, [pc, #44]	; (80014f4 <HAL_RCC_ClockConfig+0x1f4>)
 80014c6:	5ccb      	ldrb	r3, [r1, r3]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_RCC_ClockConfig+0x1f8>)
 80014d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_ClockConfig+0x1fc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f951 	bl	8000780 <HAL_InitTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80014e2:	7afb      	ldrb	r3, [r7, #11]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40022000 	.word	0x40022000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	08001750 	.word	0x08001750
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x34>
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d121      	bne.n	8001572 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d11e      	bne.n	8001572 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001534:	4b34      	ldr	r3, [pc, #208]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e005      	b.n	800155c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800155c:	4a2b      	ldr	r2, [pc, #172]	; (800160c <HAL_RCC_GetSysClockFreq+0x10c>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10d      	bne.n	8001588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d102      	bne.n	800157e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_RCC_GetSysClockFreq+0x110>)
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	e004      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	2b08      	cmp	r3, #8
 8001582:	d101      	bne.n	8001588 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_RCC_GetSysClockFreq+0x114>)
 8001586:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d134      	bne.n	80015f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d003      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0xac>
 80015a4:	e005      	b.n	80015b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_GetSysClockFreq+0x110>)
 80015a8:	617b      	str	r3, [r7, #20]
      break;
 80015aa:	e005      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_GetSysClockFreq+0x114>)
 80015ae:	617b      	str	r3, [r7, #20]
      break;
 80015b0:	e002      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	617b      	str	r3, [r7, #20]
      break;
 80015b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	3301      	adds	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	fb03 f202 	mul.w	r2, r3, r2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_RCC_GetSysClockFreq+0x108>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	0e5b      	lsrs	r3, r3, #25
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	3301      	adds	r3, #1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015f8:	69bb      	ldr	r3, [r7, #24]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	08001760 	.word	0x08001760
 8001610:	00f42400 	.word	0x00f42400
 8001614:	007a1200 	.word	0x007a1200

08001618 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001630:	f7ff f9e8 	bl	8000a04 <HAL_PWREx_GetVoltageRange>
 8001634:	6178      	str	r0, [r7, #20]
 8001636:	e014      	b.n	8001662 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001642:	6593      	str	r3, [r2, #88]	; 0x58
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001650:	f7ff f9d8 	bl	8000a04 <HAL_PWREx_GetVoltageRange>
 8001654:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800165c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001660:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001668:	d10b      	bne.n	8001682 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b80      	cmp	r3, #128	; 0x80
 800166e:	d919      	bls.n	80016a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2ba0      	cmp	r3, #160	; 0xa0
 8001674:	d902      	bls.n	800167c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001676:	2302      	movs	r3, #2
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e013      	b.n	80016a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800167c:	2301      	movs	r3, #1
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	e010      	b.n	80016a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b80      	cmp	r3, #128	; 0x80
 8001686:	d902      	bls.n	800168e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001688:	2303      	movs	r3, #3
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	e00a      	b.n	80016a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b80      	cmp	r3, #128	; 0x80
 8001692:	d102      	bne.n	800169a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001694:	2302      	movs	r3, #2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	e004      	b.n	80016a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b70      	cmp	r3, #112	; 0x70
 800169e:	d101      	bne.n	80016a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016a0:	2301      	movs	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 0207 	bic.w	r2, r3, #7
 80016ac:	4909      	ldr	r1, [pc, #36]	; (80016d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40022000 	.word	0x40022000

080016d8 <__libc_init_array>:
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	4d0d      	ldr	r5, [pc, #52]	; (8001710 <__libc_init_array+0x38>)
 80016dc:	4c0d      	ldr	r4, [pc, #52]	; (8001714 <__libc_init_array+0x3c>)
 80016de:	1b64      	subs	r4, r4, r5
 80016e0:	10a4      	asrs	r4, r4, #2
 80016e2:	2600      	movs	r6, #0
 80016e4:	42a6      	cmp	r6, r4
 80016e6:	d109      	bne.n	80016fc <__libc_init_array+0x24>
 80016e8:	4d0b      	ldr	r5, [pc, #44]	; (8001718 <__libc_init_array+0x40>)
 80016ea:	4c0c      	ldr	r4, [pc, #48]	; (800171c <__libc_init_array+0x44>)
 80016ec:	f000 f820 	bl	8001730 <_init>
 80016f0:	1b64      	subs	r4, r4, r5
 80016f2:	10a4      	asrs	r4, r4, #2
 80016f4:	2600      	movs	r6, #0
 80016f6:	42a6      	cmp	r6, r4
 80016f8:	d105      	bne.n	8001706 <__libc_init_array+0x2e>
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
 80016fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001700:	4798      	blx	r3
 8001702:	3601      	adds	r6, #1
 8001704:	e7ee      	b.n	80016e4 <__libc_init_array+0xc>
 8001706:	f855 3b04 	ldr.w	r3, [r5], #4
 800170a:	4798      	blx	r3
 800170c:	3601      	adds	r6, #1
 800170e:	e7f2      	b.n	80016f6 <__libc_init_array+0x1e>
 8001710:	08001790 	.word	0x08001790
 8001714:	08001790 	.word	0x08001790
 8001718:	08001790 	.word	0x08001790
 800171c:	08001794 	.word	0x08001794

08001720 <memset>:
 8001720:	4402      	add	r2, r0
 8001722:	4603      	mov	r3, r0
 8001724:	4293      	cmp	r3, r2
 8001726:	d100      	bne.n	800172a <memset+0xa>
 8001728:	4770      	bx	lr
 800172a:	f803 1b01 	strb.w	r1, [r3], #1
 800172e:	e7f9      	b.n	8001724 <memset+0x4>

08001730 <_init>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	bf00      	nop
 8001734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001736:	bc08      	pop	{r3}
 8001738:	469e      	mov	lr, r3
 800173a:	4770      	bx	lr

0800173c <_fini>:
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173e:	bf00      	nop
 8001740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001742:	bc08      	pop	{r3}
 8001744:	469e      	mov	lr, r3
 8001746:	4770      	bx	lr
