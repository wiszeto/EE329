
A6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001710  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080018bc  080018bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001980  08001980  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001980  08001980  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001980  08001980  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001984  08001984  00011984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000014  0800199c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  0800199c  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052fb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012b4  00000000  00000000  0002533f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  000265f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  00026c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272f9  00000000  00000000  00027150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007522  00000000  00000000  0004e449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee6a5  00000000  00000000  0005596b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144010  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015a0  00000000  00000000  00144060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080018a4 	.word	0x080018a4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080018a4 	.word	0x080018a4

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000008 	.word	0x20000008
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <LCD_init>:
int LCD_convert_ascii_to_time ( uint8_t asctime );

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  delay_us(100000);
 800024c:	4826      	ldr	r0, [pc, #152]	; (80002e8 <LCD_init+0xa0>)
 800024e:	f7ff ffcd 	bl	80001ec <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIODEN); // enable GPIOD clock on bus
 8000252:	4b26      	ldr	r3, [pc, #152]	; (80002ec <LCD_init+0xa4>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	4a25      	ldr	r2, [pc, #148]	; (80002ec <LCD_init+0xa4>)
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 800025e:	4b24      	ldr	r3, [pc, #144]	; (80002f0 <LCD_init+0xa8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a23      	ldr	r2, [pc, #140]	; (80002f0 <LCD_init+0xa8>)
 8000264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000268:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 800026c:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
        GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
        GPIO_MODER_MODE7); // clear bits for PA
  control_pins->MODER |=
 800026e:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <LCD_init+0xa8>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <LCD_init+0xa8>)
 8000274:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000278:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 800027c:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
       GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
       GPIO_MODER_MODE7_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 800027e:	4b1c      	ldr	r3, [pc, #112]	; (80002f0 <LCD_init+0xa8>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <LCD_init+0xa8>)
 8000284:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8000288:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4 |
        GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
  control_pins->OSPEEDR |=
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <LCD_init+0xa8>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <LCD_init+0xa8>)
 8000290:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000294:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
 8000298:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED3_Pos) | (3 << GPIO_OSPEEDR_OSPEED4_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED5_Pos) | (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED7_Pos));
  control_pins->BRR =
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <LCD_init+0xa8>)
 800029c:	22fe      	movs	r2, #254	; 0xfe
 800029e:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <LCD_init+0xa0>)
 80002a2:	f7ff ffa3 	bl	80001ec <delay_us>
  command(0x30);
 80002a6:	2030      	movs	r0, #48	; 0x30
 80002a8:	f000 f83c 	bl	8000324 <command>
  delay_us(100);
 80002ac:	2064      	movs	r0, #100	; 0x64
 80002ae:	f7ff ff9d 	bl	80001ec <delay_us>
  command(0x30);
 80002b2:	2030      	movs	r0, #48	; 0x30
 80002b4:	f000 f836 	bl	8000324 <command>
  delay_us(100);
 80002b8:	2064      	movs	r0, #100	; 0x64
 80002ba:	f7ff ff97 	bl	80001ec <delay_us>
  command(0x30);
 80002be:	2030      	movs	r0, #48	; 0x30
 80002c0:	f000 f830 	bl	8000324 <command>
  delay_us(100);
 80002c4:	2064      	movs	r0, #100	; 0x64
 80002c6:	f7ff ff91 	bl	80001ec <delay_us>
  command(0x20);
 80002ca:	2020      	movs	r0, #32
 80002cc:	f000 f82a 	bl	8000324 <command>
  delay_us(100);
 80002d0:	2064      	movs	r0, #100	; 0x64
 80002d2:	f7ff ff8b 	bl	80001ec <delay_us>
  command(0x02);
 80002d6:	2002      	movs	r0, #2
 80002d8:	f000 f824 	bl	8000324 <command>
  delay_us(100);
 80002dc:	2064      	movs	r0, #100	; 0x64
 80002de:	f7ff ff85 	bl	80001ec <delay_us>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	000186a0 	.word	0x000186a0
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000c00 	.word	0x48000c00

080002f4 <Nybble>:

void Nybble() {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <Nybble+0x2c>)
 80002fa:	2208      	movs	r2, #8
 80002fc:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 80002fe:	2032      	movs	r0, #50	; 0x32
 8000300:	f7ff ff74 	bl	80001ec <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <Nybble+0x2c>)
 8000306:	2208      	movs	r2, #8
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 800030a:	2032      	movs	r0, #50	; 0x32
 800030c:	f7ff ff6e 	bl	80001ec <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <Nybble+0x2c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a02      	ldr	r2, [pc, #8]	; (8000320 <Nybble+0x2c>)
 8000316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800031a:	6153      	str	r3, [r2, #20]
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	48000c00 	.word	0x48000c00

08000324 <command>:

void command(uint8_t command) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	091b      	lsrs	r3, r3, #4
 8000332:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000334:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <command+0xbc>)
 8000336:	2206      	movs	r2, #6
 8000338:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	e017      	b.n	8000370 <command+0x4c>
    if ((command2 >> i) & 0x01) {
 8000340:	7bfa      	ldrb	r2, [r7, #15]
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	fa42 f303 	asr.w	r3, r2, r3
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d006      	beq.n	800035e <command+0x3a>
      control_pins->BSRR = GPIO_Pin[i];
 8000350:	4a24      	ldr	r2, [pc, #144]	; (80003e4 <command+0xc0>)
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000358:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <command+0xbc>)
 800035a:	619a      	str	r2, [r3, #24]
 800035c:	e005      	b.n	800036a <command+0x46>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 800035e:	4a21      	ldr	r2, [pc, #132]	; (80003e4 <command+0xc0>)
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000366:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <command+0xbc>)
 8000368:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	3301      	adds	r3, #1
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	2b03      	cmp	r3, #3
 8000374:	dde4      	ble.n	8000340 <command+0x1c>
    }
  }

  delay_us(1000);
 8000376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037a:	f7ff ff37 	bl	80001ec <delay_us>
  Nybble(); // Send pulse
 800037e:	f7ff ffb9 	bl	80002f4 <Nybble>

  for (int i = 0; i < 4; i++) {
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
 8000386:	e017      	b.n	80003b8 <command+0x94>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 8000388:	79fa      	ldrb	r2, [r7, #7]
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	fa42 f303 	asr.w	r3, r2, r3
 8000390:	f003 0301 	and.w	r3, r3, #1
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <command+0x82>
      control_pins->BSRR = GPIO_Pin[i];
 8000398:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <command+0xc0>)
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <command+0xbc>)
 80003a2:	619a      	str	r2, [r3, #24]
 80003a4:	e005      	b.n	80003b2 <command+0x8e>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80003a6:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <command+0xc0>)
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <command+0xbc>)
 80003b0:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	3301      	adds	r3, #1
 80003b6:	613b      	str	r3, [r7, #16]
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	dde4      	ble.n	8000388 <command+0x64>
    }
  }
  delay_us(1000);
 80003be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c2:	f7ff ff13 	bl	80001ec <delay_us>
  Nybble();                                    // Send pulse
 80003c6:	f7ff ff95 	bl	80002f4 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <command+0xbc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <command+0xbc>)
 80003d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003d4:	6153      	str	r3, [r2, #20]
}
 80003d6:	bf00      	nop
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	48000c00 	.word	0x48000c00
 80003e4:	20000000 	.word	0x20000000

080003e8 <main>:
#include "main.h"
#include "uart.h"

void SystemClock_Config(void);

int main(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

	HAL_Init();
 80003ec:	f000 fa69 	bl	80008c2 <HAL_Init>
	SystemClock_Config();
 80003f0:	f000 f8c6 	bl	8000580 <SystemClock_Config>
	LPUART_init();
 80003f4:	f000 f970 	bl	80006d8 <LPUART_init>
	LCD_init();
 80003f8:	f7ff ff26 	bl	8000248 <LCD_init>

	// Escape codes to move the cursor down 3 lines and to the right 5 spaces
	LPUART_ESC_Print("\033[3B\033[5C");
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <main+0x48>)
 80003fe:	f000 fa0f 	bl	8000820 <LPUART_ESC_Print>

	LPUART_Print("All good students read the");
 8000402:	480c      	ldr	r0, [pc, #48]	; (8000434 <main+0x4c>)
 8000404:	f000 f9f0 	bl	80007e8 <LPUART_Print>

	LPUART_ESC_Print("\033[B\033[21D");
 8000408:	480b      	ldr	r0, [pc, #44]	; (8000438 <main+0x50>)
 800040a:	f000 fa09 	bl	8000820 <LPUART_ESC_Print>

	LPUART_ESC_Print("\033[5m");
 800040e:	480b      	ldr	r0, [pc, #44]	; (800043c <main+0x54>)
 8000410:	f000 fa06 	bl	8000820 <LPUART_ESC_Print>

	LPUART_Print("Reference Manual");
 8000414:	480a      	ldr	r0, [pc, #40]	; (8000440 <main+0x58>)
 8000416:	f000 f9e7 	bl	80007e8 <LPUART_Print>

	LPUART_ESC_Print("\033[H"); //Move cursor to the top left position
 800041a:	480a      	ldr	r0, [pc, #40]	; (8000444 <main+0x5c>)
 800041c:	f000 fa00 	bl	8000820 <LPUART_ESC_Print>

	LPUART_ESC_Print("\033[0m");
 8000420:	4809      	ldr	r0, [pc, #36]	; (8000448 <main+0x60>)
 8000422:	f000 f9fd 	bl	8000820 <LPUART_ESC_Print>

	LPUART_Print("Input: ");
 8000426:	4809      	ldr	r0, [pc, #36]	; (800044c <main+0x64>)
 8000428:	f000 f9de 	bl	80007e8 <LPUART_Print>

	while (1) {
 800042c:	e7fe      	b.n	800042c <main+0x44>
 800042e:	bf00      	nop
 8000430:	080018bc 	.word	0x080018bc
 8000434:	080018c8 	.word	0x080018c8
 8000438:	080018e4 	.word	0x080018e4
 800043c:	080018f0 	.word	0x080018f0
 8000440:	080018f8 	.word	0x080018f8
 8000444:	0800190c 	.word	0x0800190c
 8000448:	08001910 	.word	0x08001910
 800044c:	08001918 	.word	0x08001918

08000450 <LPUART1_IRQHandler>:

}


// UART interrupt service routine
void LPUART1_IRQHandler(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8000456:	4b45      	ldr	r3, [pc, #276]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 0320 	and.w	r3, r3, #32
 800045e:	2b00      	cmp	r3, #0
 8000460:	d07e      	beq.n	8000560 <LPUART1_IRQHandler+0x110>
		char charRecv = LPUART1->RDR;  // read the received character
 8000462:	4b42      	ldr	r3, [pc, #264]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000464:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000466:	b29b      	uxth	r3, r3
 8000468:	71fb      	strb	r3, [r7, #7]
		switch (charRecv) {
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3b42      	subs	r3, #66	; 0x42
 800046e:	2b15      	cmp	r3, #21
 8000470:	d86a      	bhi.n	8000548 <LPUART1_IRQHandler+0xf8>
 8000472:	a201      	add	r2, pc, #4	; (adr r2, 8000478 <LPUART1_IRQHandler+0x28>)
 8000474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000478:	0800050d 	.word	0x0800050d
 800047c:	08000549 	.word	0x08000549
 8000480:	08000549 	.word	0x08000549
 8000484:	08000549 	.word	0x08000549
 8000488:	08000549 	.word	0x08000549
 800048c:	080004ef 	.word	0x080004ef
 8000490:	08000549 	.word	0x08000549
 8000494:	08000549 	.word	0x08000549
 8000498:	08000549 	.word	0x08000549
 800049c:	08000549 	.word	0x08000549
 80004a0:	08000549 	.word	0x08000549
 80004a4:	08000549 	.word	0x08000549
 80004a8:	08000549 	.word	0x08000549
 80004ac:	08000549 	.word	0x08000549
 80004b0:	08000549 	.word	0x08000549
 80004b4:	08000549 	.word	0x08000549
 80004b8:	080004d1 	.word	0x080004d1
 80004bc:	08000549 	.word	0x08000549
 80004c0:	08000549 	.word	0x08000549
 80004c4:	08000549 	.word	0x08000549
 80004c8:	08000549 	.word	0x08000549
 80004cc:	0800052b 	.word	0x0800052b
		case 'R': // if received character is 'R'
			LPUART_ESC_Print("\033[31m"); // change color to red
 80004d0:	4827      	ldr	r0, [pc, #156]	; (8000570 <LPUART1_IRQHandler+0x120>)
 80004d2:	f000 f9a5 	bl	8000820 <LPUART_ESC_Print>
			while (!(LPUART1->ISR & USART_ISR_TXE))
 80004d6:	bf00      	nop
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <LPUART1_IRQHandler+0x11c>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0f9      	beq.n	80004d8 <LPUART1_IRQHandler+0x88>
				;  // wait for empty TX buffer
			LPUART1->TDR = charRecv; // send received character
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <LPUART1_IRQHandler+0x11c>)
 80004e6:	79fa      	ldrb	r2, [r7, #7]
 80004e8:	b292      	uxth	r2, r2
 80004ea:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80004ec:	e039      	b.n	8000562 <LPUART1_IRQHandler+0x112>
		case 'G':
			LPUART_ESC_Print("\033[32m"); // change color to green
 80004ee:	4821      	ldr	r0, [pc, #132]	; (8000574 <LPUART1_IRQHandler+0x124>)
 80004f0:	f000 f996 	bl	8000820 <LPUART_ESC_Print>
			while (!(LPUART1->ISR & USART_ISR_TXE))
 80004f4:	bf00      	nop
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <LPUART1_IRQHandler+0x11c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0f9      	beq.n	80004f6 <LPUART1_IRQHandler+0xa6>
				;  // wait for empty TX buffer
			LPUART1->TDR = charRecv; // send received character
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000504:	79fa      	ldrb	r2, [r7, #7]
 8000506:	b292      	uxth	r2, r2
 8000508:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 800050a:	e02a      	b.n	8000562 <LPUART1_IRQHandler+0x112>
		case 'B':
			LPUART_ESC_Print("\033[34m"); // change color to blue
 800050c:	481a      	ldr	r0, [pc, #104]	; (8000578 <LPUART1_IRQHandler+0x128>)
 800050e:	f000 f987 	bl	8000820 <LPUART_ESC_Print>
			while (!(LPUART1->ISR & USART_ISR_TXE))
 8000512:	bf00      	nop
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f9      	beq.n	8000514 <LPUART1_IRQHandler+0xc4>
				;  // wait for empty TX buffer
			LPUART1->TDR = charRecv; // send received character
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	b292      	uxth	r2, r2
 8000526:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8000528:	e01b      	b.n	8000562 <LPUART1_IRQHandler+0x112>
		case 'W':
			LPUART_ESC_Print("\033[37m"); // change color to white
 800052a:	4814      	ldr	r0, [pc, #80]	; (800057c <LPUART1_IRQHandler+0x12c>)
 800052c:	f000 f978 	bl	8000820 <LPUART_ESC_Print>
			while (!(LPUART1->ISR & USART_ISR_TXE))
 8000530:	bf00      	nop
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <LPUART1_IRQHandler+0xe2>
				;  // wait for empty TX buffer
			LPUART1->TDR = charRecv; // send received character
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	b292      	uxth	r2, r2
 8000544:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8000546:	e00c      	b.n	8000562 <LPUART1_IRQHandler+0x112>
		default: // if received character is none of the above
			while (!(LPUART1->ISR & USART_ISR_TXE))
 8000548:	bf00      	nop
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <LPUART1_IRQHandler+0x11c>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f9      	beq.n	800054a <LPUART1_IRQHandler+0xfa>
				;  // wait for empty TX buffer
			LPUART1->TDR = charRecv; // send received character
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <LPUART1_IRQHandler+0x11c>)
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	b292      	uxth	r2, r2
 800055c:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 800055e:	e000      	b.n	8000562 <LPUART1_IRQHandler+0x112>
		}  // end switch
	}
 8000560:	bf00      	nop
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40008000 	.word	0x40008000
 8000570:	08001920 	.word	0x08001920
 8000574:	08001928 	.word	0x08001928
 8000578:	08001930 	.word	0x08001930
 800057c:	08001938 	.word	0x08001938

08000580 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	; 0x58
 8000584:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	; 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f001 f980 	bl	8001894 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80005a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a6:	f000 faf5 	bl	8000b94 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80005b0:	f000 f82c 	bl	800060c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b4:	2310      	movs	r3, #16
 80005b6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c0:	2360      	movs	r3, #96	; 0x60
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fb37 	bl	8000c40 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x5c>
		Error_Handler();
 80005d8:	f000 f818 	bl	800060c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005f0:	463b      	mov	r3, r7
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 ff3d 	bl	8001474 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x84>
		Error_Handler();
 8000600:	f000 f804 	bl	800060c <Error_Handler>
	}
}
 8000604:	bf00      	nop
 8000606:	3758      	adds	r7, #88	; 0x58
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
	__disable_irq();
	while (1) {
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6613      	str	r3, [r2, #96]	; 0x60
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x44>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f95e 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <LPUART_init>:
#include "main.h"
#include "uart.h"

void LPUART_init() {
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <LPUART_init+0xcc>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a30      	ldr	r2, [pc, #192]	; (80007a4 <LPUART_init+0xcc>)
 80006e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e6:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <LPUART_init+0xd0>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <LPUART_init+0xd0>)
 80006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f2:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 80006f4:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <LPUART_init+0xd0>)
 80006f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006f8:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <LPUART_init+0xd0>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8000700:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <LPUART_init+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a29      	ldr	r2, [pc, #164]	; (80007ac <LPUART_init+0xd4>)
 8000706:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 800070a:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8);
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <LPUART_init+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a26      	ldr	r2, [pc, #152]	; (80007ac <LPUART_init+0xd4>)
 8000712:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 8000716:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <LPUART_init+0xd4>)
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	4a23      	ldr	r2, [pc, #140]	; (80007ac <LPUART_init+0xd4>)
 800071e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000722:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos);
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <LPUART_init+0xd4>)
 8000726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000728:	4a20      	ldr	r2, [pc, #128]	; (80007ac <LPUART_init+0xd4>)
 800072a:	f023 030f 	bic.w	r3, r3, #15
 800072e:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <LPUART_init+0xd4>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <LPUART_init+0xd4>)
 8000736:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 800073a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800073e:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <LPUART_init+0xd4>)
 8000742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <LPUART_init+0xd4>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <LPUART_init+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <LPUART_init+0xd8>)
 8000752:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000756:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <LPUART_init+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <LPUART_init+0xd8>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <LPUART_init+0xd8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <LPUART_init+0xd8>)
 800076a:	f043 030c 	orr.w	r3, r3, #12
 800076e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <LPUART_init+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <LPUART_init+0xd8>)
 8000776:	f043 0320 	orr.w	r3, r3, #32
 800077a:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <LPUART_init+0xd8>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <LPUART_init+0xd8>)
 8000782:	f023 0320 	bic.w	r3, r3, #32
 8000786:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 17778;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <LPUART_init+0xd8>)
 800078a:	f244 5272 	movw	r2, #17778	; 0x4572
 800078e:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <LPUART_init+0xdc>)
 8000792:	2240      	movs	r2, #64	; 0x40
 8000794:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000796:	b662      	cpsie	i
}
 8000798:	bf00      	nop
	__enable_irq();                          // enable global interrupts

}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40007000 	.word	0x40007000
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48001800 	.word	0x48001800
 80007b0:	40008000 	.word	0x40008000
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <LPUART_Print_Char>:

void LPUART_Print_Char(char ch) {
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	while (!(LPUART1->ISR & USART_ISR_TXE))
 80007c2:	bf00      	nop
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <LPUART_Print_Char+0x2c>)
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f9      	beq.n	80007c4 <LPUART_Print_Char+0xc>
		;   // wait for empty transmit buffer
	LPUART1->TDR = ch;                        // send the character
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <LPUART_Print_Char+0x2c>)
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	b292      	uxth	r2, r2
 80007d6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40008000 	.word	0x40008000

080007e8 <LPUART_Print>:

void LPUART_Print(const char *message) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 80007f4:	e009      	b.n	800080a <LPUART_Print+0x22>
		LPUART_Print_Char(message[iStrIdx]);
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffda 	bl	80007b8 <LPUART_Print_Char>
		iStrIdx++;
 8000804:	89fb      	ldrh	r3, [r7, #14]
 8000806:	3301      	adds	r3, #1
 8000808:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1ef      	bne.n	80007f6 <LPUART_Print+0xe>
	}
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <LPUART_ESC_Print>:

void LPUART_ESC_Print(const char *message) {
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != 0) {
 800082c:	e010      	b.n	8000850 <LPUART_ESC_Print+0x30>
		while (!(LPUART1->ISR & USART_ISR_TXE))
 800082e:	bf00      	nop
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <LPUART_ESC_Print+0x4c>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <LPUART_ESC_Print+0x10>
			;   // wait for empty transmit buffer
		LPUART1->TDR = message[iStrIdx];        // send this character
 800083c:	89fb      	ldrh	r3, [r7, #14]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <LPUART_ESC_Print+0x4c>)
 8000846:	b292      	uxth	r2, r2
 8000848:	851a      	strh	r2, [r3, #40]	; 0x28
		iStrIdx++;                      // advance index to next char.
 800084a:	89fb      	ldrh	r3, [r7, #14]
 800084c:	3301      	adds	r3, #1
 800084e:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != 0) {
 8000850:	89fb      	ldrh	r3, [r7, #14]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e8      	bne.n	800082e <LPUART_ESC_Print+0xe>
	}
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40008000 	.word	0x40008000

08000870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000874:	f7ff ff1e 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <LoopForever+0x6>)
  ldr r1, =_edata
 800087a:	490d      	ldr	r1, [pc, #52]	; (80008b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <LoopForever+0xe>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000890:	4c0a      	ldr	r4, [pc, #40]	; (80008bc <LoopForever+0x16>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089e:	f000 ffd5 	bl	800184c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008a2:	f7ff fda1 	bl	80003e8 <main>

080008a6 <LoopForever>:

LoopForever:
    b LoopForever
 80008a6:	e7fe      	b.n	80008a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008b4:	08001988 	.word	0x08001988
  ldr r2, =_sbss
 80008b8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008bc:	20000034 	.word	0x20000034

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>

080008c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f91f 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008d2:	200f      	movs	r0, #15
 80008d4:	f000 f80e 	bl	80008f4 <HAL_InitTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	e001      	b.n	80008e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008e4:	f7ff fe98 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_InitTick+0x6c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d023      	beq.n	8000950 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_InitTick+0x70>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_InitTick+0x6c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f91d 	bl	8000b5e <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10f      	bne.n	800094a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d809      	bhi.n	8000944 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 f8f5 	bl	8000b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_InitTick+0x74>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	e007      	b.n	8000954 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e004      	b.n	8000954 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e001      	b.n	8000954 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000010 	.word	0x20000010
 8000964:	20000008 	.word	0x20000008
 8000968:	2000000c 	.word	0x2000000c

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000010 	.word	0x20000010
 8000990:	20000030 	.word	0x20000030

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000030 	.word	0x20000030

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff8e 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff47 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff5c 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff8e 	bl	8000a64 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffb0 	bl	8000acc <SysTick_Config>
 8000b6c:	4603      	mov	r3, r0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40007000 	.word	0x40007000

08000b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba2:	d130      	bne.n	8000c06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb0:	d038      	beq.n	8000c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2232      	movs	r2, #50	; 0x32
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	0c9b      	lsrs	r3, r3, #18
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd8:	e002      	b.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bec:	d102      	bne.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f2      	bne.n	8000bda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c00:	d110      	bne.n	8000c24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c02:	2303      	movs	r3, #3
 8000c04:	e00f      	b.n	8000c26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c12:	d007      	beq.n	8000c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c1c:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40007000 	.word	0x40007000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	431bde83 	.word	0x431bde83

08000c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f000 bc08 	b.w	8001464 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c54:	4b96      	ldr	r3, [pc, #600]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 030c 	and.w	r3, r3, #12
 8000c5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c5e:	4b94      	ldr	r3, [pc, #592]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80e4 	beq.w	8000e3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d007      	beq.n	8000c8c <HAL_RCC_OscConfig+0x4c>
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b0c      	cmp	r3, #12
 8000c80:	f040 808b 	bne.w	8000d9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	f040 8087 	bne.w	8000d9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c8c:	4b88      	ldr	r3, [pc, #544]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x64>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e3df      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a1a      	ldr	r2, [r3, #32]
 8000ca8:	4b81      	ldr	r3, [pc, #516]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d004      	beq.n	8000cbe <HAL_RCC_OscConfig+0x7e>
 8000cb4:	4b7e      	ldr	r3, [pc, #504]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cbc:	e005      	b.n	8000cca <HAL_RCC_OscConfig+0x8a>
 8000cbe:	4b7c      	ldr	r3, [pc, #496]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d223      	bcs.n	8000d16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fd5a 	bl	800178c <RCC_SetFlashLatencyFromMSIRange>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e3c0      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a72      	ldr	r2, [pc, #456]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b70      	ldr	r3, [pc, #448]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	496d      	ldr	r1, [pc, #436]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d00:	4b6b      	ldr	r3, [pc, #428]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	4968      	ldr	r1, [pc, #416]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
 8000d14:	e025      	b.n	8000d62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a65      	ldr	r2, [pc, #404]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	4b63      	ldr	r3, [pc, #396]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	4960      	ldr	r1, [pc, #384]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	495b      	ldr	r1, [pc, #364]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fd1a 	bl	800178c <RCC_SetFlashLatencyFromMSIRange>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e380      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d62:	f000 fc87 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8000d66:	4602      	mov	r2, r0
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	4950      	ldr	r1, [pc, #320]	; (8000eb4 <HAL_RCC_OscConfig+0x274>)
 8000d74:	5ccb      	ldrb	r3, [r1, r3]
 8000d76:	f003 031f 	and.w	r3, r3, #31
 8000d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7e:	4a4e      	ldr	r2, [pc, #312]	; (8000eb8 <HAL_RCC_OscConfig+0x278>)
 8000d80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d82:	4b4e      	ldr	r3, [pc, #312]	; (8000ebc <HAL_RCC_OscConfig+0x27c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fdb4 	bl	80008f4 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d052      	beq.n	8000e3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	e364      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d032      	beq.n	8000e08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000da2:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a42      	ldr	r2, [pc, #264]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dae:	f7ff fdf1 	bl	8000994 <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000db6:	f7ff fded 	bl	8000994 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e34d      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc8:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f0      	beq.n	8000db6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a35      	ldr	r2, [pc, #212]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4930      	ldr	r1, [pc, #192]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	492b      	ldr	r1, [pc, #172]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
 8000e06:	e01a      	b.n	8000e3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fdbe 	bl	8000994 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fdba 	bl	8000994 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e31a      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x1dc>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d073      	beq.n	8000f32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d005      	beq.n	8000e5c <HAL_RCC_OscConfig+0x21c>
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2b0c      	cmp	r3, #12
 8000e54:	d10e      	bne.n	8000e74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d10b      	bne.n	8000e74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d063      	beq.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d15f      	bne.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e2f7      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7c:	d106      	bne.n	8000e8c <HAL_RCC_OscConfig+0x24c>
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e025      	b.n	8000ed8 <HAL_RCC_OscConfig+0x298>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e94:	d114      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x280>
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a02      	ldr	r2, [pc, #8]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e013      	b.n	8000ed8 <HAL_RCC_OscConfig+0x298>
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	08001940 	.word	0x08001940
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	4ba0      	ldr	r3, [pc, #640]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a9f      	ldr	r2, [pc, #636]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b9d      	ldr	r3, [pc, #628]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a9c      	ldr	r2, [pc, #624]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d013      	beq.n	8000f08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fd58 	bl	8000994 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fd54 	bl	8000994 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e2b4      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efa:	4b92      	ldr	r3, [pc, #584]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2a8>
 8000f06:	e014      	b.n	8000f32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f08:	f7ff fd44 	bl	8000994 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fd40 	bl	8000994 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e2a0      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f22:	4b88      	ldr	r3, [pc, #544]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2d0>
 8000f2e:	e000      	b.n	8000f32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d060      	beq.n	8001000 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x310>
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2b0c      	cmp	r3, #12
 8000f48:	d119      	bne.n	8000f7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d116      	bne.n	8000f7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f50:	4b7c      	ldr	r3, [pc, #496]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_OscConfig+0x328>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e27d      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4b76      	ldr	r3, [pc, #472]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	061b      	lsls	r3, r3, #24
 8000f76:	4973      	ldr	r1, [pc, #460]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7c:	e040      	b.n	8001000 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d023      	beq.n	8000fce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f86:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a6e      	ldr	r2, [pc, #440]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff fcff 	bl	8000994 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fcfb 	bl	8000994 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e25b      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fac:	4b65      	ldr	r3, [pc, #404]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	4b62      	ldr	r3, [pc, #392]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	495f      	ldr	r1, [pc, #380]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e018      	b.n	8001000 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fce:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a5c      	ldr	r2, [pc, #368]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fda:	f7ff fcdb 	bl	8000994 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fcd7 	bl	8000994 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e237      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff4:	4b53      	ldr	r3, [pc, #332]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	2b00      	cmp	r3, #0
 800100a:	d03c      	beq.n	8001086 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01c      	beq.n	800104e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001014:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800101a:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001024:	f7ff fcb6 	bl	8000994 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800102c:	f7ff fcb2 	bl	8000994 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e212      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0ef      	beq.n	800102c <HAL_RCC_OscConfig+0x3ec>
 800104c:	e01b      	b.n	8001086 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104e:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001054:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001056:	f023 0301 	bic.w	r3, r3, #1
 800105a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105e:	f7ff fc99 	bl	8000994 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001066:	f7ff fc95 	bl	8000994 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e1f5      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 800107a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1ef      	bne.n	8001066 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 80a6 	beq.w	80011e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10d      	bne.n	80010c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	4a26      	ldr	r2, [pc, #152]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6593      	str	r3, [r2, #88]	; 0x58
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010bc:	2301      	movs	r3, #1
 80010be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_RCC_OscConfig+0x508>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d118      	bne.n	80010fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_RCC_OscConfig+0x508>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_RCC_OscConfig+0x508>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fc5c 	bl	8000994 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e0:	f7ff fc58 	bl	8000994 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1b8      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_RCC_OscConfig+0x508>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x4d8>
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001116:	e029      	b.n	800116c <HAL_RCC_OscConfig+0x52c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d115      	bne.n	800114c <HAL_RCC_OscConfig+0x50c>
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001136:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_RCC_OscConfig+0x504>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001140:	e014      	b.n	800116c <HAL_RCC_OscConfig+0x52c>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40007000 	.word	0x40007000
 800114c:	4b9d      	ldr	r3, [pc, #628]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800114e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001152:	4a9c      	ldr	r2, [pc, #624]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800115c:	4b99      	ldr	r3, [pc, #612]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001162:	4a98      	ldr	r2, [pc, #608]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001164:	f023 0304 	bic.w	r3, r3, #4
 8001168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d016      	beq.n	80011a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001174:	f7ff fc0e 	bl	8000994 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800117a:	e00a      	b.n	8001192 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117c:	f7ff fc0a 	bl	8000994 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f241 3288 	movw	r2, #5000	; 0x1388
 800118a:	4293      	cmp	r3, r2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e168      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001192:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0ed      	beq.n	800117c <HAL_RCC_OscConfig+0x53c>
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a2:	f7ff fbf7 	bl	8000994 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fbf3 	bl	8000994 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e151      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011c0:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80011c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ed      	bne.n	80011aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80011d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d8:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80011da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d03c      	beq.n	8001266 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01c      	beq.n	800122e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011f4:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80011f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011fa:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001204:	f7ff fbc6 	bl	8000994 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800120c:	f7ff fbc2 	bl	8000994 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e122      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800121e:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ef      	beq.n	800120c <HAL_RCC_OscConfig+0x5cc>
 800122c:	e01b      	b.n	8001266 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800122e:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001234:	4a63      	ldr	r2, [pc, #396]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123e:	f7ff fba9 	bl	8000994 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001246:	f7ff fba5 	bl	8000994 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e105      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800125a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ef      	bne.n	8001246 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80f9 	beq.w	8001462 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	2b02      	cmp	r3, #2
 8001276:	f040 80cf 	bne.w	8001418 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800127a:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0203 	and.w	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	429a      	cmp	r2, r3
 800128c:	d12c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	3b01      	subs	r3, #1
 800129a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800129c:	429a      	cmp	r2, r3
 800129e:	d123      	bne.n	80012e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d11b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d113      	bne.n	80012e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	3b01      	subs	r3, #1
 80012ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d109      	bne.n	80012e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	3b01      	subs	r3, #1
 80012e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d071      	beq.n	80013cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	d068      	beq.n	80013c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e0ac      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001314:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001316:	f7ff fb3d 	bl	8000994 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb39 	bl	8000994 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e099      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x788>)
 8001342:	4013      	ands	r3, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800134c:	3a01      	subs	r2, #1
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	4311      	orrs	r1, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001356:	0212      	lsls	r2, r2, #8
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800135e:	0852      	lsrs	r2, r2, #1
 8001360:	3a01      	subs	r2, #1
 8001362:	0552      	lsls	r2, r2, #21
 8001364:	4311      	orrs	r1, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800136a:	0852      	lsrs	r2, r2, #1
 800136c:	3a01      	subs	r2, #1
 800136e:	0652      	lsls	r2, r2, #25
 8001370:	4311      	orrs	r1, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001376:	06d2      	lsls	r2, r2, #27
 8001378:	430a      	orrs	r2, r1
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800137c:	4313      	orrs	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800138a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 8001392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001398:	f7ff fafc 	bl	8000994 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff faf8 	bl	8000994 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e058      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_RCC_OscConfig+0x784>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013be:	e050      	b.n	8001462 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e04f      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d144      	bne.n	8001462 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 80013de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 80013ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013f0:	f7ff fad0 	bl	8000994 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff facc 	bl	8000994 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e02c      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x7b8>
 8001416:	e024      	b.n	8001462 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	d01f      	beq.n	800145e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 8001424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fab3 	bl	8000994 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff faaf 	bl	8000994 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e00f      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	4905      	ldr	r1, [pc, #20]	; (800146c <HAL_RCC_OscConfig+0x82c>)
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_OscConfig+0x830>)
 8001458:	4013      	ands	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
 800145c:	e001      	b.n	8001462 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	feeefffc 	.word	0xfeeefffc

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0e7      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b75      	ldr	r3, [pc, #468]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b72      	ldr	r3, [pc, #456]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0207 	bic.w	r2, r3, #7
 800149e:	4970      	ldr	r1, [pc, #448]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b6e      	ldr	r3, [pc, #440]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0cf      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d010      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	4b66      	ldr	r3, [pc, #408]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d908      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4960      	ldr	r1, [pc, #384]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d04c      	beq.n	800158c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fa:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d121      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0a6      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d115      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e09a      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152a:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e08e      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e086      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4943      	ldr	r1, [pc, #268]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800155c:	f7ff fa1a 	bl	8000994 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fa16 	bl	8000994 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e06e      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d010      	beq.n	80015ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d208      	bcs.n	80015ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	492b      	ldr	r1, [pc, #172]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d210      	bcs.n	80015ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 0207 	bic.w	r2, r3, #7
 80015d0:	4923      	ldr	r1, [pc, #140]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e036      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4918      	ldr	r1, [pc, #96]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4910      	ldr	r1, [pc, #64]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001628:	f000 f824 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	490b      	ldr	r1, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x1f4>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1f8>)
 8001646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1fc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f951 	bl	80008f4 <HAL_InitTick>
 8001652:	4603      	mov	r3, r0
 8001654:	72fb      	strb	r3, [r7, #11]

  return status;
 8001656:	7afb      	ldrb	r3, [r7, #11]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40022000 	.word	0x40022000
 8001664:	40021000 	.word	0x40021000
 8001668:	08001940 	.word	0x08001940
 800166c:	20000008 	.word	0x20000008
 8001670:	2000000c 	.word	0x2000000c

08001674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x34>
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d11e      	bne.n	80016e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e005      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016d0:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10d      	bne.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	e004      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_RCC_GetSysClockFreq+0x114>)
 80016fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d134      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_RCC_GetSysClockFreq+0xa6>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d003      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0xac>
 8001718:	e005      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_RCC_GetSysClockFreq+0x110>)
 800171c:	617b      	str	r3, [r7, #20]
      break;
 800171e:	e005      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_RCC_GetSysClockFreq+0x114>)
 8001722:	617b      	str	r3, [r7, #20]
      break;
 8001724:	e002      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	617b      	str	r3, [r7, #20]
      break;
 800172a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	3301      	adds	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	fb03 f202 	mul.w	r2, r3, r2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	0e5b      	lsrs	r3, r3, #25
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	3301      	adds	r3, #1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800176c:	69bb      	ldr	r3, [r7, #24]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	08001950 	.word	0x08001950
 8001784:	00f42400 	.word	0x00f42400
 8001788:	007a1200 	.word	0x007a1200

0800178c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017a4:	f7ff f9e8 	bl	8000b78 <HAL_PWREx_GetVoltageRange>
 80017a8:	6178      	str	r0, [r7, #20]
 80017aa:	e014      	b.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4a24      	ldr	r2, [pc, #144]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	; 0x58
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017c4:	f7ff f9d8 	bl	8000b78 <HAL_PWREx_GetVoltageRange>
 80017c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017dc:	d10b      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b80      	cmp	r3, #128	; 0x80
 80017e2:	d919      	bls.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2ba0      	cmp	r3, #160	; 0xa0
 80017e8:	d902      	bls.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ea:	2302      	movs	r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e013      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017f0:	2301      	movs	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e010      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b80      	cmp	r3, #128	; 0x80
 80017fa:	d902      	bls.n	8001802 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017fc:	2303      	movs	r3, #3
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e00a      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b80      	cmp	r3, #128	; 0x80
 8001806:	d102      	bne.n	800180e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e004      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b70      	cmp	r3, #112	; 0x70
 8001812:	d101      	bne.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 0207 	bic.w	r2, r3, #7
 8001820:	4909      	ldr	r1, [pc, #36]	; (8001848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	40022000 	.word	0x40022000

0800184c <__libc_init_array>:
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	4d0d      	ldr	r5, [pc, #52]	; (8001884 <__libc_init_array+0x38>)
 8001850:	4c0d      	ldr	r4, [pc, #52]	; (8001888 <__libc_init_array+0x3c>)
 8001852:	1b64      	subs	r4, r4, r5
 8001854:	10a4      	asrs	r4, r4, #2
 8001856:	2600      	movs	r6, #0
 8001858:	42a6      	cmp	r6, r4
 800185a:	d109      	bne.n	8001870 <__libc_init_array+0x24>
 800185c:	4d0b      	ldr	r5, [pc, #44]	; (800188c <__libc_init_array+0x40>)
 800185e:	4c0c      	ldr	r4, [pc, #48]	; (8001890 <__libc_init_array+0x44>)
 8001860:	f000 f820 	bl	80018a4 <_init>
 8001864:	1b64      	subs	r4, r4, r5
 8001866:	10a4      	asrs	r4, r4, #2
 8001868:	2600      	movs	r6, #0
 800186a:	42a6      	cmp	r6, r4
 800186c:	d105      	bne.n	800187a <__libc_init_array+0x2e>
 800186e:	bd70      	pop	{r4, r5, r6, pc}
 8001870:	f855 3b04 	ldr.w	r3, [r5], #4
 8001874:	4798      	blx	r3
 8001876:	3601      	adds	r6, #1
 8001878:	e7ee      	b.n	8001858 <__libc_init_array+0xc>
 800187a:	f855 3b04 	ldr.w	r3, [r5], #4
 800187e:	4798      	blx	r3
 8001880:	3601      	adds	r6, #1
 8001882:	e7f2      	b.n	800186a <__libc_init_array+0x1e>
 8001884:	08001980 	.word	0x08001980
 8001888:	08001980 	.word	0x08001980
 800188c:	08001980 	.word	0x08001980
 8001890:	08001984 	.word	0x08001984

08001894 <memset>:
 8001894:	4402      	add	r2, r0
 8001896:	4603      	mov	r3, r0
 8001898:	4293      	cmp	r3, r2
 800189a:	d100      	bne.n	800189e <memset+0xa>
 800189c:	4770      	bx	lr
 800189e:	f803 1b01 	strb.w	r1, [r3], #1
 80018a2:	e7f9      	b.n	8001898 <memset+0x4>

080018a4 <_init>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	bf00      	nop
 80018a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018aa:	bc08      	pop	{r3}
 80018ac:	469e      	mov	lr, r3
 80018ae:	4770      	bx	lr

080018b0 <_fini>:
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b2:	bf00      	nop
 80018b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b6:	bc08      	pop	{r3}
 80018b8:	469e      	mov	lr, r3
 80018ba:	4770      	bx	lr
