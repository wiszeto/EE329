
A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c5c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001e08  08001e08  00011e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e88  08001e88  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08001e88  08001e88  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e88  08001e88  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e88  08001e88  00011e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000034  08001ec4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001ec4  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f7e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000129c  00000000  00000000  00024fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00026280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  00026880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273e6  00000000  00000000  00026dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007588  00000000  00000000  0004e1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee74f  00000000  00000000  00055736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143e85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001580  00000000  00000000  00143ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001df0 	.word	0x08001df0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	08001df0 	.word	0x08001df0

080001ec <SysTick_Init>:
#include "delay.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000248:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <keypad_init>:
static    int cols[3] = {Col1, Col2, Col3}; //corresponds to GPIO pins
static    int rows[4] = {Row1, Row2, Row3, Row4}; //coresponds to GPIO pins
static    int delay_time = 10000;

//This function, configures row, column and keypad pin
void keypad_init() {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

    //Making column pins output mode bits(01)
    COL_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2);
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <keypad_init+0x48>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <keypad_init+0x48>)
 800027e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000282:	6013      	str	r3, [r2, #0]
    COL_PORT->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0);
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <keypad_init+0x48>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <keypad_init+0x48>)
 800028a:	f043 0315 	orr.w	r3, r3, #21
 800028e:	6013      	str	r3, [r2, #0]

    //Making row pins input mode bits(00)
    ROW_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <keypad_init+0x4c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <keypad_init+0x4c>)
 8000296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800029a:	6013      	str	r3, [r2, #0]

    //enable pull-down resistor bits(10)
    ROW_PORT->PUPDR &= (GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <keypad_init+0x4c>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <keypad_init+0x4c>)
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	60d3      	str	r3, [r2, #12]
    ROW_PORT->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <keypad_init+0x4c>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <keypad_init+0x4c>)
 80002ac:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 80002b0:	60d3      	str	r3, [r2, #12]
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	48000400 	.word	0x48000400
 80002c0:	48000c00 	.word	0x48000c00

080002c4 <keypad_read>:

int keypad_read(int cols, int row){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
    COL_PORT -> BSRR = (Col1 |Col2|Col3); //outputs column pins to high
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <keypad_read+0x54>)
 80002d0:	2207      	movs	r2, #7
 80002d2:	619a      	str	r2, [r3, #24]

    //check if key is pressed
    if (ROW_PORT->IDR){
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <keypad_read+0x58>)
 80002d6:	691b      	ldr	r3, [r3, #16]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d017      	beq.n	800030c <keypad_read+0x48>

      //debounce delay
    	for (int delay = 0; delay < delay_time; delay++);
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	e002      	b.n	80002e8 <keypad_read+0x24>
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <keypad_read+0x5c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	dbf7      	blt.n	80002e2 <keypad_read+0x1e>

    	//rechecks if key is presses still for debounce
    	if (ROW_PORT->IDR){
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <keypad_read+0x58>)
 80002f4:	691b      	ldr	r3, [r3, #16]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <keypad_read+0x48>
    		COL_PORT->BRR = (Col1 |Col2|Col3); //turn off columns
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <keypad_read+0x54>)
 80002fc:	2207      	movs	r2, #7
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
    		
        //returns array position of keypress
        return check_row_col(NUM_OF_COLS, NUM_OF_ROWS);  
 8000300:	2104      	movs	r1, #4
 8000302:	2003      	movs	r0, #3
 8000304:	f000 f80e 	bl	8000324 <check_row_col>
 8000308:	4603      	mov	r3, r0
 800030a:	e000      	b.n	800030e <keypad_read+0x4a>
    	}
    }
    return '-';
 800030c:	232d      	movs	r3, #45	; 0x2d
}
 800030e:	4618      	mov	r0, r3
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	48000400 	.word	0x48000400
 800031c:	48000c00 	.word	0x48000c00
 8000320:	2000001c 	.word	0x2000001c

08000324 <check_row_col>:

//iterate through each column and check all rows
int check_row_col(int col, int row){
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
    for (int c=0; c < col; c++){
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e025      	b.n	8000380 <check_row_col+0x5c>
        COL_PORT->BSRR = cols[c]; //turn on the column
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <check_row_col+0x74>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <check_row_col+0x78>)
 800033e:	619a      	str	r2, [r3, #24]
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	e015      	b.n	8000372 <check_row_col+0x4e>
            if (ROW_PORT->IDR & (rows[r])) { //Check if key pressed is in the row
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <check_row_col+0x7c>)
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	4916      	ldr	r1, [pc, #88]	; (80003a4 <check_row_col+0x80>)
 800034c:	68ba      	ldr	r2, [r7, #8]
 800034e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000352:	4013      	ands	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	d009      	beq.n	800036c <check_row_col+0x48>
               return keys[r][c]; //returns array position of keypress
 8000358:	4913      	ldr	r1, [pc, #76]	; (80003a8 <check_row_col+0x84>)
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	4613      	mov	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	4413      	add	r3, r2
 8000362:	18ca      	adds	r2, r1, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	4413      	add	r3, r2
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	e00e      	b.n	800038a <check_row_col+0x66>
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	3301      	adds	r3, #1
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	429a      	cmp	r2, r3
 8000378:	dbe5      	blt.n	8000346 <check_row_col+0x22>
    for (int c=0; c < col; c++){
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3301      	adds	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	dbd5      	blt.n	8000334 <check_row_col+0x10>
            }
        }
    }
    return '-';
 8000388:	232d      	movs	r3, #45	; 0x2d
}
 800038a:	4618      	mov	r0, r3
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000
 800039c:	48000400 	.word	0x48000400
 80003a0:	48000c00 	.word	0x48000c00
 80003a4:	2000000c 	.word	0x2000000c
 80003a8:	08001e3c 	.word	0x08001e3c

080003ac <LCD_init>:
void lcd_set_cursor_position(uint8_t row, uint8_t col);

uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
delay_us( 100000 ); // power-up wait 40 ms
 80003b0:	482a      	ldr	r0, [pc, #168]	; (800045c <LCD_init+0xb0>)
 80003b2:	f7ff ff31 	bl	8000218 <delay_us>
RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // enable GPIOA clock on bus
 80003b6:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <LCD_init+0xb4>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a29      	ldr	r2, [pc, #164]	; (8000460 <LCD_init+0xb4>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c

//Making control pins output mode bits(01)
control_pins->MODER &= ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 | GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7); // clear bits for PA
 80003c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80003d0:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 80003d4:	6013      	str	r3, [r2, #0]
control_pins->MODER |= (GPIO_MODER_MODE1_0 |GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0); // set up DB4 to DB7, RS, RW, E as outputs
 80003d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e0:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80003e4:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 80003e8:	6013      	str	r3, [r2, #0]
control_pins->OTYPER &= ~(GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4| GPIO_OTYPER_OT5| GPIO_OTYPER_OT6| GPIO_OTYPER_OT7);
 80003ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80003f8:	6053      	str	r3, [r2, #4]
control_pins->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos)| (3 << GPIO_OSPEEDR_OSPEED3_Pos)| (3 << GPIO_OSPEEDR_OSPEED4_Pos)| (3 << GPIO_OSPEEDR_OSPEED5_Pos)| (3 << GPIO_OSPEEDR_OSPEED6_Pos)| (3 << GPIO_OSPEEDR_OSPEED7_Pos));
 80003fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000404:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000408:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
 800040c:	6093      	str	r3, [r2, #8]
control_pins->BRR = ( D4 | D5 | D6 | D7 | EN | RW | RS ); //Initializes data to all 0
 800040e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000412:	22fe      	movs	r2, #254	; 0xfe
 8000414:	629a      	str	r2, [r3, #40]	; 0x28

delay_us( 100000 ); // power-up wait 40 ms
 8000416:	4811      	ldr	r0, [pc, #68]	; (800045c <LCD_init+0xb0>)
 8000418:	f7ff fefe 	bl	8000218 <delay_us>

command(0x30);
 800041c:	2030      	movs	r0, #48	; 0x30
 800041e:	f000 f83b 	bl	8000498 <command>
delay_us( 100 ); // power-up wait .04 ms
 8000422:	2064      	movs	r0, #100	; 0x64
 8000424:	f7ff fef8 	bl	8000218 <delay_us>
command(0x30);
 8000428:	2030      	movs	r0, #48	; 0x30
 800042a:	f000 f835 	bl	8000498 <command>
delay_us( 100 ); // power-up wait .04 ms
 800042e:	2064      	movs	r0, #100	; 0x64
 8000430:	f7ff fef2 	bl	8000218 <delay_us>
command(0x30);
 8000434:	2030      	movs	r0, #48	; 0x30
 8000436:	f000 f82f 	bl	8000498 <command>
delay_us( 100 ); // power-up wait .04 ms
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f7ff feec 	bl	8000218 <delay_us>
command(0x20);
 8000440:	2020      	movs	r0, #32
 8000442:	f000 f829 	bl	8000498 <command>
delay_us( 100 ); // power-up wait .04 ms
 8000446:	2064      	movs	r0, #100	; 0x64
 8000448:	f7ff fee6 	bl	8000218 <delay_us>
command(0x02);
 800044c:	2002      	movs	r0, #2
 800044e:	f000 f823 	bl	8000498 <command>
delay_us( 100 ); // power-up wait .04 ms
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f7ff fee0 	bl	8000218 <delay_us>
//command(0x28); //Function set: 4-bit/2-line
//command(0x0F); //Display ON; Blinking cursor
//command(0x06); //Entry Mode set
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	000186a0 	.word	0x000186a0
 8000460:	40021000 	.word	0x40021000

08000464 <Nybble>:

void Nybble()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
control_pins->BSRR = EN;
 8000468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800046c:	2208      	movs	r2, #8
 800046e:	619a      	str	r2, [r3, #24]
delay_us( 50 ); // wait
 8000470:	2032      	movs	r0, #50	; 0x32
 8000472:	f7ff fed1 	bl	8000218 <delay_us>
control_pins->BRR = EN;
 8000476:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800047a:	2208      	movs	r2, #8
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
delay_us( 50 ); // wait
 800047e:	2032      	movs	r0, #50	; 0x32
 8000480:	f7ff feca 	bl	8000218 <delay_us>
control_pins->ODR &= ~( (D4 | D5 | D6 | D7) ); // Clears registers
 8000484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000492:	6153      	str	r3, [r2, #20]
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <command>:

void command(uint8_t command)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
    uint8_t command2 = command >> 4;
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	73fb      	strb	r3, [r7, #15]
    control_pins->BRR = (RS | RW); // set RS and RW to zero
 80004a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ac:	2206      	movs	r2, #6
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28

    for (int i = 0; i < 4; i++) {
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e019      	b.n	80004ea <command+0x52>
        if ((command2 >> i) & 0x01) { // Corrected to use command2
 80004b6:	7bfa      	ldrb	r2, [r7, #15]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	fa42 f303 	asr.w	r3, r2, r3
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d007      	beq.n	80004d6 <command+0x3e>
            control_pins->BSRR = GPIO_Pin[i];
 80004c6:	4a26      	ldr	r2, [pc, #152]	; (8000560 <command+0xc8>)
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	e006      	b.n	80004e4 <command+0x4c>
        } else {
            control_pins->BRR = GPIO_Pin[i];
 80004d6:	4a22      	ldr	r2, [pc, #136]	; (8000560 <command+0xc8>)
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e2:	629a      	str	r2, [r3, #40]	; 0x28
    for (int i = 0; i < 4; i++) {
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	3301      	adds	r3, #1
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	dde2      	ble.n	80004b6 <command+0x1e>
        }
    }

    delay_us( 1000 );
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f7ff fe90 	bl	8000218 <delay_us>
    Nybble(); //Send pulse
 80004f8:	f7ff ffb4 	bl	8000464 <Nybble>

    for (int i = 0; i < 4; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	e019      	b.n	8000536 <command+0x9e>
        if ((command >> i) & 0x01) { // Corrected to use command
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	fa42 f303 	asr.w	r3, r2, r3
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d007      	beq.n	8000522 <command+0x8a>
            control_pins->BSRR = GPIO_Pin[i];
 8000512:	4a13      	ldr	r2, [pc, #76]	; (8000560 <command+0xc8>)
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800051a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051e:	619a      	str	r2, [r3, #24]
 8000520:	e006      	b.n	8000530 <command+0x98>
        } else {
            control_pins->BRR = GPIO_Pin[i];
 8000522:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <command+0xc8>)
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800052a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
    for (int i = 0; i < 4; i++) {
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dde2      	ble.n	8000502 <command+0x6a>
        }
    }
    delay_us( 1000 );
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f7ff fe6a 	bl	8000218 <delay_us>
    Nybble(); //Send pulse
 8000544:	f7ff ff8e 	bl	8000464 <Nybble>
    control_pins->ODR &= ~( (D4 | D5 | D6 | D7) ); // Clears registers
 8000548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000556:	6153      	str	r3, [r2, #20]
}
 8000558:	bf00      	nop
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000020 	.word	0x20000020

08000564 <write>:


void write(char letter)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	uint8_t c = letter;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	73fb      	strb	r3, [r7, #15]
	uint8_t c2 = c >> 4;
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
	for (int i = 0; i < 4; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e019      	b.n	80005b2 <write+0x4e>
		    if ((c2 >> i) & 0x01) {
 800057e:	7bba      	ldrb	r2, [r7, #14]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	fa42 f303 	asr.w	r3, r2, r3
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d007      	beq.n	800059e <write+0x3a>
		    	control_pins->BSRR = GPIO_Pin[i];
 800058e:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <write+0xdc>)
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059a:	619a      	str	r2, [r3, #24]
 800059c:	e006      	b.n	80005ac <write+0x48>
		    } else {
		    	control_pins->BRR = GPIO_Pin[i];
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <write+0xdc>)
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < 4; i++) {
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	3301      	adds	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	dde2      	ble.n	800057e <write+0x1a>
		    }
		}

	control_pins->BSRR = (RS); // set RS and RW to zero
 80005b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005bc:	2202      	movs	r2, #2
 80005be:	619a      	str	r2, [r3, #24]
	control_pins->BRR = (RW); // set RS and RW to zero
 80005c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c4:	2204      	movs	r2, #4
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
	delay_us( 1000 );
 80005c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005cc:	f7ff fe24 	bl	8000218 <delay_us>
	Nybble();
 80005d0:	f7ff ff48 	bl	8000464 <Nybble>
	//c = c >> 4;

	for (int i = 0; i < 4; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	e019      	b.n	800060e <write+0xaa>
			    if ((c >> i) & 0x01) {
 80005da:	7bfa      	ldrb	r2, [r7, #15]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	fa42 f303 	asr.w	r3, r2, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d007      	beq.n	80005fa <write+0x96>
			    	control_pins->BSRR = GPIO_Pin[i];
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <write+0xdc>)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f6:	619a      	str	r2, [r3, #24]
 80005f8:	e006      	b.n	8000608 <write+0xa4>
			    } else {
			    	control_pins->BRR = GPIO_Pin[i];
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <write+0xdc>)
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < 4; i++) {
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	3301      	adds	r3, #1
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	2b03      	cmp	r3, #3
 8000612:	dde2      	ble.n	80005da <write+0x76>
			    }
			}
	delay_us( 1000 );
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f7ff fdfe 	bl	8000218 <delay_us>
	Nybble();
 800061c:	f7ff ff22 	bl	8000464 <Nybble>
	control_pins->BRR = (RS); // set RS and RW to zero
 8000620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000624:	2202      	movs	r2, #2
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
	control_pins->ODR &= ~( (D4 | D5 | D6 | D7) ); // Clears registers
 8000628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000636:	6153      	str	r3, [r2, #20]
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000020 	.word	0x20000020

08000644 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
    uint8_t address;

    // Calculate the address based on row and col values
    if (row == 0) {
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d103      	bne.n	8000662 <lcd_set_cursor_position+0x1e>
        address = 0x80 + col; // For row 0, the address starts from 0x80
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	3b80      	subs	r3, #128	; 0x80
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e002      	b.n	8000668 <lcd_set_cursor_position+0x24>
    } else {
        address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	3b40      	subs	r3, #64	; 0x40
 8000666:	73fb      	strb	r3, [r7, #15]
    }

    // Send the command to set the cursor position
    command(address);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff14 	bl	8000498 <command>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <str_write>:



void str_write(const char *str) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    for (int i = 0; str[i] != '\0'; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e00c      	b.n	80006a0 <str_write+0x28>
        write(str[i]);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff68 	bl	8000564 <write>
        delay_us(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f7ff fdbf 	bl	8000218 <delay_us>
    for (int i = 0; str[i] != '\0'; i++) {
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1ec      	bne.n	8000686 <str_write+0xe>
    }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <LCD_reset_count_display>:


////FOR COUNTER
////TEST
////Resets counter display to 00:00
void LCD_reset_count_display(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 80006bc:	210b      	movs	r1, #11
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff ffc0 	bl	8000644 <lcd_set_cursor_position>
	str_write("     ");	//clears with 5 spaces
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <LCD_reset_count_display+0x34>)
 80006c6:	f7ff ffd7 	bl	8000678 <str_write>
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 80006ca:	210b      	movs	r1, #11
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ffb9 	bl	8000644 <lcd_set_cursor_position>
	str_write("00:00");
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <LCD_reset_count_display+0x38>)
 80006d4:	f7ff ffd0 	bl	8000678 <str_write>
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 80006d8:	210b      	movs	r1, #11
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ffb2 	bl	8000644 <lcd_set_cursor_position>
	command(0x0D);						//turns blinking cursor on
 80006e0:	200d      	movs	r0, #13
 80006e2:	f7ff fed9 	bl	8000498 <command>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08001e08 	.word	0x08001e08
 80006f0:	08001e10 	.word	0x08001e10

080006f4 <LCD_update_count_display>:

//This is only for countdown
//Updates LCD with new values
void LCD_update_count_display(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 80006f8:	210b      	movs	r1, #11
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ffa2 	bl	8000644 <lcd_set_cursor_position>
	write(time_asc[3]);
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <LCD_update_count_display+0x40>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2d 	bl	8000564 <write>
	write(time_asc[2]);
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <LCD_update_count_display+0x40>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff28 	bl	8000564 <write>
	write(':');
 8000714:	203a      	movs	r0, #58	; 0x3a
 8000716:	f7ff ff25 	bl	8000564 <write>
	write(time_asc[1]);
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LCD_update_count_display+0x40>)
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff20 	bl	8000564 <write>
	write(time_asc[0]);
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <LCD_update_count_display+0x40>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff1b 	bl	8000564 <write>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000050 	.word	0x20000050

08000738 <load_time>:

//Converts total time (s) to ASCII equivalent values and loads them onto array for uploading
//time_in_sec FOR PARAMETER
void load_time( int total_seconds ){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	uint8_t u_min, l_min, u_sec, l_sec; //initializes values
	u_min = total_seconds / 60;			//gets all the minutes
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <load_time+0xc4>)
 8000744:	fb82 1203 	smull	r1, r2, r2, r3
 8000748:	441a      	add	r2, r3
 800074a:	1152      	asrs	r2, r2, #5
 800074c:	17db      	asrs	r3, r3, #31
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	73fb      	strb	r3, [r7, #15]
	l_min = u_min % 10;					//gets ones minutes
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <load_time+0xc8>)
 8000756:	fba3 1302 	umull	r1, r3, r3, r2
 800075a:	08d9      	lsrs	r1, r3, #3
 800075c:	460b      	mov	r3, r1
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	440b      	add	r3, r1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	73bb      	strb	r3, [r7, #14]
	u_min = u_min / 10;					//gets tens minutes
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <load_time+0xc8>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	73fb      	strb	r3, [r7, #15]

	u_sec = total_seconds % 60; 		//gets all the secs
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <load_time+0xc4>)
 8000778:	fb83 1302 	smull	r1, r3, r3, r2
 800077c:	4413      	add	r3, r2
 800077e:	1159      	asrs	r1, r3, #5
 8000780:	17d3      	asrs	r3, r2, #31
 8000782:	1ac9      	subs	r1, r1, r3
 8000784:	460b      	mov	r3, r1
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	1ad1      	subs	r1, r2, r3
 800078e:	460b      	mov	r3, r1
 8000790:	737b      	strb	r3, [r7, #13]
	l_sec = u_sec % 10;					//gets ones secs
 8000792:	7b7a      	ldrb	r2, [r7, #13]
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <load_time+0xc8>)
 8000796:	fba3 1302 	umull	r1, r3, r3, r2
 800079a:	08d9      	lsrs	r1, r3, #3
 800079c:	460b      	mov	r3, r1
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	440b      	add	r3, r1
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	733b      	strb	r3, [r7, #12]
	u_sec = u_sec / 10;					//gets tens sec
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <load_time+0xc8>)
 80007ac:	fba2 2303 	umull	r2, r3, r2, r3
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	737b      	strb	r3, [r7, #13]

	//Updates array
	time_asc[3] = LCD_convert_time_to_ascii(u_min);
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f826 	bl	8000808 <LCD_convert_time_to_ascii>
 80007bc:	4603      	mov	r3, r0
 80007be:	461a      	mov	r2, r3
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <load_time+0xcc>)
 80007c2:	70da      	strb	r2, [r3, #3]
	time_asc[2] = LCD_convert_time_to_ascii(l_min);
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f81e 	bl	8000808 <LCD_convert_time_to_ascii>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <load_time+0xcc>)
 80007d2:	709a      	strb	r2, [r3, #2]
	time_asc[1] = LCD_convert_time_to_ascii(u_sec);
 80007d4:	7b7b      	ldrb	r3, [r7, #13]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f816 	bl	8000808 <LCD_convert_time_to_ascii>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <load_time+0xcc>)
 80007e2:	705a      	strb	r2, [r3, #1]
	time_asc[0] = LCD_convert_time_to_ascii(l_sec);
 80007e4:	7b3b      	ldrb	r3, [r7, #12]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f80e 	bl	8000808 <LCD_convert_time_to_ascii>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <load_time+0xcc>)
 80007f2:	701a      	strb	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	88888889 	.word	0x88888889
 8000800:	cccccccd 	.word	0xcccccccd
 8000804:	20000050 	.word	0x20000050

08000808 <LCD_convert_time_to_ascii>:

//Fow Wilson's code: Use this to convert integer keypress value into
char LCD_convert_time_to_ascii (uint8_t timeasc){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	return (0x30 + timeasc);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	3330      	adds	r3, #48	; 0x30
 8000816:	b2db      	uxtb	r3, r3
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <time_in_sec>:


//LCD_convert_ascii_to_time FOR PARAMETERS
int time_in_sec( int hmin, int lmin, int hsec, int lsec ){
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	603b      	str	r3, [r7, #0]
	int total_time = 0; 	//to store total time
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
	hmin = hmin*10 + lmin;	//adds total minutes together
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	461a      	mov	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	4413      	add	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
	hsec = hsec*10 + lsec;	//adds total seconds together
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	461a      	mov	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	4413      	add	r3, r2
 8000858:	607b      	str	r3, [r7, #4]
	total_time = (hmin*60 + hsec);
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	4613      	mov	r3, r2
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	617b      	str	r3, [r7, #20]
	return total_time; //returns total time
 800086c:	697b      	ldr	r3, [r7, #20]
}
 800086e:	4618      	mov	r0, r3
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <decrement_time>:

int LCD_convert_ascii_to_time ( uint8_t asctime ){
	return (0x0F & asctime);
}

int decrement_time (int time){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	delay_us(1000000); //delay 1 sec
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <decrement_time+0x20>)
 8000886:	f7ff fcc7 	bl	8000218 <delay_us>
	return (--time);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	000f4240 	.word	0x000f4240

080008a0 <main>:
int lsec = 0;

//Stuff to output to LCD
char output_LCD[4];

int main(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIODEN);
 80008a6:	4b81      	ldr	r3, [pc, #516]	; (8000aac <main+0x20c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a80      	ldr	r2, [pc, #512]	; (8000aac <main+0x20c>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80008b2:	4b7e      	ldr	r3, [pc, #504]	; (8000aac <main+0x20c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a7d      	ldr	r2, [pc, #500]	; (8000aac <main+0x20c>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 80008be:	4b7b      	ldr	r3, [pc, #492]	; (8000aac <main+0x20c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a7a      	ldr	r2, [pc, #488]	; (8000aac <main+0x20c>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
	keypad_init();
 80008ca:	f7ff fcd3 	bl	8000274 <keypad_init>

	//Output LED Config
	// Make pin0 output mode
	GPIOC->MODER &= ~(GPIO_MODER_MODE0);
 80008ce:	4b78      	ldr	r3, [pc, #480]	; (8000ab0 <main+0x210>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a77      	ldr	r2, [pc, #476]	; (8000ab0 <main+0x210>)
 80008d4:	f023 0303 	bic.w	r3, r3, #3
 80008d8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0);
 80008da:	4b75      	ldr	r3, [pc, #468]	; (8000ab0 <main+0x210>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a74      	ldr	r2, [pc, #464]	; (8000ab0 <main+0x210>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODE1);
 80008e6:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <main+0x210>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a71      	ldr	r2, [pc, #452]	; (8000ab0 <main+0x210>)
 80008ec:	f023 030c 	bic.w	r3, r3, #12
 80008f0:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE1_0);
 80008f2:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <main+0x210>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a6e      	ldr	r2, [pc, #440]	; (8000ab0 <main+0x210>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODE2);
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <main+0x210>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a6b      	ldr	r2, [pc, #428]	; (8000ab0 <main+0x210>)
 8000904:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000908:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE2_0);
 800090a:	4b69      	ldr	r3, [pc, #420]	; (8000ab0 <main+0x210>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a68      	ldr	r2, [pc, #416]	; (8000ab0 <main+0x210>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODE3);
 8000916:	4b66      	ldr	r3, [pc, #408]	; (8000ab0 <main+0x210>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a65      	ldr	r2, [pc, #404]	; (8000ab0 <main+0x210>)
 800091c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000920:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE3_0);
 8000922:	4b63      	ldr	r3, [pc, #396]	; (8000ab0 <main+0x210>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a62      	ldr	r2, [pc, #392]	; (8000ab0 <main+0x210>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6013      	str	r3, [r2, #0]

	HAL_Init();
 800092e:	f000 fa6e 	bl	8000e0e <HAL_Init>
	SystemClock_Config();
 8000932:	f000 f997 	bl	8000c64 <SystemClock_Config>
	SysTick_Init();
 8000936:	f7ff fc59 	bl	80001ec <SysTick_Init>
	LCD_init();
 800093a:	f7ff fd37 	bl	80003ac <LCD_init>

	delay_us(100);
 800093e:	2064      	movs	r0, #100	; 0x64
 8000940:	f7ff fc6a 	bl	8000218 <delay_us>
	//const char str[] = "EE 329 A3 TIMER ";
	str_write("EE 329 A3 TIMER");
 8000944:	485b      	ldr	r0, [pc, #364]	; (8000ab4 <main+0x214>)
 8000946:	f7ff fe97 	bl	8000678 <str_write>
	delay_us(100);
 800094a:	2064      	movs	r0, #100	; 0x64
 800094c:	f7ff fc64 	bl	8000218 <delay_us>
	lcd_set_cursor_position(1, 0);
 8000950:	2100      	movs	r1, #0
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fe76 	bl	8000644 <lcd_set_cursor_position>
	delay_us(100);
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f7ff fc5d 	bl	8000218 <delay_us>
	str_write("*=SET #=GO --:--");
 800095e:	4856      	ldr	r0, [pc, #344]	; (8000ab8 <main+0x218>)
 8000960:	f7ff fe8a 	bl	8000678 <str_write>
	lcd_set_cursor_position(1, 10);
 8000964:	210a      	movs	r1, #10
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff fe6c 	bl	8000644 <lcd_set_cursor_position>
	command(0x0D);		//turns blinking cursor on to indicate ready for input
 800096c:	200d      	movs	r0, #13
 800096e:	f7ff fd93 	bl	8000498 <command>


	int total_time_sec = time_in_sec(0, 0, 0, 0);
 8000972:	2300      	movs	r3, #0
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff53 	bl	8000824 <time_in_sec>
 800097e:	6078      	str	r0, [r7, #4]
	reset_state = 1; //starts off at reset state waiting for asterik key to be pushed
 8000980:	4b4e      	ldr	r3, [pc, #312]	; (8000abc <main+0x21c>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]

	while (1) {

		//-----------------START OF SEQUENCE----------------------------------
		//Keeps you in reset state after reset push button
		while (reset_state) {
 8000986:	e015      	b.n	80009b4 <main+0x114>
			char star_check = keypad_read(4, 3); //checks if asterisk is pushed to get out of reset state
 8000988:	2103      	movs	r1, #3
 800098a:	2004      	movs	r0, #4
 800098c:	f7ff fc9a 	bl	80002c4 <keypad_read>
 8000990:	4603      	mov	r3, r0
 8000992:	703b      	strb	r3, [r7, #0]
			if (star_check == '*') { 				//Checks if button is pushed
 8000994:	783b      	ldrb	r3, [r7, #0]
 8000996:	2b2a      	cmp	r3, #42	; 0x2a
 8000998:	d10c      	bne.n	80009b4 <main+0x114>
					reset = 0;	//ensures reset is 0 so doesn't reset display
 800099a:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <main+0x220>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
					reset_state = 0;//takes me out of reset state allows me to take inputs
 80009a0:	4b46      	ldr	r3, [pc, #280]	; (8000abc <main+0x21c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
					lcd_set_cursor_position(1, 11);
 80009a6:	210b      	movs	r1, #11
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fe4b 	bl	8000644 <lcd_set_cursor_position>
					delay_us(1000000); //important
 80009ae:	4845      	ldr	r0, [pc, #276]	; (8000ac4 <main+0x224>)
 80009b0:	f7ff fc32 	bl	8000218 <delay_us>
		while (reset_state) {
 80009b4:	4b41      	ldr	r3, [pc, #260]	; (8000abc <main+0x21c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1e5      	bne.n	8000988 <main+0xe8>

		}

		//-------------------START REGISTERING KEYAPD INPUTS
		//Starts registering keypad inputs
		while ((four_push < 5) & (reset == 0)) { //This might not update screen when pushing
 80009bc:	e0cd      	b.n	8000b5a <main+0x2ba>

			char output = keypad_read(4, 3); //get key value
 80009be:	2103      	movs	r1, #3
 80009c0:	2004      	movs	r0, #4
 80009c2:	f7ff fc7f 	bl	80002c4 <keypad_read>
 80009c6:	4603      	mov	r3, r0
 80009c8:	70fb      	strb	r3, [r7, #3]
			if (output != '-') { //if button is pushed sets value to dispaly to LED
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	2b2d      	cmp	r3, #45	; 0x2d
 80009ce:	f000 80c4 	beq.w	8000b5a <main+0x2ba>

				if (output == '*') reset = 1;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	2b2a      	cmp	r3, #42	; 0x2a
 80009d6:	d103      	bne.n	80009e0 <main+0x140>
 80009d8:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <main+0x220>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e094      	b.n	8000b0a <main+0x26a>

				else if (four_push == 0) {
 80009e0:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <main+0x228>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d121      	bne.n	8000a2c <main+0x18c>
					lcd_set_cursor_position(1, 11);
 80009e8:	210b      	movs	r1, #11
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff fe2a 	bl	8000644 <lcd_set_cursor_position>
					hmin = output - '0';
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	3b30      	subs	r3, #48	; 0x30
 80009f4:	4a35      	ldr	r2, [pc, #212]	; (8000acc <main+0x22c>)
 80009f6:	6013      	str	r3, [r2, #0]
					if (hmin > 5) hmin = 5;
 80009f8:	4b34      	ldr	r3, [pc, #208]	; (8000acc <main+0x22c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	dd02      	ble.n	8000a06 <main+0x166>
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <main+0x22c>)
 8000a02:	2205      	movs	r2, #5
 8000a04:	601a      	str	r2, [r3, #0]
					output = hmin + '0';
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <main+0x22c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	3330      	adds	r3, #48	; 0x30
 8000a0e:	70fb      	strb	r3, [r7, #3]
					write(output);
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fda6 	bl	8000564 <write>
					delay_us(1000000);
 8000a18:	482a      	ldr	r0, [pc, #168]	; (8000ac4 <main+0x224>)
 8000a1a:	f7ff fbfd 	bl	8000218 <delay_us>
					++four_push;
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <main+0x228>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <main+0x228>)
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e06e      	b.n	8000b0a <main+0x26a>
				}
				else if (four_push == 1) {
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <main+0x228>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d115      	bne.n	8000a60 <main+0x1c0>
									lcd_set_cursor_position(1, 12);
 8000a34:	210c      	movs	r1, #12
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fe04 	bl	8000644 <lcd_set_cursor_position>
									lmin = output - '0';
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	3b30      	subs	r3, #48	; 0x30
 8000a40:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <main+0x230>)
 8000a42:	6013      	str	r3, [r2, #0]
									write(output);
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd8c 	bl	8000564 <write>
									delay_us(1000000);
 8000a4c:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <main+0x224>)
 8000a4e:	f7ff fbe3 	bl	8000218 <delay_us>
									++four_push;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <main+0x228>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <main+0x228>)
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	e054      	b.n	8000b0a <main+0x26a>
								}
				else if (four_push == 2) {
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <main+0x228>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d137      	bne.n	8000ad8 <main+0x238>
									lcd_set_cursor_position(1, 14);
 8000a68:	210e      	movs	r1, #14
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fdea 	bl	8000644 <lcd_set_cursor_position>
									hsec = output - '0';
 8000a70:	78fb      	ldrb	r3, [r7, #3]
 8000a72:	3b30      	subs	r3, #48	; 0x30
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <main+0x234>)
 8000a76:	6013      	str	r3, [r2, #0]
									if (hsec > 5) hsec = 5;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <main+0x234>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	dd02      	ble.n	8000a86 <main+0x1e6>
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <main+0x234>)
 8000a82:	2205      	movs	r2, #5
 8000a84:	601a      	str	r2, [r3, #0]
									output = hsec + '0';
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <main+0x234>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	3330      	adds	r3, #48	; 0x30
 8000a8e:	70fb      	strb	r3, [r7, #3]
									write(output);
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fd66 	bl	8000564 <write>
									delay_us(1000000);
 8000a98:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <main+0x224>)
 8000a9a:	f7ff fbbd 	bl	8000218 <delay_us>
									++four_push;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <main+0x228>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <main+0x228>)
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e02e      	b.n	8000b0a <main+0x26a>
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	48000800 	.word	0x48000800
 8000ab4:	08001e18 	.word	0x08001e18
 8000ab8:	08001e28 	.word	0x08001e28
 8000abc:	20000057 	.word	0x20000057
 8000ac0:	20000055 	.word	0x20000055
 8000ac4:	000f4240 	.word	0x000f4240
 8000ac8:	20000054 	.word	0x20000054
 8000acc:	20000058 	.word	0x20000058
 8000ad0:	2000005c 	.word	0x2000005c
 8000ad4:	20000060 	.word	0x20000060
								}
				else if (four_push == 3) {
 8000ad8:	4b59      	ldr	r3, [pc, #356]	; (8000c40 <main+0x3a0>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d114      	bne.n	8000b0a <main+0x26a>
									lcd_set_cursor_position(1, 15);
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fdae 	bl	8000644 <lcd_set_cursor_position>
									lsec = output - '0';
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	3b30      	subs	r3, #48	; 0x30
 8000aec:	4a55      	ldr	r2, [pc, #340]	; (8000c44 <main+0x3a4>)
 8000aee:	6013      	str	r3, [r2, #0]
									write(output);
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fd36 	bl	8000564 <write>
									delay_us(1000000);
 8000af8:	4853      	ldr	r0, [pc, #332]	; (8000c48 <main+0x3a8>)
 8000afa:	f7ff fb8d 	bl	8000218 <delay_us>
									++four_push;
 8000afe:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <main+0x3a0>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b4e      	ldr	r3, [pc, #312]	; (8000c40 <main+0x3a0>)
 8000b08:	701a      	strb	r2, [r3, #0]
								}
				if ((four_push == 4) & (output == '#'))  {
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <main+0x3a0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b23      	cmp	r3, #35	; 0x23
 8000b1c:	bf0c      	ite	eq
 8000b1e:	2301      	moveq	r3, #1
 8000b20:	2300      	movne	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4013      	ands	r3, r2
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d016      	beq.n	8000b5a <main+0x2ba>
					total_time_sec = time_in_sec(hmin, lmin, hsec, lsec);
 8000b2c:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <main+0x3ac>)
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <main+0x3b0>)
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <main+0x3b4>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <main+0x3a4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f7ff fe72 	bl	8000824 <time_in_sec>
 8000b40:	6078      	str	r0, [r7, #4]
					GPIOC->BSRR = GPIO_PIN_0;
 8000b42:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <main+0x3b8>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	619a      	str	r2, [r3, #24]
					go = 1;
 8000b48:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <main+0x3bc>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
					++four_push;
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <main+0x3a0>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <main+0x3a0>)
 8000b58:	701a      	strb	r2, [r3, #0]
		while ((four_push < 5) & (reset == 0)) { //This might not update screen when pushing
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <main+0x3a0>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf94      	ite	ls
 8000b62:	2301      	movls	r3, #1
 8000b64:	2300      	movhi	r3, #0
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <main+0x3c0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf0c      	ite	eq
 8000b70:	2301      	moveq	r3, #1
 8000b72:	2300      	movne	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4013      	ands	r3, r2
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f47f af1f 	bne.w	80009be <main+0x11e>
					}	//Takes last keypad input and enables go to start countdown
			}
		}

		//--------------------WAITING FOR GO KEYPRESS TO START COUNTDOWN
		if (go) {
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <main+0x3bc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d042      	beq.n	8000c0e <main+0x36e>
			GPIOC->BRR = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3); 	// turns off LED after
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <main+0x3b8>)
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
			go = 0;			//no longer takes go input to start countdown (this could potentially break sequencing might have to put it in the while start countdown at the very end)
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <main+0x3bc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
			//-----------------START TO COUNTDOWN
			while ((total_time_sec != 0) & (reset == 0)) {
 8000b94:	e02a      	b.n	8000bec <main+0x34c>
				char output = keypad_read(4, 3); 	// get key value
 8000b96:	2103      	movs	r1, #3
 8000b98:	2004      	movs	r0, #4
 8000b9a:	f7ff fb93 	bl	80002c4 <keypad_read>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	70bb      	strb	r3, [r7, #2]
				if (output == '*')	{				//if reset is pushed
 8000ba2:	78bb      	ldrb	r3, [r7, #2]
 8000ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ba6:	d106      	bne.n	8000bb6 <main+0x316>
					reset = 1;
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <main+0x3c0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
					load_time(0);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fdc2 	bl	8000738 <load_time>
 8000bb4:	e01a      	b.n	8000bec <main+0x34c>
				}

				else {
					total_time_sec = decrement_time(total_time_sec);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fe60 	bl	800087c <decrement_time>
 8000bbc:	6078      	str	r0, [r7, #4]
					load_time(total_time_sec);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fdba 	bl	8000738 <load_time>
					LCD_update_count_display(); //displays it to the LCD
 8000bc4:	f7ff fd96 	bl	80006f4 <LCD_update_count_display>

					if (total_time_sec == 0)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10e      	bne.n	8000bec <main+0x34c>
						while (1) {
						    GPIOC->BSRR = GPIO_PIN_0; //turns LED on only when countdown is complete
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <main+0x3b8>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	619a      	str	r2, [r3, #24]

						    char output = keypad_read(4, 3);
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f7ff fb74 	bl	80002c4 <keypad_read>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	707b      	strb	r3, [r7, #1]
						    if (output == '*') {
 8000be0:	787b      	ldrb	r3, [r7, #1]
 8000be2:	2b2a      	cmp	r3, #42	; 0x2a
 8000be4:	d1f3      	bne.n	8000bce <main+0x32e>
						        reset = 1;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <main+0x3c0>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
			while ((total_time_sec != 0) & (reset == 0)) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <main+0x3c0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf0c      	ite	eq
 8000c00:	2301      	moveq	r3, #1
 8000c02:	2300      	movne	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4013      	ands	r3, r2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1c3      	bne.n	8000b96 <main+0x2f6>
						}
}
			}
		}

		if (reset) {
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <main+0x3c0>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f43f aece 	beq.w	80009b4 <main+0x114>
			reset = 0;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <main+0x3c0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
			four_push = 0;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <main+0x3a0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
			GPIOC->BRR = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 ); //turns LED on only when countdown is complete
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <main+0x3b8>)
 8000c26:	220f      	movs	r2, #15
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_reset_count_display();
 8000c2a:	f7ff fd45 	bl	80006b8 <LCD_reset_count_display>
			lcd_set_cursor_position(1, 11);
 8000c2e:	210b      	movs	r1, #11
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff fd07 	bl	8000644 <lcd_set_cursor_position>
			delay_us(1000000); //important
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <main+0x3a8>)
 8000c38:	f7ff faee 	bl	8000218 <delay_us>
		while (reset_state) {
 8000c3c:	e6ba      	b.n	80009b4 <main+0x114>
 8000c3e:	bf00      	nop
 8000c40:	20000054 	.word	0x20000054
 8000c44:	20000064 	.word	0x20000064
 8000c48:	000f4240 	.word	0x000f4240
 8000c4c:	20000058 	.word	0x20000058
 8000c50:	2000005c 	.word	0x2000005c
 8000c54:	20000060 	.word	0x20000060
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	20000056 	.word	0x20000056
 8000c60:	20000055 	.word	0x20000055

08000c64 <SystemClock_Config>:

		}
	}
}

void SystemClock_Config(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b096      	sub	sp, #88	; 0x58
 8000c68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2244      	movs	r2, #68	; 0x44
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f8b4 	bl	8001de0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8a:	f000 fa29 	bl	80010e0 <HAL_PWREx_ControlVoltageScaling>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000c94:	f000 f82c 	bl	8000cf0 <Error_Handler>
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fa6b 	bl	800118c <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x5c>
		Error_Handler();
 8000cbc:	f000 f818 	bl	8000cf0 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fe71 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x84>
		Error_Handler();
 8000ce4:	f000 f804 	bl	8000cf0 <Error_Handler>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	3758      	adds	r7, #88	; 0x58
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <Error_Handler>:

void Error_Handler(void) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop

	__disable_irq();
	while (1) {
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x44>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x44>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x44>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x44>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x44>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x44>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f892 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff ffea 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f000 ffd5 	bl	8001d98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dee:	f7ff fd57 	bl	80008a0 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000e00:	08001e90 	.word	0x08001e90
  ldr r2, =_sbss
 8000e04:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000e08:	2000006c 	.word	0x2000006c

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>

08000e0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f91f 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f000 f80e 	bl	8000e40 <HAL_InitTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	e001      	b.n	8000e34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e30:	f7ff ff64 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d023      	beq.n	8000e9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_InitTick+0x70>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_InitTick+0x6c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f91d 	bl	80010aa <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10f      	bne.n	8000e96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d809      	bhi.n	8000e90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f8f5 	bl	8001072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_InitTick+0x74>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e007      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e004      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e001      	b.n	8000ea0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000030 	.word	0x20000030
 8000eb0:	20000028 	.word	0x20000028
 8000eb4:	2000002c 	.word	0x2000002c

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	20000068 	.word	0x20000068

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000068 	.word	0x20000068

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40007000 	.word	0x40007000

080010e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ee:	d130      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fc:	d038      	beq.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2232      	movs	r2, #50	; 0x32
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	0c9b      	lsrs	r3, r3, #18
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001124:	e002      	b.n	800112c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3b01      	subs	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001138:	d102      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f2      	bne.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114c:	d110      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e00f      	b.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d007      	beq.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000
 8001184:	20000028 	.word	0x20000028
 8001188:	431bde83 	.word	0x431bde83

0800118c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f000 bc08 	b.w	80019b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a0:	4b96      	ldr	r3, [pc, #600]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011aa:	4b94      	ldr	r3, [pc, #592]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80e4 	beq.w	800138a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_RCC_OscConfig+0x4c>
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	f040 808b 	bne.w	80012e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	f040 8087 	bne.w	80012e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d8:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_OscConfig+0x64>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e3df      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	4b81      	ldr	r3, [pc, #516]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_RCC_OscConfig+0x7e>
 8001200:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001208:	e005      	b.n	8001216 <HAL_RCC_OscConfig+0x8a>
 800120a:	4b7c      	ldr	r3, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001216:	4293      	cmp	r3, r2
 8001218:	d223      	bcs.n	8001262 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd5a 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e3c0      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122e:	4b73      	ldr	r3, [pc, #460]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a72      	ldr	r2, [pc, #456]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b70      	ldr	r3, [pc, #448]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	496d      	ldr	r1, [pc, #436]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	4968      	ldr	r1, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
 8001260:	e025      	b.n	80012ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001262:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a65      	ldr	r2, [pc, #404]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4960      	ldr	r1, [pc, #384]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001280:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	495b      	ldr	r1, [pc, #364]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fd1a 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e380      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012ae:	f000 fc87 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b51      	ldr	r3, [pc, #324]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	4950      	ldr	r1, [pc, #320]	; (8001400 <HAL_RCC_OscConfig+0x274>)
 80012c0:	5ccb      	ldrb	r3, [r1, r3]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_RCC_OscConfig+0x278>)
 80012cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fdb4 	bl	8000e40 <HAL_InitTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d052      	beq.n	8001388 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	e364      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d032      	beq.n	8001354 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ee:	4b43      	ldr	r3, [pc, #268]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a42      	ldr	r2, [pc, #264]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fdf1 	bl	8000ee0 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001302:	f7ff fded 	bl	8000ee0 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e34d      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a35      	ldr	r2, [pc, #212]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4930      	ldr	r1, [pc, #192]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	492b      	ldr	r1, [pc, #172]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
 8001352:	e01a      	b.n	800138a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a28      	ldr	r2, [pc, #160]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001360:	f7ff fdbe 	bl	8000ee0 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001368:	f7ff fdba 	bl	8000ee0 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e31a      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x1dc>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d073      	beq.n	800147e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x21c>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d10e      	bne.n	80013c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d10b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d063      	beq.n	800147c <HAL_RCC_OscConfig+0x2f0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d15f      	bne.n	800147c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e2f7      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x24c>
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e025      	b.n	8001424 <HAL_RCC_OscConfig+0x298>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d114      	bne.n	800140c <HAL_RCC_OscConfig+0x280>
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a02      	ldr	r2, [pc, #8]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e013      	b.n	8001424 <HAL_RCC_OscConfig+0x298>
 80013fc:	40021000 	.word	0x40021000
 8001400:	08001e48 	.word	0x08001e48
 8001404:	20000028 	.word	0x20000028
 8001408:	2000002c 	.word	0x2000002c
 800140c:	4ba0      	ldr	r3, [pc, #640]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9f      	ldr	r2, [pc, #636]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b9d      	ldr	r3, [pc, #628]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a9c      	ldr	r2, [pc, #624]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fd58 	bl	8000ee0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fd54 	bl	8000ee0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e2b4      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001446:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2a8>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fd44 	bl	8000ee0 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fd40 	bl	8000ee0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e2a0      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x2d0>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d060      	beq.n	800154c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x310>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d119      	bne.n	80014ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d116      	bne.n	80014ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149c:	4b7c      	ldr	r3, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x328>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e27d      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b76      	ldr	r3, [pc, #472]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	4973      	ldr	r1, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c8:	e040      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d023      	beq.n	800151a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fcff 	bl	8000ee0 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fcfb 	bl	8000ee0 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e25b      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	4b65      	ldr	r3, [pc, #404]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b62      	ldr	r3, [pc, #392]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	495f      	ldr	r1, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
 8001518:	e018      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5c      	ldr	r2, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fcdb 	bl	8000ee0 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fcd7 	bl	8000ee0 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e237      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d03c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01c      	beq.n	800159a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fcb6 	bl	8000ee0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fcb2 	bl	8000ee0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e212      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ef      	beq.n	8001578 <HAL_RCC_OscConfig+0x3ec>
 8001598:	e01b      	b.n	80015d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a0:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fc99 	bl	8000ee0 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc95 	bl	8000ee0 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1f5      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ef      	bne.n	80015b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80a6 	beq.w	800172c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a26      	ldr	r2, [pc, #152]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001608:	2301      	movs	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d118      	bne.n	800164a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001624:	f7ff fc5c 	bl	8000ee0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162c:	f7ff fc58 	bl	8000ee0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1b8      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_RCC_OscConfig+0x4d8>
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001662:	e029      	b.n	80016b8 <HAL_RCC_OscConfig+0x52c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d115      	bne.n	8001698 <HAL_RCC_OscConfig+0x50c>
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x52c>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
 8001698:	4b9d      	ldr	r3, [pc, #628]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	4a9c      	ldr	r2, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a8:	4b99      	ldr	r3, [pc, #612]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a98      	ldr	r2, [pc, #608]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d016      	beq.n	80016ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc0e 	bl	8000ee0 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c6:	e00a      	b.n	80016de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc0a 	bl	8000ee0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e168      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016de:	4b8c      	ldr	r3, [pc, #560]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ed      	beq.n	80016c8 <HAL_RCC_OscConfig+0x53c>
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fbf7 	bl	8000ee0 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fbf3 	bl	8000ee0 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e151      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170c:	4b80      	ldr	r3, [pc, #512]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ed      	bne.n	80016f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b7b      	ldr	r3, [pc, #492]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a7a      	ldr	r2, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d03c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01c      	beq.n	800177a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001740:	4b73      	ldr	r3, [pc, #460]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001746:	4a72      	ldr	r2, [pc, #456]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fbc6 	bl	8000ee0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001758:	f7ff fbc2 	bl	8000ee0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e122      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800176a:	4b69      	ldr	r3, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ef      	beq.n	8001758 <HAL_RCC_OscConfig+0x5cc>
 8001778:	e01b      	b.n	80017b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800177a:	4b65      	ldr	r3, [pc, #404]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800177c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001780:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff fba9 	bl	8000ee0 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001792:	f7ff fba5 	bl	8000ee0 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e105      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017a4:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80017a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80f9 	beq.w	80019ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	f040 80cf 	bne.w	8001964 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017c6:	4b52      	ldr	r3, [pc, #328]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0203 	and.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d12c      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	3b01      	subs	r3, #1
 80017e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d123      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d11b      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d113      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	3b01      	subs	r3, #1
 800181a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d109      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d071      	beq.n	8001918 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d068      	beq.n	800190c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0ac      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800185c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001860:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001862:	f7ff fb3d 	bl	8000ee0 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fb39 	bl	8000ee0 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e099      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_OscConfig+0x788>)
 800188e:	4013      	ands	r3, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001898:	3a01      	subs	r2, #1
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018a2:	0212      	lsls	r2, r2, #8
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018aa:	0852      	lsrs	r2, r2, #1
 80018ac:	3a01      	subs	r2, #1
 80018ae:	0552      	lsls	r2, r2, #21
 80018b0:	4311      	orrs	r1, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b6:	0852      	lsrs	r2, r2, #1
 80018b8:	3a01      	subs	r2, #1
 80018ba:	0652      	lsls	r2, r2, #25
 80018bc:	4311      	orrs	r1, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c2:	06d2      	lsls	r2, r2, #27
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4912      	ldr	r1, [pc, #72]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e4:	f7ff fafc 	bl	8000ee0 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff faf8 	bl	8000ee0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e058      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCC_OscConfig+0x784>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190a:	e050      	b.n	80019ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e04f      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
 8001910:	40021000 	.word	0x40021000
 8001914:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d144      	bne.n	80019ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800193c:	f7ff fad0 	bl	8000ee0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff facc 	bl	8000ee0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e02c      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x7b8>
 8001962:	e024      	b.n	80019ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d01f      	beq.n	80019aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 8001970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff fab3 	bl	8000ee0 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff faaf 	bl	8000ee0 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e00f      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4905      	ldr	r1, [pc, #20]	; (80019b8 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x830>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e001      	b.n	80019ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	feeefffc 	.word	0xfeeefffc

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0e7      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d910      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4970      	ldr	r1, [pc, #448]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cf      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d908      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4960      	ldr	r1, [pc, #384]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d04c      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d121      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0a6      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d115      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e09a      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a76:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e08e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e086      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4943      	ldr	r1, [pc, #268]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa8:	f7ff fa1a 	bl	8000ee0 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff fa16 	bl	8000ee0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e06e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d208      	bcs.n	8001b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	492b      	ldr	r1, [pc, #172]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d210      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 0207 	bic.w	r2, r3, #7
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e036      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b74:	f000 f824 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	490b      	ldr	r1, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1fc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f951 	bl	8000e40 <HAL_InitTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	08001e48 	.word	0x08001e48
 8001bb8:	20000028 	.word	0x20000028
 8001bbc:	2000002c 	.word	0x2000002c

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11e      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d134      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0xac>
 8001c64:	e005      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	617b      	str	r3, [r7, #20]
      break;
 8001c70:	e002      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	617b      	str	r3, [r7, #20]
      break;
 8001c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	0e5b      	lsrs	r3, r3, #25
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08001e58 	.word	0x08001e58
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200

08001cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf0:	f7ff f9e8 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 8001cf4:	6178      	str	r0, [r7, #20]
 8001cf6:	e014      	b.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d10:	f7ff f9d8 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 8001d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d28:	d10b      	bne.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d919      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2ba0      	cmp	r3, #160	; 0xa0
 8001d34:	d902      	bls.n	8001d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e013      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e010      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d902      	bls.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e00a      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d102      	bne.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d54:	2302      	movs	r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e004      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b70      	cmp	r3, #112	; 0x70
 8001d5e:	d101      	bne.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 0207 	bic.w	r2, r3, #7
 8001d6c:	4909      	ldr	r1, [pc, #36]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40022000 	.word	0x40022000

08001d98 <__libc_init_array>:
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	4d0d      	ldr	r5, [pc, #52]	; (8001dd0 <__libc_init_array+0x38>)
 8001d9c:	4c0d      	ldr	r4, [pc, #52]	; (8001dd4 <__libc_init_array+0x3c>)
 8001d9e:	1b64      	subs	r4, r4, r5
 8001da0:	10a4      	asrs	r4, r4, #2
 8001da2:	2600      	movs	r6, #0
 8001da4:	42a6      	cmp	r6, r4
 8001da6:	d109      	bne.n	8001dbc <__libc_init_array+0x24>
 8001da8:	4d0b      	ldr	r5, [pc, #44]	; (8001dd8 <__libc_init_array+0x40>)
 8001daa:	4c0c      	ldr	r4, [pc, #48]	; (8001ddc <__libc_init_array+0x44>)
 8001dac:	f000 f820 	bl	8001df0 <_init>
 8001db0:	1b64      	subs	r4, r4, r5
 8001db2:	10a4      	asrs	r4, r4, #2
 8001db4:	2600      	movs	r6, #0
 8001db6:	42a6      	cmp	r6, r4
 8001db8:	d105      	bne.n	8001dc6 <__libc_init_array+0x2e>
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
 8001dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc0:	4798      	blx	r3
 8001dc2:	3601      	adds	r6, #1
 8001dc4:	e7ee      	b.n	8001da4 <__libc_init_array+0xc>
 8001dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dca:	4798      	blx	r3
 8001dcc:	3601      	adds	r6, #1
 8001dce:	e7f2      	b.n	8001db6 <__libc_init_array+0x1e>
 8001dd0:	08001e88 	.word	0x08001e88
 8001dd4:	08001e88 	.word	0x08001e88
 8001dd8:	08001e88 	.word	0x08001e88
 8001ddc:	08001e8c 	.word	0x08001e8c

08001de0 <memset>:
 8001de0:	4402      	add	r2, r0
 8001de2:	4603      	mov	r3, r0
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d100      	bne.n	8001dea <memset+0xa>
 8001de8:	4770      	bx	lr
 8001dea:	f803 1b01 	strb.w	r1, [r3], #1
 8001dee:	e7f9      	b.n	8001de4 <memset+0x4>

08001df0 <_init>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	bf00      	nop
 8001df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df6:	bc08      	pop	{r3}
 8001df8:	469e      	mov	lr, r3
 8001dfa:	4770      	bx	lr

08001dfc <_fini>:
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	bf00      	nop
 8001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e02:	bc08      	pop	{r3}
 8001e04:	469e      	mov	lr, r3
 8001e06:	4770      	bx	lr
