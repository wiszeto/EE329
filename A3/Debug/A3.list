
A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a4c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c9c  08001c9c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08001c9c  08001c9c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c9c  08001c9c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c9c  08001c9c  00011c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000034  08001cd8  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001cd8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c72  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001289  00000000  00000000  00024cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00025f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  00026560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273e6  00000000  00000000  00026aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007517  00000000  00000000  0004de8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee758  00000000  00000000  000553a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001580  00000000  00000000  00143b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001be0 	.word	0x08001be0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	08001be0 	.word	0x08001be0

080001ec <SysTick_Init>:
#include "delay.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000248:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <keypad_read>:
    //enable pull-down resistor bits(10)
    ROW_PORT->PUPDR &= (GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
    ROW_PORT->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
}

int keypad_read(int cols, int row){
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
    COL_PORT -> BSRR = (Col1 |Col2|Col3); //outputs column pins to high
 800027e:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <keypad_read+0x54>)
 8000280:	2207      	movs	r2, #7
 8000282:	619a      	str	r2, [r3, #24]

    //check if key is pressed
    if (ROW_PORT->IDR){
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <keypad_read+0x58>)
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d017      	beq.n	80002bc <keypad_read+0x48>

      //debounce delay
    	for (int delay = 0; delay < delay_time; delay++);
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e002      	b.n	8000298 <keypad_read+0x24>
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <keypad_read+0x5c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	68fa      	ldr	r2, [r7, #12]
 800029e:	429a      	cmp	r2, r3
 80002a0:	dbf7      	blt.n	8000292 <keypad_read+0x1e>

    	//rechecks if key is presses still for debounce
    	if (ROW_PORT->IDR){
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <keypad_read+0x58>)
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d008      	beq.n	80002bc <keypad_read+0x48>
    		COL_PORT->BRR = (Col1 |Col2|Col3); //turn off columns
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <keypad_read+0x54>)
 80002ac:	2207      	movs	r2, #7
 80002ae:	629a      	str	r2, [r3, #40]	; 0x28
    		
        //returns array position of keypress
        return check_row_col(NUM_OF_COLS, NUM_OF_ROWS);  
 80002b0:	2104      	movs	r1, #4
 80002b2:	2003      	movs	r0, #3
 80002b4:	f000 f80e 	bl	80002d4 <check_row_col>
 80002b8:	4603      	mov	r3, r0
 80002ba:	e001      	b.n	80002c0 <keypad_read+0x4c>
    	}
    }
    return -1;
 80002bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	48000400 	.word	0x48000400
 80002cc:	48000c00 	.word	0x48000c00
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <check_row_col>:

//iterate through each column and check all rows
int check_row_col(int col, int row){
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
    for (int c=0; c < col; c++){
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	e025      	b.n	8000330 <check_row_col+0x5c>
        COL_PORT->BSRR = cols[c]; //turn on the column
 80002e4:	4a18      	ldr	r2, [pc, #96]	; (8000348 <check_row_col+0x74>)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <check_row_col+0x78>)
 80002ee:	619a      	str	r2, [r3, #24]
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	e015      	b.n	8000322 <check_row_col+0x4e>
            if (ROW_PORT->IDR & (rows[r])) { //Check if key pressed is in the row
 80002f6:	4b16      	ldr	r3, [pc, #88]	; (8000350 <check_row_col+0x7c>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	4916      	ldr	r1, [pc, #88]	; (8000354 <check_row_col+0x80>)
 80002fc:	68ba      	ldr	r2, [r7, #8]
 80002fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000302:	4013      	ands	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d009      	beq.n	800031c <check_row_col+0x48>
               return keys[r][c]; //returns array position of keypress
 8000308:	4913      	ldr	r1, [pc, #76]	; (8000358 <check_row_col+0x84>)
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	4613      	mov	r3, r2
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4413      	add	r3, r2
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4413      	add	r3, r2
 8000316:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800031a:	e00f      	b.n	800033c <check_row_col+0x68>
        for (int r=0; r < row; r++){ //Check if key pressed is in the row
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	429a      	cmp	r2, r3
 8000328:	dbe5      	blt.n	80002f6 <check_row_col+0x22>
    for (int c=0; c < col; c++){
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	3301      	adds	r3, #1
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	429a      	cmp	r2, r3
 8000336:	dbd5      	blt.n	80002e4 <check_row_col+0x10>
            }
        }
    }
    return -1;
 8000338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	20000000 	.word	0x20000000
 800034c:	48000400 	.word	0x48000400
 8000350:	48000c00 	.word	0x48000c00
 8000354:	2000000c 	.word	0x2000000c
 8000358:	08001c2c 	.word	0x08001c2c

0800035c <LCD_init>:
void lcd_set_cursor_position(uint8_t row, uint8_t col);

uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
delay_us( 100000 ); // power-up wait 40 ms
 8000360:	482a      	ldr	r0, [pc, #168]	; (800040c <LCD_init+0xb0>)
 8000362:	f7ff ff59 	bl	8000218 <delay_us>
RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // enable GPIOA clock on bus
 8000366:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <LCD_init+0xb4>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	4a29      	ldr	r2, [pc, #164]	; (8000410 <LCD_init+0xb4>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	64d3      	str	r3, [r2, #76]	; 0x4c

//Making control pins output mode bits(01)
control_pins->MODER &= ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 | GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7); // clear bits for PA
 8000372:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800037c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000380:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8000384:	6013      	str	r3, [r2, #0]
control_pins->MODER |= (GPIO_MODER_MODE1_0 |GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0); // set up DB4 to DB7, RS, RW, E as outputs
 8000386:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000390:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000394:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 8000398:	6013      	str	r3, [r2, #0]
control_pins->OTYPER &= ~(GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4| GPIO_OTYPER_OT5| GPIO_OTYPER_OT6| GPIO_OTYPER_OT7);
 800039a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80003a8:	6053      	str	r3, [r2, #4]
control_pins->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos)| (3 << GPIO_OSPEEDR_OSPEED3_Pos)| (3 << GPIO_OSPEEDR_OSPEED4_Pos)| (3 << GPIO_OSPEEDR_OSPEED5_Pos)| (3 << GPIO_OSPEEDR_OSPEED6_Pos)| (3 << GPIO_OSPEEDR_OSPEED7_Pos));
 80003aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80003b8:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
 80003bc:	6093      	str	r3, [r2, #8]
control_pins->BRR = ( D4 | D5 | D6 | D7 | EN | RW | RS ); //Initializes data to all 0
 80003be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c2:	22fe      	movs	r2, #254	; 0xfe
 80003c4:	629a      	str	r2, [r3, #40]	; 0x28

delay_us( 100000 ); // power-up wait 40 ms
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <LCD_init+0xb0>)
 80003c8:	f7ff ff26 	bl	8000218 <delay_us>

command(0x30);
 80003cc:	2030      	movs	r0, #48	; 0x30
 80003ce:	f000 f83b 	bl	8000448 <command>
delay_us( 100 ); // power-up wait .04 ms
 80003d2:	2064      	movs	r0, #100	; 0x64
 80003d4:	f7ff ff20 	bl	8000218 <delay_us>
command(0x30);
 80003d8:	2030      	movs	r0, #48	; 0x30
 80003da:	f000 f835 	bl	8000448 <command>
delay_us( 100 ); // power-up wait .04 ms
 80003de:	2064      	movs	r0, #100	; 0x64
 80003e0:	f7ff ff1a 	bl	8000218 <delay_us>
command(0x30);
 80003e4:	2030      	movs	r0, #48	; 0x30
 80003e6:	f000 f82f 	bl	8000448 <command>
delay_us( 100 ); // power-up wait .04 ms
 80003ea:	2064      	movs	r0, #100	; 0x64
 80003ec:	f7ff ff14 	bl	8000218 <delay_us>
command(0x20);
 80003f0:	2020      	movs	r0, #32
 80003f2:	f000 f829 	bl	8000448 <command>
delay_us( 100 ); // power-up wait .04 ms
 80003f6:	2064      	movs	r0, #100	; 0x64
 80003f8:	f7ff ff0e 	bl	8000218 <delay_us>
command(0x02);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f000 f823 	bl	8000448 <command>
delay_us( 100 ); // power-up wait .04 ms
 8000402:	2064      	movs	r0, #100	; 0x64
 8000404:	f7ff ff08 	bl	8000218 <delay_us>
//command(0x28); //Function set: 4-bit/2-line
//command(0x0F); //Display ON; Blinking cursor
//command(0x06); //Entry Mode set
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	000186a0 	.word	0x000186a0
 8000410:	40021000 	.word	0x40021000

08000414 <Nybble>:

void Nybble()
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
control_pins->BSRR = EN;
 8000418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800041c:	2208      	movs	r2, #8
 800041e:	619a      	str	r2, [r3, #24]
delay_us( 50 ); // wait
 8000420:	2032      	movs	r0, #50	; 0x32
 8000422:	f7ff fef9 	bl	8000218 <delay_us>
control_pins->BRR = EN;
 8000426:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800042a:	2208      	movs	r2, #8
 800042c:	629a      	str	r2, [r3, #40]	; 0x28
delay_us( 50 ); // wait
 800042e:	2032      	movs	r0, #50	; 0x32
 8000430:	f7ff fef2 	bl	8000218 <delay_us>
control_pins->ODR &= ~( (D4 | D5 | D6 | D7) ); // Clears registers
 8000434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800043e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000442:	6153      	str	r3, [r2, #20]
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <command>:

void command(uint8_t command)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
    uint8_t command2 = command >> 4;
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	091b      	lsrs	r3, r3, #4
 8000456:	73fb      	strb	r3, [r7, #15]
    control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800045c:	2206      	movs	r2, #6
 800045e:	629a      	str	r2, [r3, #40]	; 0x28

    for (int i = 0; i < 4; i++) {
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e019      	b.n	800049a <command+0x52>
        if ((command2 >> i) & 0x01) { // Corrected to use command2
 8000466:	7bfa      	ldrb	r2, [r7, #15]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	fa42 f303 	asr.w	r3, r2, r3
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d007      	beq.n	8000486 <command+0x3e>
            control_pins->BSRR = GPIO_Pin[i];
 8000476:	4a26      	ldr	r2, [pc, #152]	; (8000510 <command+0xc8>)
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800047e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000482:	619a      	str	r2, [r3, #24]
 8000484:	e006      	b.n	8000494 <command+0x4c>
        } else {
            control_pins->BRR = GPIO_Pin[i];
 8000486:	4a22      	ldr	r2, [pc, #136]	; (8000510 <command+0xc8>)
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800048e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000492:	629a      	str	r2, [r3, #40]	; 0x28
    for (int i = 0; i < 4; i++) {
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3301      	adds	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	2b03      	cmp	r3, #3
 800049e:	dde2      	ble.n	8000466 <command+0x1e>
        }
    }

    delay_us( 1000 );
 80004a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a4:	f7ff feb8 	bl	8000218 <delay_us>
    Nybble(); //Send pulse
 80004a8:	f7ff ffb4 	bl	8000414 <Nybble>

    for (int i = 0; i < 4; i++) {
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	e019      	b.n	80004e6 <command+0x9e>
        if ((command >> i) & 0x01) { // Corrected to use command
 80004b2:	79fa      	ldrb	r2, [r7, #7]
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	fa42 f303 	asr.w	r3, r2, r3
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d007      	beq.n	80004d2 <command+0x8a>
            control_pins->BSRR = GPIO_Pin[i];
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <command+0xc8>)
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ce:	619a      	str	r2, [r3, #24]
 80004d0:	e006      	b.n	80004e0 <command+0x98>
        } else {
            control_pins->BRR = GPIO_Pin[i];
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <command+0xc8>)
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
    for (int i = 0; i < 4; i++) {
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	3301      	adds	r3, #1
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	dde2      	ble.n	80004b2 <command+0x6a>
        }
    }
    delay_us( 1000 );
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f7ff fe92 	bl	8000218 <delay_us>
    Nybble(); //Send pulse
 80004f4:	f7ff ff8e 	bl	8000414 <Nybble>
    control_pins->ODR &= ~( (D4 | D5 | D6 | D7) ); // Clears registers
 80004f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000506:	6153      	str	r3, [r2, #20]
}
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000020 	.word	0x20000020

08000514 <write>:


void write(char letter)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	uint8_t c = letter;
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	73fb      	strb	r3, [r7, #15]
	uint8_t c2 = c >> 4;
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	091b      	lsrs	r3, r3, #4
 8000526:	73bb      	strb	r3, [r7, #14]
	for (int i = 0; i < 4; i++) {
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e019      	b.n	8000562 <write+0x4e>
		    if ((c2 >> i) & 0x01) {
 800052e:	7bba      	ldrb	r2, [r7, #14]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	fa42 f303 	asr.w	r3, r2, r3
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <write+0x3a>
		    	control_pins->BSRR = GPIO_Pin[i];
 800053e:	4a2c      	ldr	r2, [pc, #176]	; (80005f0 <write+0xdc>)
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054a:	619a      	str	r2, [r3, #24]
 800054c:	e006      	b.n	800055c <write+0x48>
		    } else {
		    	control_pins->BRR = GPIO_Pin[i];
 800054e:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <write+0xdc>)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000556:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < 4; i++) {
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2b03      	cmp	r3, #3
 8000566:	dde2      	ble.n	800052e <write+0x1a>
		    }
		}

	control_pins->BSRR = (RS); // set RS and RW to zero
 8000568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800056c:	2202      	movs	r2, #2
 800056e:	619a      	str	r2, [r3, #24]
	control_pins->BRR = (RW); // set RS and RW to zero
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	2204      	movs	r2, #4
 8000576:	629a      	str	r2, [r3, #40]	; 0x28
	delay_us( 1000 );
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f7ff fe4c 	bl	8000218 <delay_us>
	Nybble();
 8000580:	f7ff ff48 	bl	8000414 <Nybble>
	//c = c >> 4;

	for (int i = 0; i < 4; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	e019      	b.n	80005be <write+0xaa>
			    if ((c >> i) & 0x01) {
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	fa42 f303 	asr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d007      	beq.n	80005aa <write+0x96>
			    	control_pins->BSRR = GPIO_Pin[i];
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <write+0xdc>)
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a6:	619a      	str	r2, [r3, #24]
 80005a8:	e006      	b.n	80005b8 <write+0xa4>
			    } else {
			    	control_pins->BRR = GPIO_Pin[i];
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <write+0xdc>)
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < 4; i++) {
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	3301      	adds	r3, #1
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	dde2      	ble.n	800058a <write+0x76>
			    }
			}
	delay_us( 1000 );
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f7ff fe26 	bl	8000218 <delay_us>
	Nybble();
 80005cc:	f7ff ff22 	bl	8000414 <Nybble>
	control_pins->BRR = (RS); // set RS and RW to zero
 80005d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d4:	2202      	movs	r2, #2
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
	control_pins->ODR &= ~( (D4 | D5 | D6 | D7) ); // Clears registers
 80005d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005e6:	6153      	str	r3, [r2, #20]
}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000020 	.word	0x20000020

080005f4 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
    uint8_t address;

    // Calculate the address based on row and col values
    if (row == 0) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d103      	bne.n	8000612 <lcd_set_cursor_position+0x1e>
        address = 0x80 + col; // For row 0, the address starts from 0x80
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	3b80      	subs	r3, #128	; 0x80
 800060e:	73fb      	strb	r3, [r7, #15]
 8000610:	e002      	b.n	8000618 <lcd_set_cursor_position+0x24>
    } else {
        address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	3b40      	subs	r3, #64	; 0x40
 8000616:	73fb      	strb	r3, [r7, #15]
    }

    // Send the command to set the cursor position
    command(address);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff14 	bl	8000448 <command>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <str_write>:



void str_write(const char *str) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    for (int i = 0; str[i] != '\0'; i++) {
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e00c      	b.n	8000650 <str_write+0x28>
        write(str[i]);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff68 	bl	8000514 <write>
        delay_us(100);
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f7ff fde7 	bl	8000218 <delay_us>
    for (int i = 0; str[i] != '\0'; i++) {
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ec      	bne.n	8000636 <str_write+0xe>
    }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <LCD_reset_count_display>:


////FOR COUNTER
////TEST
////Resets counter display to 00:00
void LCD_reset_count_display(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 800066c:	210b      	movs	r1, #11
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff ffc0 	bl	80005f4 <lcd_set_cursor_position>
	str_write("     ");	//clears with 5 spaces
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <LCD_reset_count_display+0x34>)
 8000676:	f7ff ffd7 	bl	8000628 <str_write>
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 800067a:	210b      	movs	r1, #11
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff ffb9 	bl	80005f4 <lcd_set_cursor_position>
	str_write("00:00");
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <LCD_reset_count_display+0x38>)
 8000684:	f7ff ffd0 	bl	8000628 <str_write>
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 8000688:	210b      	movs	r1, #11
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff ffb2 	bl	80005f4 <lcd_set_cursor_position>
	command(0x0D);						//turns blinking cursor on
 8000690:	200d      	movs	r0, #13
 8000692:	f7ff fed9 	bl	8000448 <command>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08001bf8 	.word	0x08001bf8
 80006a0:	08001c00 	.word	0x08001c00

080006a4 <LCD_update_count_display>:

//This is only for countdown
//Updates LCD with new values
void LCD_update_count_display(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	lcd_set_cursor_position(1,11);		//set cursor at MM:SS
 80006a8:	210b      	movs	r1, #11
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff ffa2 	bl	80005f4 <lcd_set_cursor_position>
	write(time_asc[3]);
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <LCD_update_count_display+0x40>)
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff2d 	bl	8000514 <write>
	write(time_asc[2]);
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <LCD_update_count_display+0x40>)
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff28 	bl	8000514 <write>
	write(':');
 80006c4:	203a      	movs	r0, #58	; 0x3a
 80006c6:	f7ff ff25 	bl	8000514 <write>
	write(time_asc[1]);
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <LCD_update_count_display+0x40>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff20 	bl	8000514 <write>
	write(time_asc[0]);
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <LCD_update_count_display+0x40>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff1b 	bl	8000514 <write>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000050 	.word	0x20000050

080006e8 <load_time>:

//Converts total time (s) to ASCII equivalent values and loads them onto array for uploading
//time_in_sec FOR PARAMETER
void load_time( int total_seconds ){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint8_t u_min, l_min, u_sec, l_sec; //initializes values
	u_min = total_seconds / 60;			//gets all the minutes
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a2e      	ldr	r2, [pc, #184]	; (80007ac <load_time+0xc4>)
 80006f4:	fb82 1203 	smull	r1, r2, r2, r3
 80006f8:	441a      	add	r2, r3
 80006fa:	1152      	asrs	r2, r2, #5
 80006fc:	17db      	asrs	r3, r3, #31
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	73fb      	strb	r3, [r7, #15]
	l_min = u_min % 10;					//gets ones minutes
 8000702:	7bfa      	ldrb	r2, [r7, #15]
 8000704:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <load_time+0xc8>)
 8000706:	fba3 1302 	umull	r1, r3, r3, r2
 800070a:	08d9      	lsrs	r1, r3, #3
 800070c:	460b      	mov	r3, r1
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	73bb      	strb	r3, [r7, #14]
	u_min = u_min / 10;					//gets tens minutes
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <load_time+0xc8>)
 800071c:	fba2 2303 	umull	r2, r3, r2, r3
 8000720:	08db      	lsrs	r3, r3, #3
 8000722:	73fb      	strb	r3, [r7, #15]

	u_sec = total_seconds % 60; 		//gets all the secs
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <load_time+0xc4>)
 8000728:	fb83 1302 	smull	r1, r3, r3, r2
 800072c:	4413      	add	r3, r2
 800072e:	1159      	asrs	r1, r3, #5
 8000730:	17d3      	asrs	r3, r2, #31
 8000732:	1ac9      	subs	r1, r1, r3
 8000734:	460b      	mov	r3, r1
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	1ad1      	subs	r1, r2, r3
 800073e:	460b      	mov	r3, r1
 8000740:	737b      	strb	r3, [r7, #13]
	l_sec = u_sec % 10;					//gets ones secs
 8000742:	7b7a      	ldrb	r2, [r7, #13]
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <load_time+0xc8>)
 8000746:	fba3 1302 	umull	r1, r3, r3, r2
 800074a:	08d9      	lsrs	r1, r3, #3
 800074c:	460b      	mov	r3, r1
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	733b      	strb	r3, [r7, #12]
	u_sec = u_sec / 10;					//gets tens sec
 8000758:	7b7b      	ldrb	r3, [r7, #13]
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <load_time+0xc8>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	08db      	lsrs	r3, r3, #3
 8000762:	737b      	strb	r3, [r7, #13]

	//Updates array
	time_asc[3] = LCD_convert_time_to_ascii(u_min);
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f826 	bl	80007b8 <LCD_convert_time_to_ascii>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <load_time+0xcc>)
 8000772:	70da      	strb	r2, [r3, #3]
	time_asc[2] = LCD_convert_time_to_ascii(l_min);
 8000774:	7bbb      	ldrb	r3, [r7, #14]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f81e 	bl	80007b8 <LCD_convert_time_to_ascii>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <load_time+0xcc>)
 8000782:	709a      	strb	r2, [r3, #2]
	time_asc[1] = LCD_convert_time_to_ascii(u_sec);
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f816 	bl	80007b8 <LCD_convert_time_to_ascii>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <load_time+0xcc>)
 8000792:	705a      	strb	r2, [r3, #1]
	time_asc[0] = LCD_convert_time_to_ascii(l_sec);
 8000794:	7b3b      	ldrb	r3, [r7, #12]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f80e 	bl	80007b8 <LCD_convert_time_to_ascii>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <load_time+0xcc>)
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	88888889 	.word	0x88888889
 80007b0:	cccccccd 	.word	0xcccccccd
 80007b4:	20000050 	.word	0x20000050

080007b8 <LCD_convert_time_to_ascii>:

//Fow Wilson's code: Use this to convert integer keypress value into
char LCD_convert_time_to_ascii (uint8_t timeasc){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	return (0x30 + timeasc);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	3330      	adds	r3, #48	; 0x30
 80007c6:	b2db      	uxtb	r3, r3
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <time_in_sec>:


//LCD_convert_ascii_to_time FOR PARAMETERS
int time_in_sec( int hmin, int lmin, int hsec, int lsec ){
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	603b      	str	r3, [r7, #0]
	int total_time = 0; 	//to store total time
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
	hmin = hmin*10 + lmin;	//adds total minutes together
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	461a      	mov	r2, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	4413      	add	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
	hsec = hsec*10 + lsec;	//adds total seconds together
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	461a      	mov	r2, r3
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	4413      	add	r3, r2
 8000808:	607b      	str	r3, [r7, #4]
	total_time = (hmin*60 + hsec);
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4613      	mov	r3, r2
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	1a9b      	subs	r3, r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	617b      	str	r3, [r7, #20]
	return total_time; //returns total time
 800081c:	697b      	ldr	r3, [r7, #20]
}
 800081e:	4618      	mov	r0, r3
 8000820:	371c      	adds	r7, #28
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <decrement_time>:

int LCD_convert_ascii_to_time ( uint8_t asctime ){
	return (0x0F & asctime);
}

int decrement_time (int time){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	delay_us(2000000); //delay 1 sec
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <decrement_time+0x20>)
 8000836:	f7ff fcef 	bl	8000218 <delay_us>
	return (--time);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3b01      	subs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	001e8480 	.word	0x001e8480

08000850 <main>:
// 1 = In reset state (only accept * input)

//Stuff to output to LCD
char output_LCD[4];

int main(void) {
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
	 * Wilson fix
	 */

	//Output LED Config
	// Make pin0 output mode
	GPIOC->MODER &= ~(GPIO_MODER_MODE0);
 8000856:	4b77      	ldr	r3, [pc, #476]	; (8000a34 <main+0x1e4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a76      	ldr	r2, [pc, #472]	; (8000a34 <main+0x1e4>)
 800085c:	f023 0303 	bic.w	r3, r3, #3
 8000860:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0);
 8000862:	4b74      	ldr	r3, [pc, #464]	; (8000a34 <main+0x1e4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a73      	ldr	r2, [pc, #460]	; (8000a34 <main+0x1e4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6013      	str	r3, [r2, #0]

	HAL_Init();
 800086e:	f000 f9c6 	bl	8000bfe <HAL_Init>
	SystemClock_Config();
 8000872:	f000 f8ef 	bl	8000a54 <SystemClock_Config>
	SysTick_Init();
 8000876:	f7ff fcb9 	bl	80001ec <SysTick_Init>
	LCD_init();
 800087a:	f7ff fd6f 	bl	800035c <LCD_init>

	delay_us(100);
 800087e:	2064      	movs	r0, #100	; 0x64
 8000880:	f7ff fcca 	bl	8000218 <delay_us>
	//const char str[] = "EE 329 A3 TIMER ";
	str_write("EE 329 A3 TIMER");
 8000884:	486c      	ldr	r0, [pc, #432]	; (8000a38 <main+0x1e8>)
 8000886:	f7ff fecf 	bl	8000628 <str_write>
	delay_us(100);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f7ff fcc4 	bl	8000218 <delay_us>
	lcd_set_cursor_position(1, 0);
 8000890:	2100      	movs	r1, #0
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff feae 	bl	80005f4 <lcd_set_cursor_position>
	delay_us(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f7ff fcbd 	bl	8000218 <delay_us>
	str_write("*=SET #=GO FF:FF");
 800089e:	4867      	ldr	r0, [pc, #412]	; (8000a3c <main+0x1ec>)
 80008a0:	f7ff fec2 	bl	8000628 <str_write>
	lcd_set_cursor_position(1, 11);
 80008a4:	210b      	movs	r1, #11
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fea4 	bl	80005f4 <lcd_set_cursor_position>
	command(0x0D);		//turns blinking cursor on to indicate ready for input
 80008ac:	200d      	movs	r0, #13
 80008ae:	f7ff fdcb 	bl	8000448 <command>

	//THIS IS FOR TESTING DELETE
	int total_time_sec = time_in_sec(1, 2, 3, 4);
 80008b2:	2304      	movs	r3, #4
 80008b4:	2203      	movs	r2, #3
 80008b6:	2102      	movs	r1, #2
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff ff8b 	bl	80007d4 <time_in_sec>
 80008be:	6178      	str	r0, [r7, #20]
	load_time(total_time_sec);
 80008c0:	6978      	ldr	r0, [r7, #20]
 80008c2:	f7ff ff11 	bl	80006e8 <load_time>
	LCD_update_count_display(); //displays it to the LCD
 80008c6:	f7ff feed 	bl	80006a4 <LCD_update_count_display>
	//END OF TESTING

	reset_state = 1; //starts off at reset state waiting for asterik key to be pushed
 80008ca:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <main+0x1f0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]

	while (1) {

		//-----------------START OF SEQUENCE----------------------------------
		//Keeps you in reset state after reset push button
		while (reset_state) {
 80008d0:	e011      	b.n	80008f6 <main+0xa6>
			int star_check = keypad_read(4, 3); //checks if asterisk is pushed to get out of reset state
 80008d2:	2103      	movs	r1, #3
 80008d4:	2004      	movs	r0, #4
 80008d6:	f7ff fccd 	bl	8000274 <keypad_read>
 80008da:	6078      	str	r0, [r7, #4]
			if (star_check != -1) { 				//Checks if button is pushed
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e2:	d008      	beq.n	80008f6 <main+0xa6>
				if (star_check == 10) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b0a      	cmp	r3, #10
 80008e8:	d105      	bne.n	80008f6 <main+0xa6>
					reset = 0;	//ensures reset is 0 so doesn't reset display
 80008ea:	4b56      	ldr	r3, [pc, #344]	; (8000a44 <main+0x1f4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
					reset_state = 0;//takes me out of reset state allows me to take inputs
 80008f0:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <main+0x1f0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
		while (reset_state) {
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <main+0x1f0>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1e9      	bne.n	80008d2 <main+0x82>

		}

		//-------------------START REGISTERING KEYAPD INPUTS
		//Starts registering keypad inputs
		while ((four_push < 4) & ~reset) { //This might not update screen when pushing
 80008fe:	e040      	b.n	8000982 <main+0x132>
			int output = keypad_read(4, 3); //get key value
 8000900:	2103      	movs	r1, #3
 8000902:	2004      	movs	r0, #4
 8000904:	f7ff fcb6 	bl	8000274 <keypad_read>
 8000908:	6138      	str	r0, [r7, #16]
			if (output != -1) { //if button is pushed sets value to dispaly to LED
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000910:	d037      	beq.n	8000982 <main+0x132>
				if (output == 10) {
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	2b0a      	cmp	r3, #10
 8000916:	d102      	bne.n	800091e <main+0xce>
					reset = 1;			//jumps out of Keypad registering input
 8000918:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <main+0x1f4>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
				}
				if (~reset) {
					if ((four_push % 2) != 0) {
 800091e:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <main+0x1f8>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d021      	beq.n	8000970 <main+0x120>
						if (output > 5)
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2b05      	cmp	r3, #5
 8000930:	dd01      	ble.n	8000936 <main+0xe6>
							output = 5;
 8000932:	2305      	movs	r3, #5
 8000934:	613b      	str	r3, [r7, #16]
						output_LCD[(3 - four_push)] = LCD_convert_time_to_ascii(output); //Load value onto array
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4a43      	ldr	r2, [pc, #268]	; (8000a48 <main+0x1f8>)
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	f1c2 0403 	rsb	r4, r2, #3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff38 	bl	80007b8 <LCD_convert_time_to_ascii>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <main+0x1fc>)
 800094e:	551a      	strb	r2, [r3, r4]
																						 //Needs to display updated array
						four_push = four_push + 1;
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <main+0x1f8>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <main+0x1f8>)
 800095a:	701a      	strb	r2, [r3, #0]
						if (four_push == 4)  go = 1;	//Takes last keypad input and enables go to start countdown
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <main+0x1f8>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d102      	bne.n	800096a <main+0x11a>
 8000964:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <main+0x200>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
						reset = 0;
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <main+0x1f4>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
					}
				}
				if (reset == 1) {					//Reset Display
 8000970:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <main+0x1f4>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d104      	bne.n	8000982 <main+0x132>
					LCD_reset_count_display();
 8000978:	f7ff fe76 	bl	8000668 <LCD_reset_count_display>
					reset = 0;//Loops me back to START REGISTERING KEYPAD INPUTS
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <main+0x1f4>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
		while ((four_push < 4) & ~reset) { //This might not update screen when pushing
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <main+0x1f8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b03      	cmp	r3, #3
 8000988:	bf94      	ite	ls
 800098a:	2301      	movls	r3, #1
 800098c:	2300      	movhi	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <main+0x1f4>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	43db      	mvns	r3, r3
 8000998:	4013      	ands	r3, r2
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1b0      	bne.n	8000900 <main+0xb0>

			}
		}

		//--------------------WAITING FOR GO KEYPRESS TO START COUNTDOWN
		int go_check = keypad_read(4, 3);			//To check when key
 800099e:	2103      	movs	r1, #3
 80009a0:	2004      	movs	r0, #4
 80009a2:	f7ff fc67 	bl	8000274 <keypad_read>
 80009a6:	60f8      	str	r0, [r7, #12]
		if ((go_check == 11) & go) {
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b0b      	cmp	r3, #11
 80009ac:	bf0c      	ite	eq
 80009ae:	2301      	moveq	r3, #1
 80009b0:	2300      	movne	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <main+0x200>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d087      	beq.n	80008d0 <main+0x80>
			GPIOC->BRR = GPIO_PIN_0; 	// turns off LED after
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <main+0x1e4>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
			go = 0;			//no longer takes go input to start countdown (this could potentially break sequencing might have to put it in the while start countdown at the very end)
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <main+0x200>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]

			//-----------------START TO COUNTDOWN
			while ((total_time_sec != 0) & ~reset) {
 80009cc:	e01a      	b.n	8000a04 <main+0x1b4>
				int output = keypad_read(4, 3); // get key value
 80009ce:	2103      	movs	r1, #3
 80009d0:	2004      	movs	r0, #4
 80009d2:	f7ff fc4f 	bl	8000274 <keypad_read>
 80009d6:	60b8      	str	r0, [r7, #8]
				if (output == 10)				//if reset is pushed
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b0a      	cmp	r3, #10
 80009dc:	d103      	bne.n	80009e6 <main+0x196>
					reset = 1;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <main+0x1f4>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e00e      	b.n	8000a04 <main+0x1b4>
				else {
					total_time_sec = decrement_time(total_time_sec);
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff20 	bl	800082c <decrement_time>
 80009ec:	6178      	str	r0, [r7, #20]
					load_time(total_time_sec);
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff fe7a 	bl	80006e8 <load_time>
					LCD_update_count_display(); //displays it to the LCD
 80009f4:	f7ff fe56 	bl	80006a4 <LCD_update_count_display>
					if (total_time_sec == 0)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <main+0x1b4>
						GPIOC->BSRR = GPIO_PIN_0; //turns LED on only when countdown is complete
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <main+0x1e4>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	619a      	str	r2, [r3, #24]
			while ((total_time_sec != 0) & ~reset) {
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <main+0x1f4>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1d7      	bne.n	80009ce <main+0x17e>
				}
			}
			if (reset == 1) {					//Reset Display
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <main+0x1f4>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	f47f af54 	bne.w	80008d0 <main+0x80>
				LCD_reset_count_display();
 8000a28:	f7ff fe1e 	bl	8000668 <LCD_reset_count_display>
				reset = 0;	//Loops me back to START REGISTERING KEYPAD INPUTS
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <main+0x1f4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
	while (1) {
 8000a32:	e74d      	b.n	80008d0 <main+0x80>
 8000a34:	48000800 	.word	0x48000800
 8000a38:	08001c08 	.word	0x08001c08
 8000a3c:	08001c18 	.word	0x08001c18
 8000a40:	20000057 	.word	0x20000057
 8000a44:	20000055 	.word	0x20000055
 8000a48:	20000054 	.word	0x20000054
 8000a4c:	20000058 	.word	0x20000058
 8000a50:	20000056 	.word	0x20000056

08000a54 <SystemClock_Config>:
			}
		}
	}
}

void SystemClock_Config(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	; 0x58
 8000a58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2244      	movs	r2, #68	; 0x44
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 f8b4 	bl	8001bd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a7a:	f000 fa29 	bl	8000ed0 <HAL_PWREx_ControlVoltageScaling>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000a84:	f000 f82c 	bl	8000ae0 <Error_Handler>
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a94:	2360      	movs	r3, #96	; 0x60
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fa6b 	bl	8000f7c <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x5c>
		Error_Handler();
 8000aac:	f000 f818 	bl	8000ae0 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fe71 	bl	80017b0 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x84>
		Error_Handler();
 8000ad4:	f000 f804 	bl	8000ae0 <Error_Handler>
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3758      	adds	r7, #88	; 0x58
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <Error_Handler>:

void Error_Handler(void) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop

	__disable_irq();
	while (1) {
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f892 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff ffea 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f000 ffd5 	bl	8001b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bde:	f7ff fe37 	bl	8000850 <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000bf0:	08001ca4 	.word	0x08001ca4
  ldr r2, =_sbss
 8000bf4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000bf8:	20000060 	.word	0x20000060

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>

08000bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f91f 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f80e 	bl	8000c30 <HAL_InitTick>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	e001      	b.n	8000c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c20:	f7ff ff64 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_InitTick+0x6c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d023      	beq.n	8000c8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_InitTick+0x70>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x6c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f91d 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10f      	bne.n	8000c86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d809      	bhi.n	8000c80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f8f5 	bl	8000e62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_InitTick+0x74>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e007      	b.n	8000c90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e004      	b.n	8000c90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e001      	b.n	8000c90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000030 	.word	0x20000030
 8000ca0:	20000028 	.word	0x20000028
 8000ca4:	2000002c 	.word	0x2000002c

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000030 	.word	0x20000030
 8000ccc:	2000005c 	.word	0x2000005c

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000005c 	.word	0x2000005c

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff47 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff5c 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb0 	bl	8000e08 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_PWREx_GetVoltageRange+0x18>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ede:	d130      	bne.n	8000f42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eec:	d038      	beq.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ef6:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2232      	movs	r2, #50	; 0x32
 8000f04:	fb02 f303 	mul.w	r3, r2, r3
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9b      	lsrs	r3, r3, #18
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f14:	e002      	b.n	8000f1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f28:	d102      	bne.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f2      	bne.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3c:	d110      	bne.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e00f      	b.n	8000f62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4e:	d007      	beq.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40007000 	.word	0x40007000
 8000f74:	20000028 	.word	0x20000028
 8000f78:	431bde83 	.word	0x431bde83

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f000 bc08 	b.w	80017a0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f90:	4b96      	ldr	r3, [pc, #600]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f9a:	4b94      	ldr	r3, [pc, #592]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80e4 	beq.w	800117a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d007      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x4c>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	f040 808b 	bne.w	80010d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	f040 8087 	bne.w	80010d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fc8:	4b88      	ldr	r3, [pc, #544]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x64>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e3df      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	4b81      	ldr	r3, [pc, #516]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <HAL_RCC_OscConfig+0x7e>
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff8:	e005      	b.n	8001006 <HAL_RCC_OscConfig+0x8a>
 8000ffa:	4b7c      	ldr	r3, [pc, #496]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001006:	4293      	cmp	r3, r2
 8001008:	d223      	bcs.n	8001052 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd5a 	bl	8001ac8 <RCC_SetFlashLatencyFromMSIRange>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e3c0      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101e:	4b73      	ldr	r3, [pc, #460]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a72      	ldr	r2, [pc, #456]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b70      	ldr	r3, [pc, #448]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	496d      	ldr	r1, [pc, #436]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800103c:	4b6b      	ldr	r3, [pc, #428]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	4968      	ldr	r1, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e025      	b.n	800109e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001052:	4b66      	ldr	r3, [pc, #408]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a65      	ldr	r2, [pc, #404]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b63      	ldr	r3, [pc, #396]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4960      	ldr	r1, [pc, #384]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001070:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	495b      	ldr	r1, [pc, #364]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fd1a 	bl	8001ac8 <RCC_SetFlashLatencyFromMSIRange>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e380      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800109e:	f000 fc87 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 80010a2:	4602      	mov	r2, r0
 80010a4:	4b51      	ldr	r3, [pc, #324]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	4950      	ldr	r1, [pc, #320]	; (80011f0 <HAL_RCC_OscConfig+0x274>)
 80010b0:	5ccb      	ldrb	r3, [r1, r3]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_RCC_OscConfig+0x278>)
 80010bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010be:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <HAL_RCC_OscConfig+0x27c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fdb4 	bl	8000c30 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d052      	beq.n	8001178 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	e364      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d032      	beq.n	8001144 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a42      	ldr	r2, [pc, #264]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fdf1 	bl	8000cd0 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f2:	f7ff fded 	bl	8000cd0 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e34d      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001104:	4b39      	ldr	r3, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a35      	ldr	r2, [pc, #212]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4930      	ldr	r1, [pc, #192]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	492b      	ldr	r1, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800113e:	4313      	orrs	r3, r2
 8001140:	604b      	str	r3, [r1, #4]
 8001142:	e01a      	b.n	800117a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001150:	f7ff fdbe 	bl	8000cd0 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001158:	f7ff fdba 	bl	8000cd0 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e31a      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1dc>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d073      	beq.n	800126e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d005      	beq.n	8001198 <HAL_RCC_OscConfig+0x21c>
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	d10e      	bne.n	80011b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d10b      	bne.n	80011b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d063      	beq.n	800126c <HAL_RCC_OscConfig+0x2f0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d15f      	bne.n	800126c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e2f7      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d106      	bne.n	80011c8 <HAL_RCC_OscConfig+0x24c>
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e025      	b.n	8001214 <HAL_RCC_OscConfig+0x298>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d114      	bne.n	80011fc <HAL_RCC_OscConfig+0x280>
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a02      	ldr	r2, [pc, #8]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e013      	b.n	8001214 <HAL_RCC_OscConfig+0x298>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	08001c5c 	.word	0x08001c5c
 80011f4:	20000028 	.word	0x20000028
 80011f8:	2000002c 	.word	0x2000002c
 80011fc:	4ba0      	ldr	r3, [pc, #640]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a9f      	ldr	r2, [pc, #636]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b9d      	ldr	r3, [pc, #628]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a9c      	ldr	r2, [pc, #624]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fd58 	bl	8000cd0 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fd54 	bl	8000cd0 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e2b4      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001236:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x2a8>
 8001242:	e014      	b.n	800126e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fd44 	bl	8000cd0 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fd40 	bl	8000cd0 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e2a0      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x2d0>
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d060      	beq.n	800133c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d005      	beq.n	800128c <HAL_RCC_OscConfig+0x310>
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	d119      	bne.n	80012ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d116      	bne.n	80012ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800128c:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_OscConfig+0x328>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e27d      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	061b      	lsls	r3, r3, #24
 80012b2:	4973      	ldr	r1, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b8:	e040      	b.n	800133c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d023      	beq.n	800130a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fcff 	bl	8000cd0 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fcfb 	bl	8000cd0 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e25b      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e8:	4b65      	ldr	r3, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b62      	ldr	r3, [pc, #392]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	061b      	lsls	r3, r3, #24
 8001302:	495f      	ldr	r1, [pc, #380]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
 8001308:	e018      	b.n	800133c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fcdb 	bl	8000cd0 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fcd7 	bl	8000cd0 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e237      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d03c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01c      	beq.n	800138a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001356:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff fcb6 	bl	8000cd0 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fcb2 	bl	8000cd0 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e212      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ef      	beq.n	8001368 <HAL_RCC_OscConfig+0x3ec>
 8001388:	e01b      	b.n	80013c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800138c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001390:	4a3b      	ldr	r2, [pc, #236]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff fc99 	bl	8000cd0 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc95 	bl	8000cd0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1f5      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1ef      	bne.n	80013a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80a6 	beq.w	800151c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10d      	bne.n	80013fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6593      	str	r3, [r2, #88]	; 0x58
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f8:	2301      	movs	r3, #1
 80013fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fc:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d118      	bne.n	800143a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 800140e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001414:	f7ff fc5c 	bl	8000cd0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff fc58 	bl	8000cd0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1b8      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_RCC_OscConfig+0x4d8>
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001452:	e029      	b.n	80014a8 <HAL_RCC_OscConfig+0x52c>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d115      	bne.n	8001488 <HAL_RCC_OscConfig+0x50c>
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001472:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x52c>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	40007000 	.word	0x40007000
 8001488:	4b9d      	ldr	r3, [pc, #628]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800148a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148e:	4a9c      	ldr	r2, [pc, #624]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001498:	4b99      	ldr	r3, [pc, #612]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	4a98      	ldr	r2, [pc, #608]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d016      	beq.n	80014de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc0e 	bl	8000cd0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc0a 	bl	8000cd0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e168      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ce:	4b8c      	ldr	r3, [pc, #560]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80014d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0ed      	beq.n	80014b8 <HAL_RCC_OscConfig+0x53c>
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014de:	f7ff fbf7 	bl	8000cd0 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fbf3 	bl	8000cd0 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e151      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014fc:	4b80      	ldr	r3, [pc, #512]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ed      	bne.n	80014e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001510:	4b7b      	ldr	r3, [pc, #492]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	4a7a      	ldr	r2, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01c      	beq.n	800156a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001530:	4b73      	ldr	r3, [pc, #460]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001536:	4a72      	ldr	r2, [pc, #456]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff fbc6 	bl	8000cd0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001548:	f7ff fbc2 	bl	8000cd0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e122      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800155a:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800155c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ef      	beq.n	8001548 <HAL_RCC_OscConfig+0x5cc>
 8001568:	e01b      	b.n	80015a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800156a:	4b65      	ldr	r3, [pc, #404]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800156c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001570:	4a63      	ldr	r2, [pc, #396]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fba9 	bl	8000cd0 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001582:	f7ff fba5 	bl	8000cd0 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e105      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001594:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ef      	bne.n	8001582 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80f9 	beq.w	800179e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	f040 80cf 	bne.w	8001754 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d12c      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	3b01      	subs	r3, #1
 80015d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d123      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d11b      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d113      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d109      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d071      	beq.n	8001708 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d068      	beq.n	80016fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0ac      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800164c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001650:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001652:	f7ff fb3d 	bl	8000cd0 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb39 	bl	8000cd0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e099      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x788>)
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001688:	3a01      	subs	r2, #1
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001692:	0212      	lsls	r2, r2, #8
 8001694:	4311      	orrs	r1, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800169a:	0852      	lsrs	r2, r2, #1
 800169c:	3a01      	subs	r2, #1
 800169e:	0552      	lsls	r2, r2, #21
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016a6:	0852      	lsrs	r2, r2, #1
 80016a8:	3a01      	subs	r2, #1
 80016aa:	0652      	lsls	r2, r2, #25
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016b2:	06d2      	lsls	r2, r2, #27
 80016b4:	430a      	orrs	r2, r1
 80016b6:	4912      	ldr	r1, [pc, #72]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016d4:	f7ff fafc 	bl	8000cd0 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff faf8 	bl	8000cd0 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e058      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_RCC_OscConfig+0x784>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016fa:	e050      	b.n	800179e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e04f      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
 8001700:	40021000 	.word	0x40021000
 8001704:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d144      	bne.n	800179e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800172c:	f7ff fad0 	bl	8000cd0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff facc 	bl	8000cd0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e02c      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x7b8>
 8001752:	e024      	b.n	800179e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d01f      	beq.n	800179a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 8001760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fab3 	bl	8000cd0 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff faaf 	bl	8000cd0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4905      	ldr	r1, [pc, #20]	; (80017a8 <HAL_RCC_OscConfig+0x82c>)
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x830>)
 8001794:	4013      	ands	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e001      	b.n	800179e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	feeefffc 	.word	0xfeeefffc

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0e7      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b75      	ldr	r3, [pc, #468]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d910      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b72      	ldr	r3, [pc, #456]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0207 	bic.w	r2, r3, #7
 80017da:	4970      	ldr	r1, [pc, #448]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b6e      	ldr	r3, [pc, #440]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0cf      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180c:	429a      	cmp	r2, r3
 800180e:	d908      	bls.n	8001822 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4960      	ldr	r1, [pc, #384]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04c      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	4b5a      	ldr	r3, [pc, #360]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d121      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0a6      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184e:	4b54      	ldr	r3, [pc, #336]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e09a      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001866:	4b4e      	ldr	r3, [pc, #312]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e08e      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001876:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e086      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4943      	ldr	r1, [pc, #268]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001898:	f7ff fa1a 	bl	8000cd0 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fa16 	bl	8000cd0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e06e      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d010      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d208      	bcs.n	80018f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	492b      	ldr	r1, [pc, #172]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d210      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 0207 	bic.w	r2, r3, #7
 800190c:	4923      	ldr	r1, [pc, #140]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_ClockConfig+0x1ec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e036      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4918      	ldr	r1, [pc, #96]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4910      	ldr	r1, [pc, #64]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001964:	f000 f824 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	490b      	ldr	r1, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1fc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f951 	bl	8000c30 <HAL_InitTick>
 800198e:	4603      	mov	r3, r0
 8001990:	72fb      	strb	r3, [r7, #11]

  return status;
 8001992:	7afb      	ldrb	r3, [r7, #11]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40022000 	.word	0x40022000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08001c5c 	.word	0x08001c5c
 80019a8:	20000028 	.word	0x20000028
 80019ac:	2000002c 	.word	0x2000002c

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019be:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d121      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d11e      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019e4:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019f0:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e005      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	e004      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d134      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d003      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0xac>
 8001a54:	e005      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a58:	617b      	str	r3, [r7, #20]
      break;
 8001a5a:	e005      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a5e:	617b      	str	r3, [r7, #20]
      break;
 8001a60:	e002      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	617b      	str	r3, [r7, #20]
      break;
 8001a66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	3301      	adds	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	fb03 f202 	mul.w	r2, r3, r2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	0e5b      	lsrs	r3, r3, #25
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08001c6c 	.word	0x08001c6c
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	007a1200 	.word	0x007a1200

08001ac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ae0:	f7ff f9e8 	bl	8000eb4 <HAL_PWREx_GetVoltageRange>
 8001ae4:	6178      	str	r0, [r7, #20]
 8001ae6:	e014      	b.n	8001b12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	; 0x58
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b00:	f7ff f9d8 	bl	8000eb4 <HAL_PWREx_GetVoltageRange>
 8001b04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b18:	d10b      	bne.n	8001b32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b80      	cmp	r3, #128	; 0x80
 8001b1e:	d919      	bls.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2ba0      	cmp	r3, #160	; 0xa0
 8001b24:	d902      	bls.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b26:	2302      	movs	r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	e013      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	e010      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b80      	cmp	r3, #128	; 0x80
 8001b36:	d902      	bls.n	8001b3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b38:	2303      	movs	r3, #3
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	e00a      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d102      	bne.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b44:	2302      	movs	r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	e004      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b70      	cmp	r3, #112	; 0x70
 8001b4e:	d101      	bne.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b50:	2301      	movs	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 0207 	bic.w	r2, r3, #7
 8001b5c:	4909      	ldr	r1, [pc, #36]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40022000 	.word	0x40022000

08001b88 <__libc_init_array>:
 8001b88:	b570      	push	{r4, r5, r6, lr}
 8001b8a:	4d0d      	ldr	r5, [pc, #52]	; (8001bc0 <__libc_init_array+0x38>)
 8001b8c:	4c0d      	ldr	r4, [pc, #52]	; (8001bc4 <__libc_init_array+0x3c>)
 8001b8e:	1b64      	subs	r4, r4, r5
 8001b90:	10a4      	asrs	r4, r4, #2
 8001b92:	2600      	movs	r6, #0
 8001b94:	42a6      	cmp	r6, r4
 8001b96:	d109      	bne.n	8001bac <__libc_init_array+0x24>
 8001b98:	4d0b      	ldr	r5, [pc, #44]	; (8001bc8 <__libc_init_array+0x40>)
 8001b9a:	4c0c      	ldr	r4, [pc, #48]	; (8001bcc <__libc_init_array+0x44>)
 8001b9c:	f000 f820 	bl	8001be0 <_init>
 8001ba0:	1b64      	subs	r4, r4, r5
 8001ba2:	10a4      	asrs	r4, r4, #2
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	42a6      	cmp	r6, r4
 8001ba8:	d105      	bne.n	8001bb6 <__libc_init_array+0x2e>
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
 8001bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb0:	4798      	blx	r3
 8001bb2:	3601      	adds	r6, #1
 8001bb4:	e7ee      	b.n	8001b94 <__libc_init_array+0xc>
 8001bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bba:	4798      	blx	r3
 8001bbc:	3601      	adds	r6, #1
 8001bbe:	e7f2      	b.n	8001ba6 <__libc_init_array+0x1e>
 8001bc0:	08001c9c 	.word	0x08001c9c
 8001bc4:	08001c9c 	.word	0x08001c9c
 8001bc8:	08001c9c 	.word	0x08001c9c
 8001bcc:	08001ca0 	.word	0x08001ca0

08001bd0 <memset>:
 8001bd0:	4402      	add	r2, r0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d100      	bne.n	8001bda <memset+0xa>
 8001bd8:	4770      	bx	lr
 8001bda:	f803 1b01 	strb.w	r1, [r3], #1
 8001bde:	e7f9      	b.n	8001bd4 <memset+0x4>

08001be0 <_init>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	bf00      	nop
 8001be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be6:	bc08      	pop	{r3}
 8001be8:	469e      	mov	lr, r3
 8001bea:	4770      	bx	lr

08001bec <_fini>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	bf00      	nop
 8001bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf2:	bc08      	pop	{r3}
 8001bf4:	469e      	mov	lr, r3
 8001bf6:	4770      	bx	lr
