/*
 ******************************************************************************
 * file      : main.c
 * project   : EE 329 S'23 A4
 * details   : A4 Reaction Timer
 * 			   restart timer
 * authors   : Wilson Szeto - wiszeto@calpoly.edu
 * version   : 0.1
 * date      : 230423
 * compiler  : STM32CubeIDE Version: 1.12.1 (2022)
 * target    : NUCLEO-L4A6ZG
 ******************************************************************************
 * wiring    :
 * LCD Output Pins
 ******************************************************************************
 * origins   :
 * modified from CubeIDE auto-generated main.c  (c) 2022 STMicro.
 ******************************************************************************
 */

#include "main.h"
#include "lcd.h"
#include "delay.h"
#include "keypad.h"

//FOR OUTPUT STUFF
const long int PERIOD = 800;
const long int HALF_P = 22;

//Prototypes for lab
void SystemClock_Config(void);
void setup_MCO_CLK(void);
void setup_TIM2(int iDutyCycle);
void TIM2_IRQHandler(void);

int main(void) {

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;	//clock inits

	GPIOB->MODER &= ~(GPIO_MODER_MODE7);	//LD2 init
	GPIOB->MODER |= (GPIO_MODER_MODE7_0);

	GPIOC->MODER &= ~(GPIO_MODER_MODE13);	//On board button init
	GPIOC->PUPDR &= (GPIO_PUPDR_PUPD13);
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);

	HAL_Init();
	SystemClock_Config();
	SysTick_Init();
	LCD_init();
	keypad_init();
	//setup_MCO_CLK();
	//setup_TIM2(HALF_P);

	str_write("EE 329 A4 REACT ");
	lcd_set_cursor_position(1, 0);
	str_write("PUSH SW TO TRIG ");
	// Enable RNG clock
	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;

	// Enable RNG with Clock Error Detection disabled
	RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE);

	int flag1 = 1;
	int flag2 = 0;
	int flag3 = 0;
	int delay = 1000000;
	while (1) {

		while (flag1) {
			if ((GPIOC->IDR & GPIO_IDR_ID13) == 0) {
				flag1 = 0;
			} else {

			}
		}

		delay_us(delay);

		if ((GPIOC->IDR & GPIO_IDR_ID13) == 0) {
			GPIOB->BRR = GPIO_PIN_7;

		} else {
			GPIOB->BSRR = GPIO_PIN_7;
		}
	}
}

//lab
void setup_TIM2(int iDutyCycle) {
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
	TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE); // enable event gen, rcv CCR1
	TIM2->ARR = PERIOD;                             // ARR = T = counts @4MHz
	TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
	TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);      // clr IRQ flag in status reg
	NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
	__enable_irq();                                 // global IRQ enable
	TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
}

void TIM2_IRQHandler(void) {
	GPIOC->BSRR = GPIO_PIN_1;
	if (TIM2->SR & TIM_SR_CC1IF) {      // if triggered by CCR1 event ...
		TIM2->SR &= ~(TIM_SR_CC1IF);   // manage the flag
		GPIOC->BRR = GPIO_PIN_0;                     // <-- manage GPIO pin here
	}
	if (TIM2->SR & TIM_SR_UIF) {        // if triggered by ARR event ...
		TIM2->SR &= ~(TIM_SR_UIF);     // manage the flag
		GPIOC->BSRR = GPIO_PIN_0;					// <-- manage GPIO pin here
	}
	GPIOC->BRR = GPIO_PIN_1;
}

void setup_MCO_CLK(void) {
	// Enable MCO, select MSI (4 MHz source)
	RCC->CFGR = ((RCC->CFGR & ~(RCC_CFGR_MCOSEL)) | (RCC_CFGR_MCOSEL_0));
	// Configure MCO output on PA8
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
	GPIOA->MODER &= ~(GPIO_MODER_MODE8);    	// alternate function mode
	GPIOA->MODER |= (GPIO_MODER_MODE8_1);
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT8);     	// Push-pull output
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD8);    	// no resistor
	GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED8);    // high speed
	GPIOA->AFR[1] &= ~(GPIO_AFRH_AFSEL8);    	// select MCO function
}

void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
			!= HAL_OK) {
		Error_Handler();
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

void Error_Handler(void) {

	__disable_irq();
	while (1) {
	}
}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif /* USE_FULL_ASSERT */

