/*
 ******************************************************************************
 * file      : main.c
 * project   : EE 329 S'23 A3
 * details   : A4 Part A
 * 			   restart timer
 * authors   : James Savella - savella@calpoly.edu
 *           : Cameron Buckeye - cbuckeye@calpoly.edu
 * co-author : Wilson Szeto -
 * version   : 0.1
 * date      : 230423
 * compiler  : STM32CubeIDE Version: 1.12.1 (2022)
 * target    : NUCLEO-L4A6ZG
 ******************************************************************************
 * wiring    :
 * LCD Output Pins
 ******************************************************************************
 * origins   :
 * modified from CubeIDE auto-generated main.c  (c) 2022 STMicro.
 ******************************************************************************
 */

#include "main.h"

//FOR OUTPUT STUFF
const long int PERIOD = 800;
const long int HALF_P = 22;

void SystemClock_Config(void);
void setup_MCO_CLK(void);

//LAB STUFF
void setup_TIM2(int iDutyCycle);
void TIM2_IRQHandler(void);

int main(void) {

	//FOR PINS
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;

	GPIOC->MODER = ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
	GPIOC->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0);
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
	GPIOC->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED0_Pos) | (3 << GPIO_OSPEEDR_OSPEED1_Pos) | (3 << GPIO_OSPEEDR_OSPEED2_Pos) | (3 << GPIO_OSPEEDR_OSPEED3_Pos));

	HAL_Init();
	SystemClock_Config();
	//setup_MCO_CLK();
	//setup_TIM2(HALF_P);

	uint8_t count = 0;       // initialize count
	uint32_t delay = 100000; // add software delay
	while (1) {
		if (count == 16) { // if the count goes equals 16, turn it back to 0
		      count = 0;
		    }

		    GPIOC->ODR = count; // changes all 16 port bits to count in binary

		    for (uint32_t j = 0; j < delay; j++) { // software delay
		      // empty loop
		    }
		    count++; // add count by 1
		  }
	}



//lab
void setup_TIM2(int iDutyCycle) {
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
	TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE); // enable event gen, rcv CCR1
	TIM2->ARR = PERIOD;                             // ARR = T = counts @4MHz
	TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
	TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);      // clr IRQ flag in status reg
	NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
	__enable_irq();                                 // global IRQ enable
	TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
}

void TIM2_IRQHandler(void) {
	GPIOC->BSRR = GPIO_PIN_1;
	if (TIM2->SR & TIM_SR_CC1IF) {      // if triggered by CCR1 event ...
		TIM2->SR &= ~(TIM_SR_CC1IF);   // manage the flag
		GPIOC->BRR = GPIO_PIN_0;                                // <-- manage GPIO pin here
	}
	if (TIM2->SR & TIM_SR_UIF) {        // if triggered by ARR event ...
		TIM2->SR &= ~(TIM_SR_UIF);     // manage the flag
		GPIOC->BSRR = GPIO_PIN_0;								   // <-- manage GPIO pin here
	}
	GPIOC->BRR = GPIO_PIN_1;
}

void setup_MCO_CLK(void) {
   // Enable MCO, select MSI (4 MHz source)
   RCC->CFGR = ((RCC->CFGR & ~(RCC_CFGR_MCOSEL)) | (RCC_CFGR_MCOSEL_0));
   // Configure MCO output on PA8
   RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOAEN);
   GPIOA->MODER   &= ~(GPIO_MODER_MODE8);    	// alternate function mode
   GPIOA->MODER   |=  (GPIO_MODER_MODE8_1);
   GPIOA->OTYPER  &= ~(GPIO_OTYPER_OT8);     	// Push-pull output
   GPIOA->PUPDR   &= ~(GPIO_PUPDR_PUPD8);    	// no resistor
   GPIOA->OSPEEDR |=  (GPIO_OSPEEDR_OSPEED8);    // high speed
   GPIOA->AFR[1]  &= ~(GPIO_AFRH_AFSEL8);    	// select MCO function
}


void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
			!= HAL_OK) {
		Error_Handler();
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

void Error_Handler(void) {

	__disable_irq();
	while (1) {
	}
}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif /* USE_FULL_ASSERT */
