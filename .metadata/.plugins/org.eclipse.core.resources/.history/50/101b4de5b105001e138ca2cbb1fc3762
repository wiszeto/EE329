/*
 * fingerprint.c
 *
 *  Created on: May 31, 2023
 *      Author: james
 */

#include "main.h"
#include "fingerprint.h"
#include "uart.h"
#include "delay.h"

//function that initializes the fingerprint scanner
/*
 * Settings:
 * 1. parameter number 4: N = 6 sets baud rate to 57600 (must match uart baudrate)
 * 2. parameter number 5: 3 (1-5) security level medium
 * 3. parameter number 6: 1 (0,1,2,3) = {32, 64, 128, 256} in bytes
 * 						  Resolution of fingerprint scanner
 */

uint32_t ACK_LENGTH = 0; //global variable
#define CMD_DELAY 5000000 //delay length to call for each command length


void FP_init(void) {
}

//--------------------Instructions to transmit
//Command to confirm if fingerprint is connected to upper computer
void handshake(void) {
	char handshake[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,	//instruction
			0x01, 0x00, 0x04, 0x17, 0x00, 0x00, 0x1C }; //a 0x00 after 0x01 before 0x04
	uint8_t i = 0;		//iteration counter
	while (i < 13) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = handshake[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//---------------NOT USING: does not involve scope of project ==> used to communicate across multiple fingerprint scanners
////Command to set address  might not need (need to verify command functionality
//void setAddr(uint32_t og_adr, uint32_t new_adr) {
//	//sum = package identifier + package length + instruction code + package contents
//	//IMPORTANT is new_adr part of checksum? prob not would exceed 2 byte
//	uint16_t sum = 0x01 + 0x0007 + 0x15;//0x0007 package length, 0x01 package identifer
//	char sum1 = (sum >> 8) & 0xFF;
//	char sum2 = sum & 0xFF;
//
//	//address byte addressable conversion for orginal address and new address
//	char og_adr1 = (og_adr >> 24) & 0x000000FF;
//	char og_adr2 = (og_adr >> 16) >> 0x000000FF;
//	char og_adr3 = (og_adr >> 8) >> 0x000000FF;
//	char og_adr4 = (og_adr & 0xFF);
//	char new_adr1 = (new_adr >> 24) & 0x000000FF;
//	char new_adr2 = (new_adr >> 16) >> 0x000000FF;
//	char new_adr3 = (new_adr >> 8) >> 0x000000FF;
//	char new_adr4 = (new_adr & 0xFF);
//
//	char set[16] = { 0xEF, 0x01, og_adr1, og_adr2, og_adr3, og_adr4, 0x01, 0x00, //instruction
//			0x07, 0x15, new_adr1, new_adr2, new_adr3, new_adr4, sum1, sum2 };
//
//	uint8_t i = 0;		//iteration counter
//	while (i < 16) { //sends data from lowest byte to highest byte
//		while (!(USART2->ISR & USART_ISR_TXE))
//			; //waits for empty transmit
//		USART2->TDR = set[i];
//		i++;	//increments array
//	}
//	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
//}

//Sets parameters
/* PARAMETERS [param]:
 * (4) Baud Rate: setting = [1,12] | setting value * 9600bps
 * (5) Security Level: setting = [1,5]
 * 					   1 FAR (false acceptance rate) highest - 5 FAR lowest
 * (6) Data Package Length : setting = [0,3] | 32 bytes, 64 bytes, 128 bytes, 256 bytes
 */
void SetSysPara(char param, char setting) {
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0005 + 0x0E + setting + param;//0x0007 package length, 0x01 package identifer
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sys[14] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x05, 0x0E, //instruction
			param, setting, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 14) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = sys[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}


//read valid template numbers
void templateNum(void) {
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char num[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x1D,
			0x00, 0x21 };

	uint8_t i = 0;		//iteration counter
	while (i < 12) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = num[i];
		i++;	//increments array
	}
	ACK_LENGTH = 14; //Acknowledge packet 14 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}


void genImg(void){
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char gen[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01,
			0x00, 0x05 };

	uint8_t i = 0;		//iteration counter
	while (i < 12) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = gen[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}



//uploades fingerprint ID to MCU; input parameter is BufferID (buffernumber)
void upChar(char buffID) {
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0004 + 0x08 + buffID;//0x0007 package length, 0x01 package identifer
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char up[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x08, //instructions
			buffID, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 13) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = up[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//downloads fingerprint ID from MCU;
void downChar(char buffID) {
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0004 + 0x09 + buffID;//0x0007 package length, 0x01 package identifer
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char down[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04,
			0x09, //instructions
			buffID, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 13) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = down[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}


//--------------
//--------------ALL CHECKSUM BELOW IS CORRECT:
//Need to add all package identifier, package length, and pakacage contents
//--------------
//generates character file and stores in charbuffer1/charbuffer2 (buffID)
void Img2Tz(char buffID){
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0004 + 0x02 + buffID;//0x0007 package length, 0x01 package identifer
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;
	buffID = 0x00 + buffID;

	//instruction to send
	char img[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x02, //instruction
			buffID, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 13) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = img[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}


//----------PROBLEM: not writing 0x09 final byte
//combines template from both inputs and generates a template
void regMode(void) {
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char reg[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x05,//instruction
			0x00, 0x09 };

	uint8_t i = 0;		//iteration counter
	while (i < 12) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = reg[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//stores template at specified buffer (buff1/buff2) at specified location (pageID)
void store(char buffID, uint16_t pageID) {
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0006 + 0x06 + buffID + pageID;//0x0007 package length, 0x01 package identifer
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;

	//separates pageID
	char pageIDH = (pageID >> 8) & 0xFF;
	char pageIDL = pageID & 0xFF;

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sto[15] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06,//instructions
			0x06, buffID, pageIDH, pageIDL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 15) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = sto[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//loads template at specified location (page ID) to specified buffer (buff1/buff2)
void loadChar(char buffID, uint16_t pageID) {
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0006 + 0x06 + buffID + pageID;//0x0007 package length, 0x01 package identifer
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;

	//separates pageID
	char pageIDH = (pageID >> 8) & 0xFF;
	char pageIDL = pageID & 0xFF;

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char load[15] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06,	//instructions
			0x07, buffID, pageIDH, pageIDL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 15) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = load[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//deletes specified number of templates (N) from specified location (pageID)
void deletChar(uint16_t pageID, uint16_t N) {
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	int16_t sum = 0x01 + 0x0006 + 0x06 + pageID + N;//0x0007 package length, 0x01 package identifer
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;

	//separates pageID and N
	char pageIDH = (pageID >> 8) & 0xFF;
	char pageIDL = pageID & 0xFF;
	char NH = (N >> 8) & 0xFF;
	char NL = N & 0xFF;

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char load[16] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07,	//instructions
			0x0c, pageIDH, pageIDL, NH, NL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 16) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = load[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//empties entire data base
void empty(void) {
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char emp[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03,//instructions
			0x0D, 0x00, 0x11 };

	uint8_t i = 0;		//iteration counter
	while (i < 11) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = emp[i];
		i++;	//increments array
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//compares templates loaded onto template
void match(void) {
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char mat[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03,//instructions
			0x03, 0x00, 0x07 };

	uint8_t i = 0;		//iteration counter
	while (i < 12) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = mat[i];
		i++;	//increments array
	}
	ACK_LENGTH = 14; //Acknowledge packet 14 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//search whole library to find what matches
//INPUT: BufferID (charbuff1/charbuff2), startPage(searching start), pageNum(searching numbers)
void search(char buffID, uint16_t startPage, uint16_t pageNum) {
	//checksum
	int16_t sum = 0x01 + 0x0008 + 0x04 + buffID + startPage + pageNum;
	char sum1 = (sum >> 8) & 0xFF;
	char sum2 = sum & 0xFF;

	//separates startPage and pageNum
	char sPH = (startPage >> 8) & 0xFF;
	char sPL = startPage & 0xFF;
	char pNH = (pageNum >> 8) & 0xFF;
	char pNL = pageNum & 0xFF;

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char ser[17] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08,//instructions
			0x04, buffID, sPH, sPL, pNH, pNL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
	while (i < 17) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = ser[i];
		i++;	//increments array
	}
	ACK_LENGTH = 16; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}
