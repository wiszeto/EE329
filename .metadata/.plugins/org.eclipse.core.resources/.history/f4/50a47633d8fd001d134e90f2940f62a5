#include "main.h"
#include "ADC.h"
#include "delay_us.h"
#include "uart.h"

void SystemClock_Config(void);

uint16_t ADC_Out;            //Initializes the variable that takes the ADC output
int Convert_Flag;            //Initializes the flag signaling an ADC output
uint16_t Sample_Array[20];   //Initializes the array of ADC output samples
int Array_Idx = 0;           //Initializes the array index

int main(void) {
  HAL_Init();
  SystemClock_Config();
  ADC_Init();               //Initializes the ADC
  LPUART_init();            //Initializes the LPUART
  Terminal_Init();          //Initializes the display on the terminal

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
  	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
  	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
  	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
  	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
  	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
  	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
  	GPIOB->MODER &= ~(GPIO_MODER_MODE2);
  	GPIOB->MODER |= (GPIO_MODER_MODE2_0);

  while (1)
  {
	  if (Convert_Flag == 1) {        //If the IRQ signals a new ADC output
		  __disable_irq();            //Disables the interrupt
		  Convert_Flag = 0;           //Resets the IRQ ADC flag
		  if (Array_Idx > 19) {       //Assures the array is never filled past its 20 item limit
			  Array_Idx = 0;
		  }
		  Sample_Array[Array_Idx] = ADC_Out;   //Puts the ADC output in the array at the current index
		  Array_Idx ++;                        //Increments the array index
		  ADC1->CR |= ADC_CR_ADSTART;          //Starts another ADC conversion
		  __enable_irq();                      //Enables the interrupt again
	  }
	  Terminal_Values(Sample_Array);           //Updates the terminal with values in the array
	  if (GPIOC->IDR & GPIO_IDR_ID13) { // Check if the button is pressed
			  GPIOB->BSRR = GPIO_PIN_7;
			  GPIOB->BSRR = GPIO_PIN_2;
	  			delay_us(1000000);
	  		}
	  GPIOB->BRR = GPIO_PIN_7;
	  GPIOB->BRR = GPIO_PIN_2;
//	  delay_us(10000);
  }
}

void ADC1_2_IRQHandler(void) {          //Initializes the interrupt handler
	if (ADC1->ISR & ADC_ISR_EOC) {      //Verifies that the interrupt is triggered
		ADC1->ISR &= ~(ADC_ISR_EOC);    //Disables the interrupt trigger
		ADC_Out = ADC1->DR;             //Reads a value from the ADC output
		Convert_Flag = 1;               //Sets the flag to signal an ADC output
	}
}
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
