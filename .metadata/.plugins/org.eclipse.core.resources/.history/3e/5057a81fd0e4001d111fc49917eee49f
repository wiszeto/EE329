
#include "main.h"

RNG_HandleTypeDef hrng;

void SystemClock_Config(void);
static void MX_RNG_Init(void);

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_RNG_Init();

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;	//clock inits

  GPIOB->MODER &= ~(GPIO_MODER_MODE7);	//LD2 init
  GPIOB->MODER |= (GPIO_MODER_MODE7_0);

  GPIOC->MODER &= ~(GPIO_MODER_MODE0);
  GPIOC->MODER |= (GPIO_MODER_MODE0_0);
  GPIOC->MODER &= ~(GPIO_MODER_MODE1);
  GPIOC->MODER |= (GPIO_MODER_MODE1_0);
  GPIOC->MODER &= ~(GPIO_MODER_MODE2);
  GPIOC->MODER |= (GPIO_MODER_MODE2_0);
  GPIOC->MODER &= ~(GPIO_MODER_MODE3);
  GPIOC->MODER |= (GPIO_MODER_MODE3_0);

  	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
  	RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE);
  while (1)
  {

  }

}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};


  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}


static void MX_RNG_Init(void)
{

  hrng.Instance = RNG;
  if (HAL_RNG_Init(&hrng) != HAL_OK)
  {
    Error_Handler();
  }

}

void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }

}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif
