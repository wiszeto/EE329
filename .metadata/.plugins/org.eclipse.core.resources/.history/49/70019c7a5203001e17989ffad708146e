#include "main.h"

#define EEPROM_ADDRESS (0xA2)  // Replace 0x50 with your EEPROM's address

void SystemClock_Config(void);
void I2C_init(void);
void EEPROM_write(uint16_t addr, uint8_t data);
uint8_t EEPROM_read(uint16_t addr);

int main(void) {

	HAL_Init();
	SystemClock_Config();
	I2C_init();

	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode

	while (1) {

		uint16_t addr = 0x0001;
		uint8_t data = 3;

		// Write data to the random address
//		EEPROM_write(addr, data);
//
//		// Wait for 5ms
//		HAL_Delay(5);

		// Read data from the random address
		uint8_t read_data = EEPROM_read(addr);

		// If the written data matches the read data, turn on the LED
		if (data == read_data) {
			GPIOB->BSRR = GPIO_PIN_7;
			while (1)
				;
		}
	}

}

void I2C_init(void) {
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);   // enable GPIOB clock
	GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9); //clear bits
	GPIOB->MODER |= (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1); //set bits AF mode
	GPIOB->AFR[1] &= ~((0x000F << GPIO_AFRH_AFSEL8_Pos)
			| (0x000F << GPIO_AFRH_AFSEL9_Pos));
	GPIOB->AFR[1] |= ((0x0004 << GPIO_AFRH_AFSEL8_Pos)
			| (0x0004 << GPIO_AFRH_AFSEL9_Pos));	//set bits AF 4
	GPIOB->PUPDR &= (GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9);
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD8_1 | GPIO_PUPDR_PUPD9_1);
//	GPIOB->OTYPER |= (GPIO_PIN_8 | GPIO_PIN_9);
//	GPIOB->OSPEEDR &=~(GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9);
//	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED8_1 | GPIO_OSPEEDR_OSPEED9_1);

	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;  // enable I2C bus clock
	I2C1->CR1   &= ~( I2C_CR1_PE );        // put I2C into reset (release SDA, SCL)
	I2C1->CR1   &= ~( I2C_CR1_ANFOFF );    // filters: enable analog
	I2C1->CR1   &= ~( I2C_CR1_DNF );       // filters: disable digital
	I2C1->TIMINGR = 0x00000004;
	I2C1->CR2   |=  ( I2C_CR2_AUTOEND );   // auto send STOP after transmission
	I2C1->CR2   &= ~( I2C_CR2_ADD10 );     // 7-bit address mode
	I2C1->CR1   |=  ( I2C_CR1_PE );        // enable I2C
	// build EEPROM transaction
	I2C1->CR2   &= ~( I2C_CR2_RD_WRN );    // set WRITE mode
	I2C1->CR2   &= ~( I2C_CR2_NBYTES );    // clear Byte count
	I2C1->CR2   |=  ( 3 << I2C_CR2_NBYTES_Pos); // write 3 bytes (2 Addr, 1 data)
	I2C1->CR2   &= ~( I2C_CR2_SADD );      // clear device address
	I2C1->CR2   |=  ( EEPROM_ADDRESS << (I2C_CR2_SADD_Pos) ); // device addr SHL 1
	I2C1->CR2   |=    I2C_CR2_START;       // start I2C WRITE op
	/* USER wait for I2C_ISR_TXIS to clear before writing each Byte, e.g. ... */
//	while(!(I2C1->ISR & I2C_ISR_TXIS)) ;   // wait for start condition to transmit
//	I2C1->TXDR = (EEPROM_ADDRESS >> 8); // xmit MSByte of address
	/* address high, address low, data  -  wait at least 5 ms before READ
	   the READ op has new NBYTES (WRITE 2 then READ 1) & new RD_WRN for 3rd Byte */


}

void EEPROM_write(uint16_t addr, uint8_t data) {
	// Start the write operation
//	I2C1->CR2 = (EEPROM_ADDRESS << I2C_CR2_SADD_Pos) | (3 << I2C_CR2_NBYTES_Pos) ;
//	I2C1->CR2 |= I2C_CR2_START;
	// Send the address to write to
	while (!(I2C1->ISR & I2C_ISR_TXIS));
	I2C1->TXDR = (addr >> 8) & 0xFF; // Address high byte

	while (!(I2C1->ISR & I2C_ISR_TXIS));
	I2C1->TXDR = addr & 0x00FF; // Address low byte

	// Send the data to write
	while (!(I2C1->ISR & I2C_ISR_TXIS));
	I2C1->TXDR = data;

	// Wait for the STOP condition
	while (!(I2C1->ISR & I2C_ISR_STOPF));

	// Reset and re-enable I2C bus
	I2C1->CR1 &= ~( I2C_CR1_PE);
	I2C1->CR1 |= ( I2C_CR1_PE);
	// Wait for 5ms
	HAL_Delay(5);
}

uint8_t EEPROM_read(uint16_t addr) {
	// Start a write operation to send the address to read from
	I2C1->CR2 = (EEPROM_ADDRESS << I2C_CR2_SADD_Pos) | (2 << I2C_CR2_NBYTES_Pos)
			| I2C_CR2_START;

	// Send the address to read from
	while (!(I2C1->ISR & I2C_ISR_TXIS));
	I2C1->TXDR = (addr >> 8) & 0xFF; // Address high byte

	while (!(I2C1->ISR & I2C_ISR_TXIS));
	I2C1->TXDR = addr & 0xFF; // Address low byte

	// Wait for the write operation to finish
	while (!(I2C1->ISR & I2C_ISR_TC));

	// Start a read operation to get the data
	I2C1->CR2 = (EEPROM_ADDRESS << I2C_CR2_SADD_Pos) | (1 << I2C_CR2_NBYTES_Pos)
			| I2C_CR2_START | I2C_CR2_RD_WRN;

	// Wait for the data
	while (!(I2C1->ISR & I2C_ISR_RXNE))
		;
	uint8_t data = I2C1->RXDR;

	// End the read operation
	I2C1->CR2 |= I2C_CR2_STOP;

	// Wait for the STOP condition
	while (!(I2C1->ISR & I2C_ISR_STOPF))
		;

	// Reset and re-enable I2C bus
	I2C1->CR1 &= ~( I2C_CR1_PE);
	I2C1->CR1 |= ( I2C_CR1_PE);
	return data;
}
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
