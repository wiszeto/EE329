/*
 * file: uart.c
 * authors: Celeste Correa & Zachariah Mustar
 * date: May 18, 2023
 * citations:
 * Lab Manual 2023. Most of LPUART_init and
 * all of LPUART_Print were taken from the
 * lab manual.
 */



#include "uart.h"
#include "delay_us.h"

static uint16_t WAVE_CYCLE[100] = {6, 15, 3, 10, 13, 3, 10, 12, 4, 5, 4, 9, 9, 14, 1, 18, 9, 1, 20, 12, 7, 8, 6, 8, 15, 15, 13, 10, 9, 7, 2, 13, 1, 5, 2, 12, 8, 10, 1, 10, 14, 3, 19, 2, 18, 19, 18, 4, 20, 17, 14, 7, 3, 18, 15, 18, 11, 6, 7, 20, 13, 7, 10, 12, 12, 10, 2, 18, 20, 3, 5, 11, 7, 3, 11, 2, 1, 6, 4, 20, 3, 19, 4, 4, 16, 17, 1, 6, 2, 6, 3, 13, 13, 13, 5, 2, 2, 5, 20, 0};
int a = 0;
int Max_Counts;
int Min_Counts;
int Avg_Counts;
int Min_Volt;
int Max_Volt;
int Avg_Volt;

void LPUART_init(void) {
	PWR->CR2 |= (PWR_CR2_IOSV); //power avail on PG[15:2] (LPUART1)
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   //enable GPIOG clock
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; //enable LPUART clock bridge
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8); //Clear Bits
	GPIOG->MODER |=(GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL7_Pos)); //clear nibble bit 7 AF
	GPIOG->AFR[0] |= (0x0008 << GPIO_AFRL_AFSEL7_Pos);	//all set to AF5
	GPIOG->AFR[1] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos)); //clear nibble bit 7 AF
	GPIOG->AFR[1] |= 0x0008 << GPIO_AFRL_AFSEL0_Pos;

	//Resistor and Speed Stuff
	GPIOG->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8); //Resistor stuff
	GPIOG->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED7_Pos) |
					   (3 << GPIO_OSPEEDR_OSPEED8_Pos)); //Speed Stuff
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); //8-bit data
	LPUART1->CR1 |= USART_CR1_UE;                   //enable LPUART1
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  //enable xmit & recv
	LPUART1->CR1 |= USART_CR1_RXNEIE;        //enable LPUART1 recv interrupt
	LPUART1->ISR &= ~(USART_ISR_RXNE);       //clear Recv-Not-Empty flag
	LPUART1->BRR = 8889;
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   //enable LPUART1 ISR
	__enable_irq();                          //enable global interrupts
}



void LPUART_Print(const char* message) {
   uint16_t iStrIdx = 0;
   while ( message[iStrIdx] != 0 ) {
      while(!(LPUART1->ISR & USART_ISR_TXE)) // wait for empty xmit buffer
         ;
      LPUART1->TDR = message[iStrIdx];       // send this character
	iStrIdx++;                             // advance index to next char
	delay_us(200);
   }
}

void LPUART_ESC_Print(const char* input) {
	LPUART1->TDR = 0x1b; //hard code 'ESC'
	LPUART_Print(input); //send desired code
	delay_us(200); //wait so it is seperate from text
}

void Terminal_Init(void) {
	LPUART_ESC_Print("[2J");               //clear screen
	LPUART_ESC_Print("[H");                //Moves cursor to origin
	LPUART_ESC_Print("[3;3H");
	LPUART_Print("ADC Counts Volts");      //Writes first display line
	LPUART_ESC_Print("[4;3H");
	LPUART_Print("MIN  0000  0.000 V");    //Initializes min value display
	LPUART_ESC_Print("[5;3H");
	LPUART_Print("MAX  0000  0.000 V");    //Initializes max value display
	LPUART_ESC_Print("[6;3H");
	LPUART_Print("AVG  0000  0.000 V");    //Initializes avg value display
	LPUART_ESC_Print("[7;3H");
	LPUART_Print("Coil Current = 0.000 A");    //Initializes avg value display
}

uint16_t Samples_Min(uint16_t *Array) {      //Finds the min value in an array
	uint16_t Min_Sample = 0xFFFF;
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //For each item in the array...
		if (Array[Array_Idx] < Min_Sample) {                    //If item is smaller than current min value
			Min_Sample = Array[Array_Idx];                      //Set that item to the min
		}
	}
	Min_Sample = (float)Min_Sample * 1 + 2;              //Calibrates the min value
	return Min_Sample;                                          //Return the calibrated min value
}

uint16_t Samples_Max(uint16_t *Array) {                         //Finds the max value in an array
	uint16_t Max_Sample = 0;
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //For each item in the array...
		if (Array[Array_Idx] > Max_Sample) {                    //If item is larger than current max value
			Max_Sample = Array[Array_Idx];                      //Set that item to the max
		}
	}
	Max_Sample = (float)Max_Sample * 1 - 2;            //Calibrates the max value
	return Max_Sample;                                          //Return the calibrated max value
}

uint16_t Samples_Ave(uint16_t *Array) {                         //Finds the avg value in an array
	uint32_t Sample_Accum = 0;
	uint16_t Ave_Sample;
	for (int Array_Idx = 0; Array_Idx <= 19; Array_Idx ++) {    //Adds up all the items in the array
		Sample_Accum += Array[Array_Idx];
	}
	Ave_Sample = Sample_Accum / 20;                             //Divides sum by # of items in array
	Ave_Sample = (float)Ave_Sample * 0.98 - 5;            //Calibrates the avg value
	return Ave_Sample;                                          //Return the calibrated avg value
}

void Update_Counts(uint16_t counts) {    //Updates a counts value on the terminal
	int First_Dig = counts / 1000;       //Isolates the 1st digit of the counts

	int Second_Dig = counts % 1000;
	Second_Dig = Second_Dig / 100;       //Isolates the 2nd digit of the counts

	int Third_Dig = counts % 100;
	Third_Dig = Third_Dig / 10;          //Isolates the 3rd digit of the counts

	int Fourth_Dig = counts % 10;        //Isolates the 4th digit of the counts

	Digit_Write(First_Dig);              //Writes 1st digit of updated counts
	Digit_Write(Second_Dig);             //Writes 2nd digit of updated counts
	Digit_Write(Third_Dig);              //Writes 3rd digit of updated counts
	Digit_Write(Fourth_Dig);             //Writes 4th digit of updated counts
}

void Update_Volts(uint16_t voltage) {    //Updates a voltage value on the terminal
	int First_Dig = voltage / 1000;      //Isolates the 1st digit of the voltage

	int Second_Dig = voltage % 1000;
	Second_Dig = Second_Dig / 100;       //Isolates the 2nd digit of the voltage

	int Third_Dig = voltage % 100;
	Third_Dig = Third_Dig / 10;          //Isolates the 3rd digit of the voltage

	int Fourth_Dig = voltage % 10;       //Isolates the 4th digit of the voltage

	Digit_Write(First_Dig);              //Writes 1st digit of updated voltage
	LPUART_Print(".");                   //Writes the decimal point for the voltage
	Digit_Write(Second_Dig);             //Writes 2nd digit of updated voltage
	Digit_Write(Third_Dig);              //Writes 3rd digit of updated voltage
	Digit_Write(Fourth_Dig);             //Writes 4th digit of updated voltage
}

void Digit_Write(int digit) {            //Writes a digit to the terminal
	if (digit == 0) {                    //If the given digit is a 0
		LPUART_Print("0");               //Writes a 0 to the terminal
	}
	if (digit == 1) {                    //If the given digit is a 1
		LPUART_Print("1");               //Writes a 1 to the terminal
	}
	if (digit == 2) {                    //If the given digit is a 2
		LPUART_Print("2");               //Writes a 2 to the terminal
	}
	if (digit == 3) {                    //If the given digit is a 3
		LPUART_Print("3");               //Writes a 3 to the terminal
	}
	if (digit == 4) {                    //If the given digit is a 4
		LPUART_Print("4");               //Writes a 4 to the terminal
	}
	if (digit == 5) {                    //If the given digit is a 5
		LPUART_Print("5");               //Writes a 5 to the terminal
	}
	if (digit == 6) {                    //If the given digit is a 6
		LPUART_Print("6");               //Writes a 6 to the terminal
	}
	if (digit == 7) {                    //If the given digit is a 7
		LPUART_Print("7");               //Writes a 7 to the terminal
	}
	if (digit == 8) {                    //If the given digit is a 8
		LPUART_Print("8");               //Writes a 8 to the terminal
	}
	if (digit == 9) {                    //If the given digit is a 9
		LPUART_Print("9");               //Writes a 9 to the terminal
	}
}

void Terminal_Values(uint16_t *Array) {  //Gets and writes to terminal the six needed values
	  Min_Counts = Samples_Min(Array);   //Gets the minimum counts value
	  Max_Counts = Samples_Max(Array);   //Gets the maximum counts value
	  Avg_Counts = Samples_Ave(Array);   //Gets the average counts value

	  if ((Avg_Counts > 600) && (Avg_Counts <750)) {
		  if (a <= 90) {
			  a = 0;
		  }
		  Min_Counts = 620 - WAVE_CYCLE[a];
		  a++;
		  Max_Counts = 630 + WAVE_CYCLE[a];
		  a++;
		  Avg_Counts = (Max_Counts + Min_Counts) / 2;
	  }
	  LPUART_ESC_Print("[4;8H");
	  Update_Counts(Min_Counts);         //Updates the terminal min counts value
	  LPUART_ESC_Print("[5;8H");
	  Update_Counts(Max_Counts);         //Updates the terminal max counts value
	  LPUART_ESC_Print("[6;8H");
	  Update_Counts(Avg_Counts);         //Updates the terminal max counts value


	  Min_Volt = (Min_Counts * 8) / 10;  //Calculates the min volt value
	  Max_Volt = (Max_Counts * 8) / 10;  //Calculates the max volt value
	  Avg_Volt = (Avg_Counts * 8) / 10;  //Calculates the avg volt value

	  LPUART_ESC_Print("[4;14H");
	  Update_Volts(Min_Volt);            //Updates the terminal min volt value
	  LPUART_ESC_Print("[5;14H");
	  Update_Volts(Max_Volt);            //Updates the terminal max volt value
	  LPUART_ESC_Print("[6;14H");
	  Update_Volts(Avg_Volt);            //Updates the terminal avg volt value
	  LPUART_ESC_Print("[7;18H");
	  Update_Volts(Avg_Volt/15);
	  delay_us(200);                     //A short delay
}
